<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wd-z711&#39;s B10g</title>
  
  <subtitle>wd-z711&#39;s B10g</subtitle>
  <link href="https://wd-2711.tech/atom.xml" rel="self"/>
  
  <link href="https://wd-2711.tech/"/>
  <updated>2024-03-30T15:48:08.521Z</updated>
  <id>https://wd-2711.tech/</id>
  
  <author>
    <name>wd-z711</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tracr-paper</title>
    <link href="https://wd-2711.tech/2024/03/29/tracr-paper/"/>
    <id>https://wd-2711.tech/2024/03/29/tracr-paper/</id>
    <published>2024-03-29T10:39:13.000Z</published>
    <updated>2024-03-30T15:48:08.521Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tracr-Compiled-Transformers-as-a-Laboratory-for-Interpretability"><a href="#Tracr-Compiled-Transformers-as-a-Laboratory-for-Interpretability" class="headerlink" title="Tracr: Compiled Transformers as a Laboratory for Interpretability"></a>Tracr: Compiled Transformers as a Laboratory for Interpretability</h1><p>&emsp;编译器 Tracr 将以 RASP 编写的人类可读程序转换为标准的 decoder-only transformers。</p><h2 id="Transformer-架构与-RASP-编程语言"><a href="#Transformer-架构与-RASP-编程语言" class="headerlink" title="Transformer 架构与 RASP 编程语言"></a>Transformer 架构与 RASP 编程语言</h2><h3 id="Transformer-大体结构"><a href="#Transformer-大体结构" class="headerlink" title="Transformer 大体结构"></a>Transformer 大体结构</h3><p>&emsp;<a href="https://zhuanlan.zhihu.com/p/338817680">link</a>。</p><p>&emsp;之前自己学过 transformer，现在复习一下。Transformer 总体结构如下：</p><p><img src="/images/tracr-paper/image-20240329190814195.png" alt="image-20240329190814195" style="zoom:67%;" /></p><p>&emsp;Transformer 由 Encoder 和 Decoder 两个部分组成，Encoder 和 Decoder 都包含 6 个 block。Transformer 的工作流程大体如下：</p><p>Step1：获取输入句子的每一个单词的表示向量 X，X 由单词的 Embedding 和单词位置的 Embedding 相加得到，Embedding 就是从原始数据提取出来的 Feature。</p><p><img src="/images/tracr-paper/image-20240329191207670.png" alt="image-20240329191207670" style="zoom:67%;" /></p><p>Step2：将得到的向量矩阵传入 Encoder 中，经过 6 个 Encoder block 后可以得到句子所有单词的编码信息矩阵 C。Encoder block 输出的矩阵维度与输入完全一致。</p><p><img src="/images/tracr-paper/image-20240329191528281.png" alt="image-20240329191528281" style="zoom:67%;" /></p><p>Step3：将 Encoder 输出的编码信息矩阵 C 传递到 Decoder 中，Decoder 依次会根据当前翻译过的单词 1-&gt;i 翻译下一个单词 i+1。在使用的过程中，翻译到单词 i+1 的时候需要通过 Mask (掩盖) 操作遮盖住 i+1 之后的单词。</p><p><img src="/images/tracr-paper/image-20240329191724166.png" alt="image-20240329191724166" style="zoom:67%;" /></p><p>&emsp;下面重点说一下 Transformer 的自注意力机制。</p><p><img src="/images/tracr-paper/image-20240329191949702.png" alt="image-20240329191949702" style="zoom:67%;" /></p><p>&emsp;如上图所示，左侧为 Encoder block，右侧为 Decoder block。红色圈中的部分为 Multi-Head Attention，是由多个 Self-Attention 组成的，可以看到 Encoder block 包含一个 Multi-Head Attention，而 Decoder block 包含两个 Multi-Head Attention。</p><p>&emsp;Multi-Head Attention 上方还包括一个 Add &amp; Norm 层，Add 表示残差连接 (Residual Connection) 用于防止网络退化，Norm 表示 Layer Normalization，用于对每一层的激活值进行归一化。</p><h3 id="Self-Attention-结构"><a href="#Self-Attention-结构" class="headerlink" title="Self-Attention 结构"></a>Self-Attention 结构</h3><p><img src="/images/tracr-paper/image-20240329192345893.png" alt="image-20240329192345893" style="zoom:67%;" /></p><p>&emsp;上图是 Self-Attention 的结构，需要用到矩阵 Q(查询)、K(键值)、V(值)。在实际中，Self-Attention 接收的是句子输入或者上一个 Encoder block 的输出。而 Q、K、V 是通过 Self-Attention 的输入进行线性变换得到的，具体而言，是 X 乘 $W_Q$、$W_K$ 与 $W_V$。可以将上述结构总结成如下式子：$\mathrm{Attention}(Q,K,V)=\mathrm{softmax}\left(\frac{QK^T}{\sqrt{d_k}}\right)V$，$d_k$是 $Q$、$K$ 矩阵的列数，其中 Q 也叫做 query，K 也叫做 key，V 也叫做 value。Softmax 使得每一个元素的范围都在 (0,1) 之间，并且所有元素的和为 1。</p><h3 id="Multi-Head-Attention-结构"><a href="#Multi-Head-Attention-结构" class="headerlink" title="Multi-Head Attention 结构"></a>Multi-Head Attention 结构</h3><p>&emsp;Multi-Head Attention 是由多个 Self-Attention 组合形成的。</p><p><img src="/images/tracr-paper/image-20240330212449335.png" alt="image-20240330212449335" style="zoom:67%;" /></p><p>&emsp;可以看到 Multi-Head Attention 包含多个 Self-Attention 层，首先将输入 X 分别传递到 h 个不同的 Self-Attention 中，计算得到 h 个输出矩阵 Z。举个例子，例如 h=8：</p><p><img src="/images/tracr-paper/image-20240330212816383.png" alt="image-20240330212816383" style="zoom:67%;" /></p><p>&emsp;得到 8 个输出矩阵 $Z_1$ 到 $Z_8$ 之后，Multi-Head Attention 将它们拼接在一起 （Concat），然后传入一个 Linear 层，得到 Multi-Head Attention 最终的输出 Z，Z 的维度与 X 的维度是一样的：</p><p><img src="/images/tracr-paper/image-20240330212927825.png" alt="image-20240330212927825" style="zoom:67%;" /></p><h3 id="RASP"><a href="#RASP" class="headerlink" title="RASP"></a>RASP</h3><p>&emsp;Transformer 在每个注意力层和 MLP 层都有残差连接。残差链接充当一种存储器，较早的层可以使用它来将信息传递到后面的层。</p><p>&emsp;限制访问序列处理语言（Restricted Access Sequence Processing Language，RASP）是一种序列处理语言，具有两种类型的变量：序列操作 (s-ops) 和选择器，以及两种类型的指令：elementwise，select-aggregate。</p><p>&emsp;序列操作。序列运算 (s-op) 表示求值期间的值序列。标记和索引是内置的原始 s-op，它们分别返回输入标记的序列。例如：tokens(“hello”) = [h, e, l, l, o]。</p><p>&emsp;Select-aggregate。此操作对应于 Transformer 中的注意力。例如：</p><p><img src="/images/tracr-paper/image-20240330220718887.png" alt="image-20240330220718887" style="zoom:67%;" /></p><p>&emsp;$p(x, y) = x &lt; y$，其中 x 来自 indices，y 来自 s-op [1, 0, 2]。</p><p>&emsp;Aggregate 将 selector 和 s-op 作为输入，并生成一个 s-op。</p><p><img src="/images/tracr-paper/image-20240330221337257.png" alt="image-20240330221337257" style="zoom:67%;" /></p><p>&emsp;Selector 对应于 transformer 中的 attention。Select-aggregate 相当于 Transformer 中的 attention head。</p><h2 id="Tracr-架构"><a href="#Tracr-架构" class="headerlink" title="Tracr 架构"></a>Tracr 架构</h2><p>&emsp;我们不允许 selectors 的布尔组合，强制残差流的带注释的分类或数字嵌入（enforce annotated categorical or numerical embeddings for the residual stream），并强制使用 BOS 为开头。</p><p>&emsp;如果 RASP 是高级语言，那么 Craft 就是汇编语言。 Tracr 编译的模型可以转换为任何标准 decoder-only transformer 模型的权重。Tracr 通过六个步骤将 RASP 转换为 transformer 权重：</p><p>Step1：构建 computational graph。跟踪整个程序以创建表示计算的有向图，该图具有表示 tokens 和 indices 的 source node 以及用于输出 s-op 的 sink node。RASP 程序中的每个操作都成为 computational graph 中的一个节点。</p><p>Step2：推断 s-op 输入和输出值。 对于每个 s-op，需要决定如何将其嵌入到残差流中。要使用分类编码，我们需要知道 s-op 可以采用哪些值。所有节点都有一组有限的输出值，因为输入词汇和上下文是有限的。我们遍历该图并用其可能的输出来注释每个节点（程序分析？），以确保我们找到 s-op 将采用的值的超集。</p><p>Step3：将 computational graph 中的每个节点并将其转换为 model block。Elementwise 为 MLP 块，select-aggregate 为 attention block。我们使用 MLP 和 attention block 来模拟任意函数，具有分类输入和输出的 MLP 充当查找表，具有数字输入和输出的 MLP 充当分段线性近似。对于注意力层，我们将 selector 转换为 $W<em>{QK}$，并将 aggregate 转换为 $W</em>{OV}$。</p><p>Step4：将组件分配给层。为了构建 Transformer 模型，我们需要将 computational graph 中的所有模型块分配给层。理想情况下，我们希望找到最小的模型来执行所需的计算。我们通常可以将其表述为具有几个约束的组合优化问题：Transformer 架构具有交替的注意力层和 MLP 层，并且所有相互依赖的计算都需要采用正确的顺序。出于范围原因，我们启发式地解决这个问题。首先，我们计算从输入到给定节点的最长路径。该路径长度是我们可以分配节点的层数的上限。然后，我们应用额外的启发式方法将层与可以并行计算的块组合起来，这种方法返回正确但有时不是最优的层分配。</p><p>Step5：构建模型。我们将残差流空间构造为所有模型组件的输入和输出空间的直接和。换句话说，我们将每个 s-op 嵌入到它自己的正交子空间中，该子空间被保留供其在整个网络中单独使用。现在，我们可以按照层分配确定的顺序遍历计算图，并将组件堆叠起来以获得 Craft 中表示的完整 transformer。</p><p>Step6. 组装权重矩阵。最后，我们将模型的 Craft 表示转化为具体的模型权重。首先，我们将并行 MLP 层合并为单个层，并将并行注意力头合并为单个层。在注意力层中，我们将 $W<em>{QK}$ 和 $W</em>{OV}$ 矩阵分解为单独的 $W_q$、$W_k$、$W_o$、$W_v$ 权重矩阵。最后，我们调整所有权重的形状并将它们连接到 transformer。</p><p><img src="/images/tracr-paper/image-20240330234521636.png" alt="image-20240330234521636" style="zoom:67%;" /></p><h2 id="Tracr-转-transformer-的例子"><a href="#Tracr-转-transformer-的例子" class="headerlink" title="Tracr 转 transformer 的例子"></a>Tracr 转 transformer 的例子</h2><p>&emsp;明天整一个 RASP 程序，转为模型之后的样子。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Tracr-Compiled-Transformers-as-a-Laboratory-for-Interpretability&quot;&gt;&lt;a href=&quot;#Tracr-Compiled-Transformers-as-a-Laboratory-for-Interpre</summary>
      
    
    
    
    <category term="papers" scheme="https://wd-2711.tech/categories/papers/"/>
    
    
  </entry>
  
  <entry>
    <title>haiku-study</title>
    <link href="https://wd-2711.tech/2024/03/27/haiku-study/"/>
    <id>https://wd-2711.tech/2024/03/27/haiku-study/</id>
    <published>2024-03-27T08:21:28.000Z</published>
    <updated>2024-03-27T11:03:16.796Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c39d97ef6df168aa5dd5445fdf2b434b5d77c48d8d00ca58b70abd98559fba7c"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="ML" scheme="https://wd-2711.tech/categories/ML/"/>
    
    
  </entry>
  
  <entry>
    <title>aliyunctf-2024</title>
    <link href="https://wd-2711.tech/2024/03/27/aliyunctf-2024/"/>
    <id>https://wd-2711.tech/2024/03/27/aliyunctf-2024/</id>
    <published>2024-03-27T07:22:32.000Z</published>
    <updated>2024-03-28T08:51:27.991Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="71dc5a18dc59aca8d04402e38e07bd80db0a9426999be168535e9ec31a1c4ff6">2c151d14a1692af99fa0c574696ab642630118ededbcd92b05c804024ee0b0d57f77d63c2dd7a672208fb6bf25c869df1f144eb82f9d19ee6069d6c8f41dfcc04234e9c8ea599e4def1b0a7eb60955f1431cea6f2144a60665d96e49175b430f789f85a87378822bac9e3dbaf25dc692bdea9d31588ab929f12072a0371cd7ba0d7537486f98c11e528700a4ad050ca948336b85acb3d3fbb78882aac5c1b66b760fcf9f631d1e2f321ee9f1d5b5f66c9152a5127afd90c6052c39c2330efad772cfb6358c3c6292e023b582e771084db950e32424b17abf4ce51917ec40d75d53d407ff8e97b16d798d93487bec7c23e4a217736b5aa343c0d0d4a7658fef02c642a0867597fd3f60c50fdfe28f1f5688efb951bc1f62e9ba8941f494d7286e36a8ad8344d7bfffec0550488a7a7c02fc246cb221c4420b88040f8ca4905f5add2d490c73ec1d31e66013fbbb44404f9f08e2b396c3e0a36f7a3f66fd42b70eb0d4b06343c95b4ee27feb3c8916713ce66a6bc51d257c25064f47caca8cf4fa12a8314509556b97d1d72034c63983d01c63cf98ad90b96d3b13e84a84ea9c373aec4f53072b420d6a1738c092b2bc268f2c0dcf61ef8c9903360b6c72c5a44712491f30e1384a5dd474711e2ed0f9a842610487cff2f5e73934f2dafd8df89abd7ebfa6ab6b3d1364e481373dea837dca45d2eadf31bae4cd3f6ef75a55a20376c4071421cf692d275aba62ce6522f70442d66fdee903e4737c78dafc072826eea8dc56dd151b44cabfb663c7f32b5aa39352c02aeeaaa1661f4cec31b409dfb3312659d4519a617dcb6417a4690a07e1ea7f2f08f28feeee17ec3530e24cdf29b3b552ff8063f05a7ea54a08ad0294dd425632307e0d6a3b46129f29d7ee137d2646f016410ce28fe93bbc9fde394253b53017f3f63ec73bd1d88f9119ecc58438ff6b161f1cea30db314c04109e89d31c1b6eaaa744d7c7e8a2ff18b75b50db3469d5cc84806b3cd0493ac851fecd2781820505987c06097d0966c26f9f47e3cae777409b1177251eaeaf2e2b0659e43706a2842f0bc5cb0826b160069a3b7b2ca580da37022196d280fa3ac84929001ccf334065150a14004999dabe993c275f4e0c9f63cab173a1686d8b413d30678162160a55958c801ca61589c2747e127adccefc30c2f0346f4fe0e649d9c2c2f8f25b339a7bf1228b3433a0548591581accc3c2e2d296c1d95906c068b3e55206bc023ca5fde9fd9397add72a9cb421a88e410e92c4439774e8499c552d20b3233f3b1968295a8b96a8e0679caa75c11751ceb15bea06f23c73e617545b717f74964bdd48f3681788aa2a67154f463afdcd3d8a927685e73432866ef8a88d4e2e40cf06a5a2fb35df99ed89ace789ed2a40068932d2c557ae94ec4570f5ea550188d003b626e440600fe4625ae15f853c8c4df7a33ca53483065b3c55d01fd2108cf8cf9fb969e94dfd3559a45b8a0f8f7ae1db69a8c63b424b5e3b417723f4bc437009a7969398692fedbbedd6b62c4912871c0f53b16c8ce38939401143104d84f1380606ea5bf33e159ba055ceae9cb93d644014cf4a9700d4d64d5095ed4a982abc57490dc93f4d56b1e730dd3b4469c53d0edf4383b7082bd78769eb8ab4c93a6fdd343a6f7f9f10739601bb6e8b6f0e12ebda200c72f60b12c98963fd5966286aa83e627af5e84afa3eb6dce664180a00e7a72a93a14036a75b28e21bb4ccd15266e6e19b5a5d71e6e393352af23ae6053dc6c7545c3cd39b0288c83d1ebe34c13db44d1c8424026e4b873cc6925ecc0bfb0f5b325e5bc3b1fa1337889a577ca860755fbbad17f327f4e5b326dcf11f724b7c523a90bdb9ad3e5d94d4ba801a24973a051508e7c742db1e20be8f1046470ff37d01774354a7b3268b5687398362068057aa7aa6dfa3f279e1d0c41360d131b0cbc026457ace445543c984025e6842aa351027eb9827ea4e4b274b702e9466fbf46dee702e8987991f6130b86998598c8fee15492a314fafcccec71d989a0e40a8346ebb5eb67d5a21118e5ec1af196af721884385e81335522170b1db18281d955e040bc01d144f24b2b5030ad6f08dd810cf87349425f0e1ef8b299f907a17072f35ae1845373a93b262f8495e1b8cc5ad069f090cf1c18ee34f34887c24c4414b47b3b149b444e2b03b495f5a7bee23b6df78741fe9eb454d7491f1bcc66079a0ea0927e9a3a50491f397370ccdd4b1ef132f06603af0908d49a3b13834b1f50fb202306921af87d4b0bcca2a624442490f3b3223b3f15c4a501df6438a97226710ac3b65b335662504cc2b25faf3a479936059ee5977b82ac8d3d3f53ff1082163b599f1bc6b75ee0aa3a4addeb92c0d18f29a4a47f9736bdafb9ed610b9b1b3ba0ed29bb2a968946556a248db07d1255bc36b6e76a0bffcc9a3a40f92b2aaab2efcb09dfe8a9a457465e785b7d0572870f86dcb1610de776501e9d5098ce7263883c366ac2ad68be4f6794fabbec8bdeac9aeb4d60764590cef85f801d9cb642835fe6eab6ad76b016d098b7f1a3d087e68f1fa9f1e19bc2c58b5c0d304b2563b03d19ccc9c63cac1513ef7582e4a650271d1d06a3e4814649777bcfce3e9c91c1b7cbc712d4af586c51584b81f299217299effbfc16cda615a1169255155d798725c1d87b3a047fd63ab9a1ffe4de21ad10e5d180163d5134e81ae26f392282972e4473ef546c45006501bdddb2a9e786a2ea28860e15f6a851b34ca9c1865ebe0e11149094816e3fba61a0e375165df4b94f866a5691129607c99de22a16f2b983f38b58ca0a3cc82e5e88e61612238485f8d73cce9548b62650e07fd0d2af0109de0bb7fd6984395bdc22e59d06817ced2423b2a06dd418b34e1c9061a0b441d04cd75466bbecf87b19f2f3adc3b87246b97c404e7db63541b773ec8619f12443a91fc2eb23bd8193e3066c91ac068d3d9994f2d120aef7b2a3729460715e8b76b10df4e2879ad534aca3408aee414dc39436ba6eef86f6bfe990be28f44e9634ffa9b43d7b82b6a2c00758584b71a99dcf9e98b0838b072e30b08969a2558c41b40fc8b6ed57ff3d12d1e16c4764fdd94463cff2537b3931b37461035ed053b4af1e717fe7a42671f21cd78b5e72069f008f8e45ce60dce6e96022847cb9f53d7902fcbf7c5240462ed6401e5a85e80936cbbe0b2926f3ff105f3d0e441424f3eeca36d599f8ea60c45b7071e550a881bc1d9e1bba9d80406d9ace6bd7b6ef29ab5900e5a3409475ef39497ab92fa654bbcab549c1b49d0d8711392bebe333fedb59955285e6a18a6c4f6bda5175204f8e22d00fcc572772c0eb28175e8105a3958e2815cf53bbd7d9abff4eaad7fa269a6755bcc0d34321b35265e062abc1dce515323a7870cc95f522380edb44cee8c9f9c0ef153b37a0b7eb9ad1a17b04959a67d4dbad0d3d208892d82341e7ca34d7cab7177690f4b6fa5ae70c439da6801b6e84d98d8d3dbefbcde8ae30f165e27c617cd34e7f7bfb4538e04db14ca32b14ee7413b81d8045aa9df1b6a0d1338949d3c8ec2e7fccacb583f0e0db4eba740252774a95c544ea4e604418d3cbf8543fbd5a9487a63ca06c1e2a7df052f0ec22662a1683e46163ba53baf2d4264543e8099f8e5178c89216c2588564f06ba6cbf080e2cec2f60e26c1827926c3e260cd382ee48d7770de08925e90b34be232e9c2cf429859a4a6833cf6ff9117e7e21d9fee0d950c1d03daa5ca9b82c86261b580c30a8285b3a3e208fb20a0bf8015b4db3d61dd29c50f6431678c95a35ecbc0e712e035e6b809aa77f2a48323a420fc6c853d27391d34edfc0f8fc3ee75a52c5e7a5164bf2546cdfce8ecc3c5cb589e17018c684e9ce16415beedc2a5a64c1c108ab9e2289034bc343bcd8f0e702d6266313ac15e5d5a2c57a3cdb7e36da3cd25a31b8e4a6449ce29a355ae197418fd2eb55c25a5f1bddf7c76f29c1ff79422d8ec1105a18e35f7ef33e7dfff5fa1b208e284031178fcfa2434463988492ff09686b442c95293860a0e2134e87ff739858a8812abc9084c4565d867ef34cfb8ac1ca1de71d2724889cb3f8c748ad38d1860ec1ee2bc5592acdf91eead99e670528efaf7f57f8eeb80f2d56c8741d36b6ff640bccb91e12d2f3878b10807a030e95898fa166329206fe6f4512b6d83a9eb2ab8bf5423cd44b1a2f1d828768c49f8e85055f2f494c9e5bd12d7ad2d81babdd69cb46ec4f7c3bee225c430d4690bb5e03ad7179f70a923f515128e0d4177e691a17046f596ee4d364b43af4d6dd223442af870025110a0885bc464a94cee1d7192fbbc5287535dc837119bd658a29d820a92a34b23e9838c172fb0e2b1b22dba4e6abf44f221fb1e1ccc9805b56a1bc70cd8fb924b38acfedffed2389f6638840a0e65ab82d2dc42402ebefa9292fb62525805bfba080fcb9ad6a8496cace3066505bdfdd5b71c0558c2e3d85690bc85c284889ab63522f4e8854fbe7c932613174f904c57dee9e55ded1ea814475aa3076b797370b5c89db53b0484bf49693176e1eb09b7a8509ec66336873ed8c0d8af0925ba6dba7f7dd5ecd495c8dd31ef21079a567e57fced75708284db8a6a9fa9a65bd988ae140faebe37945b6a5e595f849709007af8beac14def89a6ad22e1f7a6594bdfec404937b926ab5b7549ba0b371d3ce085909a6ce428300cc530bf163595b170c1355801214b791b40c2ee0a74800d236ccb62d0712eb1419892683b19a59c989c86a0f9dce9667b723f04a25f893abb576b2055e9cf02f2ef3ed0dec05a8c501712777a86ecd651660e854a6823552f1d5a321a84aeea62865781736a1df30641d5a971598dafcc50b8cf6155ad1f716eb2a4a73ed17761f9024a2ec00818e26be8eee9bc9d90fcd94e4526efe6f88ab4b185032bb8c597d73ea252b5b549674c4101fefe66631276a005f37b392e3d2a113e36b177c3c50ca2ef6d317622367f9661a2b55f852ce918feb7cd4c76e4ab5c3954e28859f9a26b382f983cfcb21405774d38393c3886375a36e966fb9e25c34a34625d25412fea752f31db6403c3cd53bc42d5ae3b54ae7df9a6997d3cbdbfd3593ba2c5d5ddf06ee3b65a87dbc0c8dba6315632467302867957705f96e147182c53361f961f5cca8e66ea87ad4a4c1a1c8d9324bb5a7db453ef74461090e4df74178c00b4ff839ddf37f9965dba7e9c69bb34fdd4cb88c3ccefa65c481d652675075744047b1635266c39c7facb1f982faa4182a2fcf37aedd19ddb03e488359679cc0cb58cfe424d0cf3871568cd62ebf89aff7dd8738941683d0e133ae2bc8b9a7ae540626711e8445ac2f0e2d6a57069a999554251c99335b69d49ae1a3dd21b42c9abf78342c0bb8f955e016aeab625ae5d6699aba6ed899ec3f84f87bed8d5e52f3d1503991a12e291828214b87ff0db0779076be979c9222cdf8a71acc98278f28d2b179249f3c6c95221e2c5dd16112fd6c39bf7235b58264d03072653fcabe1dee23c5e2c5adbf1612ed558486b526404757911b1f1b088cd5ece1f416ab5071f0bcc72fdfaabb850f10e8dcc99be937a5a00220900a1f6744246086bba8b9c111db335d13b56b9a4e6c8b9c70321b3669695788437a46e540204130d55173593e6adf19f2bd24eb326239747bd64b8d3809dc90f12c47559901da4fb45ab0937a561fedf8fc09554e382633c1f1c3ebe7511dda63b0b7eed3175e59b81a7367cd043330fd44e47e6f6b283d641a21bd12e8581cfdf36f8fb30a31647e479846308ec6d93b3420e69bed445a28ec779e9178788e7c52a2e0e5bbee195b5c185747073768e9a54596f3643c0bb2389747a66a8f7fd1fb0c4fdab194712e5df8902ad5027462923e29b8ad980d694a694a375560b293f9b67c6f92b6f1d7b2b63f44e4b9254838eff0ddaacf844bad119b443d5838adca974278a3b692fdb0c5274da034864c4cbddfba1062b30eaa7446fcfce100c83e9db0b14b5a378af88779eda31697777b8198c5539504b29ec373feff33161ed54eb9cafcf6f2e4ff3efd2e47593b59bf120493536fe0ce9a565d5339b5501839d425914cf8490cefd4b7497a52983eec35a80cb1ef01a9c2b94298b46bd24137dea0569e6e18ac065ecd8db634a34924e593e0f7b45316ea9b08d280ea311dd019eadccad32e215733cc7abc6aa3d0a8db78e48db11fef28cdc7db7459efcdce2382f8f9409d13bd6c32462003fdc1d4fc636f5ea671d7331a8dc1127772aaff9748ca97da07bc8bb2f935544cc3059679f98f4af811b4364c737da8973e3ccc9b3ebc588101dea088545ae2c9f048149cad6df1849f52fc622a7ba08888818f3b7b2b1eb5150435fbb595ad2a0eca1dbef3ca90dd4fbe72f2fdeb51672d7b48e58065dbf630e53b1cb28c161db3638b55d1d8b44c30728fb06f153ad34ee8c7f84319dde3e57e6e58006d84632d79d1ba34ebec0efa52e4d4611bca0a103a3041c63fe193b86d7af526c738537d7dc056b34e98b45bb869baef638d419fd40743f36428e94135b8db532931db00cbb375f25fa402dc9115bbf1953866a835e6bf8a5e7fb0a36e605ca5642c611902a78fc9ee09b6875fb7b6ab89c9bf045c864c8e8310e2f7121d2a64a761eb62f3263c4c1e731d2235c509faba387478127f8e500eb25a31bfddcceef5c3f8ffd5e3a8f1e0a3bae13bc8d78627256b966a5f7db38046655ba8e0a3cb7818f02eb713da9bc04c295bff164800969ab67994c59a1e057e55328ad1cd1a6b6e978bff9d7b5ce59369812fafa7de79c649ccc1c0c1ce2cefce5aa0274fe301ee9b9c4a902678cc2ea5fa05172cc26dd0874e39b5ff2e3101c2fbc34874c4e97a568ccfbbbdd19d0e28823a7c9c1106b5a4f485c556fdaa3059d6d2d5509df3f903fc8f73a60809c55321795fd234c9c58db9a96542fed0e628c7a652c58ec50773c1dd0540e8693a310d4abdd712a9e473567c13ce0aa0d384acd011f844a871390a806ff3c88d7cc06008aa47082ee2e80a603c8962f6c782f4dd0def864dc1a8b8ace35f385baba3041dbe3b9984a4420c93e1b1c68e64a52206715a2e893ada945e279a8b76e4d1579b366993e744e602b193f8d96222acae3748a2f2e5cf91fe0c7a7624617e104ba756d8610c32d3a80ecc5b60564166da84fb754f225a6c9b9726b47bfa4bffb79d3b384f28649341acfabbd0f29f9d508af053f13264b8c55e576fa17c43ab1cc6fc103d3fababb45c16292de0645650a3866309a23453a75f01b63e3dd348ac62ec0b1785ef4dc34c297e249137b8071b371a551337618027e932066133b3f79de988b1636ad2f89827ba58fb3fcf189626b61df423ea4daf2db4cf92933fb4baa46d91e179a373370150f3fc80c985b6d000aff867b2724144a56a530cbffe861c9933bcd1d4458fb559d42d1e2cc82a27fcf99582c781b090661ba276e60ab969e0a8ffcdfeb8f99d6ef1dc7c33d4b9e33d31ae38ac4c08bf82e88a527c642d91e74a4f202af84c3c56c2fb21cad29ce6bc1d309afb108db04900d9aa162dd0055ada7c11481cdad9d2f27853eeb891667d3baa6d8431874c595e9c3aadeb1d6d6abb7930785601be6c621b3cdb6d94ef085c47265d6f5457206dbecf74d231eda062d0ff3cb3b6b4ec1ee1c7b5ba7895e5203f530deffc7ebfd0fb7728a8f25a736d55192e1a1b71e6c70b648a36543d3acd29b1b4a497d0c1265e6ebfe2b698877a56200be174485b0a9208459d3bf25626b0126386a1b824293df9159c3d8eff02cdd3c54ad2f0bab776182fdc00dffd4d452f886217aeb8d7c996c5a750837d9678a6704fae09960d4b1744a6be008ef35d167cf28aa674ccdb507e9abb2a16bc7bde789da960817283d76d1e198bf6a85150a33a8aa96fab8107798fb7ebeac458a3579fd6a7c78a8317f67a28b1adb39ee9983406fbcfb886362f9c718ec87b7d740676a5109f9ad5d83e9193270a331250f21ecd20b57a2ec09e3bccb0bf13a49b5691d2bacf03dcb9026f6e8f021fc1848cb31ec20c4884508db9075b14aa67b1f4ab14f8c8ea98ba28a03ae24947bf263b2db7be4914e5e0b0566602487699b8c032dd40b149e7d129da985619922ff8c4f3835823365d053b400022c6be3de9ad9e602081f6d187f52144946acedf3d0351543cc4534457acea6cd8bea397691fa4a79e03205bd984e8692c6328cada67133a2c03b435eda1ef17bde08f4b85c93fabb85452318a7d4cf9b1689be47abd159525ffbcf3419ca94a2bdb6dc788d6064e2ae2e5f2a93f9d180f6e8480f93d14190d2db54c852ca130f9f629aaf1ee299945698f6065df1ea4ba667518f8e84d482d8a5fe1c0cbf0e48c2a4b65c656ff2abc00287779235280c370df3fb0690c216ed1b1b7d6104dd9698c46950b4a442f49fa2383b2d3b93286019d11a0cc258cbc448e10a5e161e574c7dd8963a821b874ee29db645bd7c72c8480b6406eb60cce30871cf4944a4fe69a5706cbc51d3de3e28cb4059a1b17fac3e945115f73fc257e999542c2c18574354f528369cee2ba0632c7f26921b30ba2b641d42b3932fa854c6e81e7c5d439cd264e8d87f40f34bcaf2ec8bae678fb852d32a7b4d35abd94cfa6efa49bfd88be3dd4a14f96cad5e1b52069621e40d942e02d3867e387777104b65fb507997fc3e0dfb281308904beef1370f178dbbedaf87b3122b83800fca67c18c9b7d0eed45d6ae9c363194e31f071246e6bcc6d649af881d56ab244043a56a93805c22c3594fa176e7c220e4b267b80ca27562066a0fecb0ed8713bbdcc7140d182e551de1566d4d241d95d39c986cbbd9c90b778297e281202bd9e04be69f46f409980036dec791a155fb2882ae277cb30541d1aadd02c7ad7c082fda1e9a08ebae7b1c1eb356f598c4b43dbad6e356d9b4bfa5d150309e17264e43b98b07fa3e31cb93acff0ca72a042f27729870a4f67bef0ecb002db60cd9863ecf816ca626530cebf5c2904ee1c37aba2dd69f05442f560343e32bd5f105d424de9a890c9380f2db928dca010f4e26befdd4bd6b6326060651156d06115246320edc93130db1930f954d24efb8a606773bd1193cff6f361dab330f0b69e76af470019d8719bf6f759df951cd47356e417eb159feb9b2b712ffe1b83489a4b4fec55e3cb02d43c21e14fe7980280cfc84d86c466a8b910f46d632a1e9fcb7ec3adc9b56957c594059d94f13d380a5c5c2618da009bd58ebfdd4b3cfc63f4371983483cef4db6080eac0ff0a466239ec2b46456a018ac104b829a885472231f7bcb14394059f253cf07f6aa79c17f5e4ca9b7ed439939d368f253bb0f52980e41be651a0af405c2927afa48121b0b5fc52e76db42de1ae00cb1dc83aa6dbd00036cc008255e96436e989b40946cde8827fcba5ca4625f76f2d9e2161121e90bda053b0d9112ab6fe02c722e4839ce5794e196fc077acffb60d2f9f2a22485ae47d9ea8338d332250c88af3c586e72a8fab9e67b4fb2d3ee9e53b17baf44b39c3135cec619b2805866850fda7bb8630bee5d28f5280b62265a2f2905f7e44b7d658bd6a5389d358f4a625e0b455484a8d9a8b20f132bc9726cf3c559570591f51f02bb543333b7699f075b36c1c1cef48e0887a8e5445360fd6fde1c1cd75e00b204031cdcdbc96f9704d029048b60823ec78b28f5baf5fe0e01d36bf11c89ee0dea1b0ae85182b3e44e4e80593e49e4892853578324e62f622f460a7c028885dbe5995273e7608378e86d4d8cff4c9df18710e8a583581ba5b315e87ff82e72f70d7c550efe7abd7bb696abf6d551027f77ae76a17f0532e20a022ea500ef9b20c93e6d84dd4da2a1f6d33e83aec2d0bc42f23459de161ffebb2612eff15ba5dc0ee4ba77f2f6c9b1ad4191320079e65fe00c9b49003bf78747cf32f3b368fc180c94db1a661b8420ff45ab9540b140879ca83e960e427baaba2fbe2233f451144c8acf159782abca82a7b5bf88342cd264061b907c3db622c1aa1c30b3d4b130d3621ece4cfcd062fc1ec8dd98030b5e7fb00294e3b2e12749c4f2848d8c0c4a1fa406a80d83d644878a55984c9220a6a6773e02c331f402a9bcc83481ce9bfdb455f66f3abe117f24ec9e04d0647fc991e8dfa34571006fc513aa8edd14f75d4ae61218845810a9cc7d9aab3faaf8c5582530a08ad7f48cac984a6c48ccc36fbd4f95ff1e9731e315aebf39def68691f8fea18ecd2b334c1594e7b7d0c9d928b863207ca64bdf446c7f3ea612f108227f016ce6f3b846728303359c1e60ece35c34d6120f06e9a599371f324a54d226eded849e9b549be13d5bb427b4e7f23f76b255d7aadaa43190eeaea2185689b669ccf7506b56d2ea77cce883505f0463de620dbcee3cf0cbef8ed9a6faaf10893fb4f7ec03a03adaab5946da7b22874cf1056b6f38baacac9628199ae5648bd1bc31c752bfc66104701d9ef27e438ba09c80b4fb09ce7e9ea01e10511675db0cd3e21ef84616c2afb156edb6e7c0694bd01ce28cb66b084b547c4b216f85fcc76655e29d148eb6b622418eadde5fbf33a82561f2f96af84d58ba314f5dc6e98658142cc36c680bedbed426131e578758382e2d7666d85911db06ce4bc491526e154a31d6a0fe864a9c22ac441c79be317a99827c7b78bda1710440e7a3d3bd7b47d3ac0468b233f4ed62163a18abcd600fd5290376c809af9e018aa9361f6b5c81c9bcb3bc35a7eb5acf85d7864042d533ceb12dea0a41c0753d94d264e74a3c2a1996b9561950e988c6c8d99bb359dc5f93af4af2e73e6eb192fef45cb100bf0a9bffa3b20bcf2bb1afd4db79f49694b740a2b4ce2eabd14885e50c6ba9bc92170eafcc34c089b4dc1e5bb7b7e483360e173ffce138274dac725072a46c12987409967a25e178db3565a74ff80c29f5b69c300761e5a968a8b6e5aaa67904b60537519d9f47417792d00c0b8e315774319357739e480586e9f84f1a5f74f787271fbbf60c67385e12d5dcb0dc41472cae0e838298e6fca02879047422a9c32bc673bf045f51e1b796474d3fafcce52214dd888c174d19966ffdb428cfcbe46170c32acc0fc17e4837e1be3ef07020aece80647e0219190ca3ee28b92464c083dff52d5792dac7f5391c5fcfcde2773a51a72f8ccab1bdf05134351570249485ffa9088151bd6e2b643883ff6dbfd4686e0609eeeeab4de0fd1d3ab81e6759a2a034f26d84921851d5aa6f51c670816cb37bc68cd0fef91a2c561804963d9e02550562a5c91476a3803f97c5ac19d3c837929592b7d3d8815b5097b34d61106d90d16c352af50d9bcfad1727bc98e5a016083599787156cf423311907360e74f26452e08b21119f90b31a8ca0dbcb9d148d9a579d0e120e2ad64746041b4c7b608bae71763f00209810dd68a6f5da019a20a2e7262009ab345c00093a57aa34d2838442f5d89ba95d516afb6b1c7e34cb806c9f529c75df18bab829623bc4e7acecf0a344f0ab373f7214dcd1ddf0814d457930265d85fb3445558706e202143986994ddce6fc5976fe5b81ab2ab29bb20f9a2576f25199bd00ab351efdfd8255709bd5c29ea04df6544e34fcf8b403b2a8979c5192bf4fc766e0af36864188944201e4a690b941226f2685f9d21186859d6507914d6a5baea429d7674c5c0b15b92d050a0dc7f2bfb3baaf89ff09172c22a2bc43853d3686b53aaac6b06f34f3e8caed3b6cd598e609fb18b63d1a3ba6d6c44a81a97e7e20236fb2e6cd7a744c541ad0491098e7f13479763a3cfd45189f672c41dc1c501ecaf3da0ff13840f87051a53c9ceb8578a3e760ec5e75c12b58518c502a9fdddcbfb2b4b84bdfdf180d57546333168b3850d01a9402f26d728d00739f7cc6232a6bec0b8d649a0a43dc0115803659785dc39683895fb5a7bce173159a3b826aff8a974d0ef2a0efde51becb80752060cb26c386f63b856c06c272bf64dfdde359e20516ceb8613d473e731617f23d19567d2f4e508dcb5e7bb9d6ffafb4db686ce98a90fed06dbd81e45a8e819be7ccc8ff0d48370e735c97f081a93509e8ac737c828470bca2115c1f60761ae4da6fe53da19a7dcb8eb56b1bf2b16d72f170b2a3af6329aa605848da34515479d1d49242d63d612b6aa25db65f54080bd458ff017e5f9c27f34ef9d613627df9a8e121762e3b636b349aa81a98288f1495302a580ddadac56c2ee6bffda996ae5e339d02fdbafe1c567315a94375d77337f7881a998e01cd9d7895e6fc0867190640d475552bbdff00797b10971b2184182d2bc38b7babd6d18ce0f842000b06b5ae259e31dcaee41814a02e622da12472f2e38c80dcefa7f9913202b4259fe5ffb0d600a119822e4bdc36ad36c41a06a3beb271339c0cabdae341d51275e28d26f69d757803540e5889b54a5d39857416952593d5c3edd63dea42959f7e42ff9a0469ef5f0a328dd987c9ca49fb3ddc5340f6a63883c5223041bb79af2341b87dfc7fb67b36b2bcb18dc3c3428b03fefb3c14e8d4bd140ddb6dd64f41ba0579f4c14439cb72a04225086c4f01e1e677e7f9e7b7c39c9cbb71f59e3a7d587c1033b9839ad02974d33ef461858b1b664fe7c6671b33ee7c38f1bc75967d5dc1b22785d3707b8fbdbccf7a4c8a1eef0633f426f003dcde54446768060e1b1e6e28d92f0d34819d46ac6262d879434a3ec9205c95c74ef8039e6467369a4a0f791439c7d84a9c0ccc27eaa73ecdc1ec9413c5b606f35271f5574a2a05512b1d8624740c4c86be1ea181d7b4a66fcedb05f57c1f5ff21f4ff2b4de6652779138488c9d552c963d77d2d4a40bee30f8327d45fda46715ffe7e8d7168f96f36b45091b4fb878e68272d111fc44b0c8d25fbc7241d3a435f28cc127b4a39c52df1d48cbbe4d3461b0c2fbc3c13937d19245673d1d2115a84336ad09c80ecff096a7324667dae70a6299e787957b33456a6778176e32d1731892352d1cccdc8636a744da662878a3291dbce1e0f7ff9ec62275ce2c0405fad80ee98b84a9e5a63a1e12ad3447687134f9b66c0ae5c867c5869c5c8a911f6e9eb4e60af96414cbaf4c4b1229ec0a8baa967a0914655b070fac702824df0fccbd4c251b09ca64f888b7401df738bb16299076de363aaf773c03ef153fece3c917856f34dac54bcd833423eed15ccdab912a5ee3be7ff8b489860bda31ef3bb84a31e81bb8390ac541e49b6db70f718a3d24bf2f0be2e0e08fed062673e1c20b7c98b9176d0e306cb8ea2c43994de081f0a6123fc9b59ebfc7ba92a4f1c3873a352f984cfe9de1ab2f5138cfdb6b3df6b622ebc6042fc5b952cb73942bb70b32fcaf42027016a5683200b7c3c1ca7cd85d7d8569aed0eee85b1759b20c6807732f8e609fb1d41ef99839650fde5ed4d8757785a4227dce159c3a25728c9d986a007fe2b013ace93a49bfc752d6d8fd5732cc2b871d7abe4c8e0e77c1479c0d3a0a2dd47764a215e8446069b347741ea350276d331bef2db1b2213c94fa4b2383318aeb863650ec6644e42e565f77d89ceeebb464150d6480e5f23ed5c4d41610c90873f5698e450230046c42ca3c52ec51f4fb8868b0fd7e33e63c224034f5ef64cda56d23dcac48c813656e82266190f16a9d9e7284ac076f5ccaa6603d324dfb69ae6b1c62695d1fd0a952a177b412a2563d68931d7474453718884b4897812bbdfbf0bf370c1271e0fdfdb0830d452b5201cc22d7b4317f515f01a80ea9e3453316f63c1a4ee110935bd4fc1146e2e7f71040552fbc0a357895ce9644c5db28718903032f5d4f5e47963614f414a404b570e6ef74e4c3d8b28822d524f8fa7144c0f768631d7192ea5068ad0d45cf6bd7b89170932aba90ad9ece84c471a5dcc7afdbbee5f692138597dc0f34b6c4bbd79327a1225501eb256729952415e5b3dc2745eb00e5a572983116f6292d73d13ed726bde0dc010c310cc0da6753dfea3c08d3dfe9a4ed3094a770c328606d603b312e2d2893fadfd11009fe51befd2c4e3cf38c47b0b8e61919859397f4c272136241d4d15c2dde923fb6d868620e70522adadc9173e54f6ebf1824d7aa0ccaea10061f6ba65d2a9fe96ee532986714ea57f12b3c2c91bfcdb1992afaf844e74858613b0a05995ba8fffaff79c3dd0771bdb9517f395b72b4b6b4830ec517bf61df490fd05efb145e04f164040094fd1bf3b98bbdf5e3a27d8ed4e51e68cbf170bf387809648cab6a5775b4231e860235d3179eb788818c567db9d55c9c22d1ea9b6cd71c713440e8514802147ccbe5e774763685acc80da668566a6cff95b02bf1f6b2e0a29d73b4240d7b6fd534a6982e749d347578608f2b8d4ce612031418b02e483512e4d43c2c3e68585c939e8184654d8e7275f2ddca485a2453db959e9e601b547fe17a9dd696fe54d9330cbe6653dd83d2a22b0f2d5dba836177f2168fe6a78993452fcaaeaae195c6f4c0385a7d69c119f87fe5951fd012af20d9ff177a7c46a45851052e3bd6da53f6adb15b0055f6beead242ce4bf9cbb584bbc1cc2fa2baa37ac40102b5fbd7b7d9089bfa882feb6fad6846539c9d99ba51701c1eadff3cf92b9a29e0aa973bc89617952b92354492972257732fcb6f902adaa21c2e7d561bb6cf377e458f7c9a0f1d390a77bc49cbb8713634b91535db7fda140e6c612febca02689b1d0f612f7da7b743d42a8eca5b2427b3960283a842871b1e33d12b589e223ef1c5ea2e43683c6d1eb561cc5ec2043d1b2ffb5918c2845e2e91a6dbbf61fec90435251f9c25898519ff6ac5538b08783b89691575039b501cc8b0b2b0c0ce583282d41d7bdd20da3bcbb237c0e73a05018d2fd73b933cf72efbe858400994434f4be1dc4def45d54948d72cbf23f88ff39cd2b44468e10ee97882409b5a8ca09434bb010282c1c98daa1e9b18508cc1270be2bc12eff2854373900d8d4002ac514c01c55a75a7d4885044faf8e72d732094a70da564e3304a951a95d952560603b8509ee5e98a7c214efc0918204f71eb09fb5abf3f3ef9b7a9073e65d02f2fbe27eca1ee70717b6ded49a392b8cbe326cc0c8c4b61fde2f8ffce5a5344d641bb736b5cd9846c52aa03f98211905837dd59ba3433a1c28915dc9af5997e37c33b43499d24322e0912b80214d2467d0cd72c80f87c42d33bee58d695a60a08831f0499725ad63437699eff7ac411f02274401737991abd5b61c114319747a2bc4aeaf0cd673078839d79441f5eecf5c53784f0ebadec96651f5a3df560d6de2793ce4c44b620c61835b498ed24f44cf190d0995d27c87ba8a42ae671345c58a94ef4deb98fe2a05c7b17a8184bef843f0b3ecc156dc097f42432e40f66e68facd2b44fc9f2d140f5bc0cad8ae66122448bbfa5dc6e3f568ecf10c31d94a2ec079a1f179c960b56250c29fb434ce7eb70caa6553f5e339f9ff35c98484166bb0f460b195ca27560cb549813e3296a48a736d6d8c55feed4f6e7976543859883cc02cbab1bfb508929f2dd168b9606345231da46f9c2f9d91a56ef6c2579e888d28cd5b4044d226f9d94323e71ea5753c02a89b8b9e2c3dade5bbf702e7a7c8b6d280cc09336cfaeef393f4d945a5a9571c27f080d9ae0310ff3e82c1bf5a305efe181149f5c5c8a01a5aee8d2fdf1d9b136a73f1377252fbc6e57a408e16c7fad83975760b21956e9462917b1ac69f9eaf17f12a431dc46aa979a2a436d0b6066bafdd816593cc3ddc32238adb7a5efb4b8ce00076e1b54971b6ab383195ff1e61faca2905905fe0332415472607389a72e8e709fb8f2eafdcabacf385775f5662af6c6be351c811a149045f23c38ee028d27851e1489005bb725bf7ac71265efbffc7564341ad64d82f8d5e766cf2cb84522d19517499fbd75c8532d7e2aa6b5dc7e0c7482916aeb34f8550a0c584de4a32a538bbf7f7319a98d946cd94ee494c26dc2f85a082fe0716fc545edb8a13ef32c4235ce3d1fd85b3edd374d12d1ba5f764043583becf8e1770d6b3084d01fd84aa747ae5d2fcbbe5b9cdbef785a14544736d34fb2885c1f9d89060175a74b0d5891d6ca908a21558409fdbcd660f6807db6774839193dfc9854618582b6b47ce1177b1dc9df487c9ceedb1484dde3318568d17cd7bbe4cbc128a51db665b7d588bf7e8cf0746410ab68d8db70438d46e99d2dadea290b2df5f28109a39128933961e6bddd0d5645b14f500976d4f79464b6facd6a98fae0249595a49d567aec9f0cbd47d0155e16508e3716db975b8dad74f7e74eb02c62f85163e55414806117f1da41acc2fd5160fd4e295e41f3c5b28e4c64f224c70f50aad5faa310b442b545b3d1b959cdc70ecc45f20a3cd09a04ca148deda15db69078b8954163fbd8277841abb216d4b381bdffed9182d10be71d01e37d8e211ab1124d40c392992f9383209aa6c06ff667e7af7313736d8b885642308ccc5b56cd93078731165081d9a6e633065982d7b19cdba76e9702094f9a5cec48edd583db90efdc232c017882d5a4bbd513bc6552a483169fdd40bd0214caa80c30615078d669f5f54af9bf126ccbe000c46ebd8875c515a4d56c844ac63aed8fca833dbb32e179a4722fc2da0249eefca8454600d3aca155422f8ec10cfedf4535e95fb71fce6dcd03a201c63d381181b1c912c80c4d7c0fd214d1981f80d3ffb44058e60b8757b17daa807a901cfdb0e7e201023b887ae1ee58bc369b866dc187025962a62be1466034708bdb1f1fbc2121700e979350eab738d6b2ee12145f1d82cf3db827e70e314c48fb0fc94e76c991419f113d4dd9672e1dda767de9923af94f8addb9129547827815f08fa8ad9dd181ea154790aee5fd8f615d55253085677790ed61496c7fee17deb69fe10f90e51d52207a032a441da9396e5a24ff019d169a7d7a0be0caf073eead60d75420d62635daf4d79f798db589033a770e00e3ecb924073fd6fd25750eebe9ae0ae7a72f4086345053c53a7099942d646def1ab27fbe971471edd1ebef96983cf1b0acdeeb50a07ce57c1c997eeac89c382cc371bfd45519650f96573ba8c662bfea6e3fe5af218ba226ca632b1a0223da1ab0442426c6f48b08aad38ab25edad6ab90c0c86f17537c1fb35b703af27ee0b6ee668992459e938a3eba04d507b34a407a578c465a968bbdced9887ebfebd5cb365830a8ad4490decbca7192ae86b06af53ad831ecfbc8660d1dffa1de0c3da6b4c54324614d832a2dc9473546ee0e9ebcf0e4055672282ef0d33f0b428966ed11f05159ccd4cf094cdefda9960dabc4e7a59b80d3754fb624745d80ae8f1ff019d5bcdf21bae67c72dd38516106e40140014b46645e4b6d406c252b97b38b8d4f66510a9a8f4d45545bfe15cdc5dea2de8d6326fa0f515bfc104f59ee4c208cdde9bd9f59756647725c8b25ef31267e301b50df7838566c5a0ecb4aa529f85ea54fded55d1948fce86e59ed0929d606283858a2018be13f4dff9661c5240a41ec3dc6a07a0b04ccb8d4ea821d470fc6a7ae1fd5ac7a942a8565b3d8ffd0a5c6395371d092187227006895e67f4c20e65c1f058736a20725100e2986cd02b3f0a8729f7faf87719111bb8e11e665ceb2acf8fd1cd7a2462d85a9cd1369a0147ced07d039274bf12c4b31ca5eafdf326d31be4e875a324081ad94449431b7ef992b8ed3f571108384fae133f256ac63fd536636ffadd72a567d94b3130855611fcda10fedb450aaa73c3a4be11ebc14b6e22d8b83eb2b9f7fd332caf64e23e7f46559fe99435133c47402f0b2ec8396acfee16f7c568859bc2fd71b25bbf809c22670daa6743e2310f1659365fd655b4a4bdbb02ff09a9b3630aea91381c7611c1befdeb24226e0c09cbbd999abda235e27a7b4d458f67291a9f0fa54f17445735bb1b499f5b986d65fdfff4b3aa01c2a251d044171d61d8346df6d88243bc2987b9a85095fe01cd0fa5ae457e60e9610709fda70e290b62f5033b3d6731a111a9b37a84342a1b49f6b5ade4a3e80b21b2cd2b7d36d7c96bfba791e95df1fed684dbdcf9e72053568e7198b18f23920dc480d6435bd1d3a98d6d52bda656c2e18f6b2df1c91eb8a73175ecf913b54e1182defbeeede214b55b1c9aab5986ae2852edf278e4406ad46180efc65d29a19ca73aaa9db138fcfb6853d79c01b435e41cb23fcaeb2e883d8341033996b122d0b77281dfa39b6857b8cd1f14564531b0f6f1bc9c539ea2c168020fceeb5bd39c7544cf1a2f1a3949c20a51ada59d1671c405ac499d1f166fc818297130b95fe4198d572e209397f7caf3ee62b49f8db18e730d32f7e8df28504be08bddb1428704573ce52892112b736c9566e16a9266948a4f9dc0b80f5ec6f4f34f8e1155303db3b2f9664edc84b1b1f0c7710d8dc3192c0db01f524f4551e7ec7814c32f733b53c3f0e95ce57fd5dbcdf06136b6dee7f3c095925a7fb946b0ddd27c16214a950dc61f7f63eec24e4cfa997a39660a447a2bb6a166804168b65e58c4cb6f6419de34b9793d51fafb838967645b70c850d9d6408280394d4b9b20c2fd48db4924c451cdf77180d75d635a32d8d6a64bf913aba29e4830e3d9bbdc8d166cc381df1eca45b052f28bfd3c198ad52ec8a85f840d35607b6639b536ea37d576cde9c7719862ce50e7f8b2d4010504c5559fbc5d6dfdb2d28ffc8d92c5acd41a2d3e21e5802a3f30ee00371ae0039520900f6b67dcee0be7218e8b0727adf1d8a3f21af50b14152011ae51990be46564bc766176a2ef0fdd5ffd1aa76123f5aa411e511a442bdb46b85ee8e065430b5fcc2cfaafd5dbe0ff6b00d086782132f26605ec90ceae514f23d105032ebf8b8fe7cc368e24efaaa93ae1933d399a4da06054c618c6ec82bc4ac2852f51c91f5c554c7e04e27b458ebdcae9910e167f31ee73bb2f6b080a2a5b85aef9e145e2eb8d202e1efd8889c72b891ff7d30c0319826240ae0eeb972c1bb3447033dd6a40f61982a548a6fecda6d8a0853d25af392277c8e53b0bdcf5d669bdff781d81f71345fc1dbd92667938dbc16d4183aabd13fdced9d57a7a17d9000b17c08730fe48a6f110746ef942b6c082876bf814323c09b078bce3b22a60cf99f34891555b5b8e7bedb20901793153ae9f78dbf43df0b5398d3746a52c4323773b7547e84bd497892ec27a5274b762d72edad1bf626c9aaecbf399aa913dd3bd9b463caacd54d92676e1a6f2689fce20b1c83a317c5a955336efed4ed5bc42edc382606b6b6499ba6c16be05eda7fece65a3c7c533dd7df1536a3eea4a61fd0a61f49011b59bd0332598ad5a7eb5771fede6aec95b59b890576b18ded69b0a0054fa4baa3e2e1f1764b55aeec3d213e25c9e2fdbc908372de1209afb4f910d38700cfe9b7d06f6be405b4da36647e8a3865691f2b5bff5ef43b7e8f31333d2ecfaaf4f175340f86b73e434c41f5b8f5781bf2399ed25304d6371238654db43728e311ae967cd9babbb7e661baa6979e44be38f0e912e31fc1c0a4e15e1571cf4b8078548f4a3e9c87077125a448f26b8a21cb106d25cf6f504a91f700d1e224081b80253e841e15fa066cbe8dd2d0d79cf25384b82fd21ec475f26285f44439277a53b65eb0a2042f6a9aac4e072213445171ef1fe62e172709b44971956d6fa0b0bd5b085d0c6479937f039ec689ec6e94d94700abb3c745ecfff4cb840228af1971491a14b7da0bb00cb1c0a77f30f0f6b4ad51531f23eb88a1274f35e8b20f07a068ec8cf638b7c4788e7496e1bfa9195546ebcb2c274ddacfa2ca0c6bde242a1240a710dd8de4d750df8a5f897d9524c6adb1cdcf43c7cd78c54cda1945868058025ff4a9076b43a9fce5e94373d21b78c0a8b6ff78308954fb7e4c9e9747ed48e6df98dfa33827cead1057a3671415909c3ac4498ede351bf91a0d0a575c176bb9cba57fce8c5a48b1d9fbc9c9d3fc944e1ce6ebff76a3be93dc0e47ff9876b54cc99a3c1663a860aeb8643185c58aa3d09c2460dc1cc00324b634e874f764c190c097ada1b25222347f69374028c44fcaa741453060b337ab76918e25fb0f3ab09b7f6593f922bbd37245ef46a5c7e0ce4388397faad0c1c9d87a6c2bc3c6f01a463650c4137c70c2d35c2bb1ab12a7063c0ac2cb7b96bca038eaa2e892cb9e8f9161b9285ad3bdb14d973fd33f0676cc440ce0047e6665009cf0a1d04a2e09efbd7f6b4cded624583b38bc52a65d865cf75e3344e85a1c93ac96dfa1b1d98264140acaf0cbab3726e0e236f57d2967857d5a619ac22c50e41d4a31da364e26f8971087a9581ac416c18d82bc01dbbc6d48780bb2dc0608c7279a24a1fde135a671bd77e2692a5119e82a1129053281e8255fd5a8308ad40256cbcd4206f48adb8c596ce796db2100c3aec4892144f0d3dd975a64971bad1d6c8e4c6389d9d6e030079e85f8480fa4fe5b9290eebbd9a73227fd9c8afc843c6894989184c6c4d0d09855a8d1fae75acb8472f4c375957e657c622863ade501a750aa8847c34bde0a2e35c61c19e8f89603667c511d378d226c02c329abe54c81d82dc3faf1d6b2f155fc45c4b875f6ac217d9b6870941086547548d35cb67bd0a4d5fdecacf0bdb3756a7d8fe706e3e0411da69e68233518a9bd8668903b2c6c349820db4a225a980365b315c13a89454d5ef70d0396a63fd20d869c782f4abee9395b8c4c36e5c66e2c7a718d0fc0592cca5469c031fad73a9f01b407cfc34e38f86e4b8218c17bc7f44830b887f74f6a8e26f453548a0ad06ce6a95a6fa3544f753fcc1aa1a9cd48963ecf7d0a872dd3238958f5696556fbca386f04d1bf71bc240a0dc554b4fb5f23ef32de0c61786e684910b5b21e4f879b2dd69ac12dcb09f3317f85580608ecedd0aaea1e2183f40c3d3905e225f02b3c7e9b398ad9eee708e32398fa835ebf2dd737b1da0bd617a5dbadc63c1f66618abe0d05d5ac0849569221a3bef12b02e4bd73c482e131e16eb40f4bd7f0467e3b9a32546b809c3a5fbe54769a836d96aefc4cfb4e07d80272d7956b239ecd5159d609d9b58359fc35fbd28c3b4542187683550e5e87d8d5fc8b9281c4a4b3ba9106ccf0e6a233f5d9d6a965da547689f92c02019977fdc8de4a89eb1755d498ca70834959f75056347367e35f46fdde3b1695e7a8ab31edeb4c43f6b1f77e270ac9b8e0439fe5f2623a185b2f3b48744354c8a9052aa0c4369e3d42054865e57aa7a77fa16ae3638ac072a1dd0b8363b77e8bd9c48e690e19b6c53c191484809bdc2baf7acf4f961e53adfc98560a0d3cf7989948e7f09ec7f6bd9c040ac761b7ea661be8fb4feea7a53dfb149155d6ed3960337b6decab6ccb33af294b4b40fe07e5571338cc11939653e16c33821ecda713a89eb2adb67210f0342a15e67b28fe1d228ffd803478d1de4b0721e16a05696d81b11c2de711c19ecd6821eb726b2fda1679818d9a3a6f97902f2048a7e0db328b0633a80f583e73f04fb2a7453a83d9d194fad5cb110e4a703f75ef2eedeb1aae3b6c636d75c77d869dfbf645b50496299330d238ddfd6cfba3d9b6ccb00af5c418bc4c42506eeb14be622e3f44719a2eec64037aeda8c1c2621622e3c7b6b150b84426b0a27f81b157da12b9f46a34c360564e3713d7ee3c4e8043ba3195a1f716cc44c1d0e4044d8821c4eb09ba09780eca850b11c5f379b7173e7ff7d97891f4279a1433ca28fe220200d6264d97f6cc6f25bedb46858cb4c7370dd26d60eb0367367a5656b56e2bf01879522058048c2173ab801a92d378511b9066265512fcf2b7924c3f8fd45cb18fa823e2af80776fdb6871b9a7facedf6147bb41f51f6d193e648bbd1b832887452bfa24662c59523e44f32e60dd3f48f14f66492403fd37823865fc633e855249569443b20039c32fa6b0eb280f6ccbe3ee8ef643900d436c96058f31c8258ea0a4a81be303289daaa4e4f22221cb885aebeddd67b19fbd1557529d840ef47a712a2da8043c30e10a70acbbb5f11eafa7ebe616d9d7a2ecfca7cfeb066e766050fb16e645bc945289a3ddd636cf66f65a3c9d7cc43cea724848322197914bfe187f8b12819bb8691c7ea6e09f8e40a5f5b8e63b77d04d44b39e8739b883ccc2ffbb25ffbe13880a6254b9425cfbf1045375cc947e55304e2b5cdc05d153dbaa9fa4c790de694c0c4cead3efd6ad78cd0d492244b401e94feaa7fb1dedc32b271e42edb48a5c68575f54aab818fe3d970d04f4995957ae3e5f527f659909cb424396bbb3223a6d7a78123ba44aad2abd3ec040ae57bd4d338ff9c6007c16ba84b4782c6f2fc700a0664a0ea952b5eab5673cdb6a5b84261738d9768b2a7f81031ef0aafca492bbd6112ac45184819f8f66fc5e79ecc688e44f4d94a21851b409f5f80bef6c93be0a84815f8c4e459d590b8fa96f231b0b69e8e815b7fbc6a4e133461b132ec1bebc4796f0dcb2d9b61729b732453c1f1de4e48e4b93fcdc6e771491f3f3d0e1b54e73862efb253e17a396fd68b34a5b3283650f2aeacbb52a86222b6946bc9fd4c70312b6cae2cd1baf81a5b0f5418b19cf958eb3bc626753a794da029eb47d14823dc765bd190d26216cc6f8982ac70d20a2464b6bfbed7ac90d93a62cf7e14e8b1d6588511c5ff03ccc731de953f294fe7240adcd7a7b54513cfe919102d478af79b47324c9b6a2207871681e75a2b3f40c62c0b1ff0e6e26f5715b67cf923b4d8e21dfd25465d1b9a5fc4ce353a872b0720b274a20fc97e5a66bbece69c82709d86242c4e75a160dd0a42743e9cac97802ed1e34f797ef3d2e8d517e43fa35f1fcf1c3b4c5c5f871e2f7f1cd51a1a054da09404620c4f9f9f90bf85fde1f8db96d4c5c3d1ba14b22b5325db0838dc72fa0114e35496ff2aa1038d6445a67e8e1558d62b8b893dc47441a4d9a3598ca6d3d4a695538b5224a97abb4e9979c894a3488c5c5dce7a363908dd402951f5ca7283441716d36d6197fe6601af5cb9d574b9c04daf12431672b105dc5137c548d49252a9d34e4030d712f448072112e4b5fe0bcf5fdcd467d0c6146bfa3a99b5c4df49f2e6deb30e216caf1df161b0b5ad3562e037643fc9ed90c203979814796b13c9e35c85b502808cacfa858e9272181cf2f84cb1e22a9cf5719496aacab8a888c72dbbc946410c5dd17a1ff8e813deeaf62b078af6cf455c89befacecc99eef8cb3d5f71f5ac4fe2975b009fdba027e71cc57b7c89ba7a10132e69de5b6c588612eb46250e63f64f2f92ab0b01e09fbc3515aeda382bd3676c8f77d086ba61408c09eda06c01bc2934aa2f62fe6eb04b8b28b3cdbdd46db097227e54f587a9ba05e630687fd5921d9c738f9f213711c5357258b5af2941be428bc7dba2756a2f1497ddfd98b7137004f6077deaca9eee11e817c3e370431382a523a6cc013a7f71f058df7032da289f82e5008ff067d2c72306861cdc96af8c080bd46a01dedb76b63b2de9456297fac7991bdcfa79c46681fc56d28a753bb57cd277ebabd148836ac652a38266fcfb38c2cd7df97b13c87f53b7ffacc0929ac46144866e5c81e29655518b29dac1fdacc6e2f77151c4a9846cc1a19a24a238a504c4ff31da7da9645b71ed651db91ee0c1a00415ceefd1f59dd226052112bf22c4d965c59d917d783895b89707e82b729d6d77c7db6ff471dbf6c53ccde29d716b831f43c25ed8c5ea2f39064954dd14f7bc4297db98ba3c657a7658b24f46a26d5046cd79c6a6fe828f33f67fecefcc478bd951b4ac0a1b31656ced66885df1e81f6456952e7f045fa25d376332da48f980f04636beaea3c96399fd5df58eeb013226a6ed9943171cf699b84bcf1f54eaf8a64aa4ad0542019b06ed898be64a0dc62109ec6057d418ad7df06a28763128a171839c05a49adaa7ab895088f0795643189d588898b7bdbd645f0040a5344c136b79ce29d3bd58b020f1d3190bc606143ce21d34530d9009c7a2f9645ac7f15afbd6c5106545ab459710c73ac5d07b6b6f704fe6913a033d85b11617c947da41079c019eb6b1860fcc11f60f84a677f37c398500736a8304e1122d71be4b96de98779aa045ef31ab77a9c8d0f4ea5a3a46d8de400087a5165834f688fd5bb01135bdaf91d2f3d3c003ab5c79eb5a76df51f0f514db88207e41725ed19c9521c961737f44baa828461274199c219c37e82d13c2d1b4733f6c038902aabe22417e657a53bb219fd4b15c94d582d67e2dcf977c7e8c298b09a9d3ba3a9a0100ed0cbfce783aaed897588c0b5a215238242d7cfd257919094d06ab7dccb48cb193917214e23fde891a660e48e16bf687ff6dd6937b2b36e69b1e0113330d4b701c4dc280a9ae7088ef868b985eb51bec47f9b4ff9f3a304dc62afd21db92b6a7f65ad47b9f0726c726b43a606a9ca500b4fc7983abb0392c6c8f600977c800c099417eca2ee6e702bd778598a57c936b5cfca2c36fd276ba72f87354fec211863c320076daf2198e3b8e9ebf873d695014da7cbbb10e5071f05cb6c083d726c24404d4ce36c3737413bc8b5e7dba2fa6ca4d0cc838247df16cff8b514f7559752a46b892adb1d32be2b832aabcdd816cfd83faabd4e58c7b7adc273486d065c2c2deb7580828c7b4c7e6519aa2fa3de36249ec7d80eaea22df9af08f19438627eef0658b91d8d64a92d9a4167a0e441e810a9ce79ef4a6585b330689fea81febe59d841e9f981f2440cb5722c0484c9b23d7af3f3df40aba3629c7c03af3ed935a962d3854923b4a05bc593d00196be0dcf4702823377685a68d84a64023116d89bd83d5f9a4bef0566f9ea65634c25092252bb6e684f6ba3c0648031bbc0a8624ad85ceec4eadda05b6de4e7882539276818ac71a32478fe97e7ef89aaa95ae88d9354f8ca85b0a546833df6e20cf77579854dae2f048b088ce711438cd36e33c196acc8cdba0f23752e0a43d25e1065ae5247ffb0b217f1b9989414cd0e6264ea0cea4b4649ee63c6f5967760379d1cb342d8671039eda1499393ddc17d420966eff9ef1e261a6952b704e0167c7477c38a41310a528a075493ad1987c879c8ae3d34615d8b04ffa1fd2ee217e8dec7adfda20dafc30bd16252aeb7fb3eab6485f3e249b34b64ee766dc5a8bfde946c736d0842e02f3175712fbd4025149e782f633607357b3fba5a853740af6dadc042b6555f5c3fbe86575520986051167482db6d35f4e2a729bc17f02a06fa4a4c46058e37f5c141c8cc12b05792d316fe3d7c71afd167051ad33808e315841cfde7f85ac0b51c71bfc89e5ca4a709c1d48dfbe6d18212cff6ec4c262046f032c287e676bae2b118214dc6f93dc6a70f2c3a12e435880840bf349fe4102d329f8bd910652f651089b8963e43e136e3918df12402226d6cff6c94937348c5a1602ab188c8d61916515dab6f48f57f94ffe70816b4b7ae57c1407f4fc5a9f67ad3b2b828974a194391ed814926ed0daf3e02023cbbc01790d9b245806e5b4bba3ac38c380b13a8582cc431835f22a48788be740d21da2ceae1e5f56aa8341dc4b2e03b6c2035f3160ee8b89f004d0b733fffcd7e5cfe152f94f2a772401a2d0d6051d6c9a659e16b0c0f006344cf18d9e9ba96eae9dcd6ee660c551e325608a1f71258295a7dd63cd1a9857b46e40658aa327e9b791ccc05032e4ef14671feda92be097e37bdeada01279323e52998b1bd0000869c09e1070c7d1774102ce204c16f5536445606ca0e981024ab2d8983a5720243290e619f70e5d07f75112ca3e665fec1b410ca8f26b2c3caed8595ed9c40af4df16a14d6bcb28e061db0142955472435a9f27ac9f038de2d9771d23a7eb7560541cd52d9569cafaa58ceb5506b28900179bfda9d6b4e7c1945b1157c9302b2126eda00ff8d2aad69e008021c9a676d1624cca6182af05dde4ce3be3c99d0a13ca4e29d7c4e9fe2acbbba701eea4a1b7f04209f9b2a0d0144cc50a3a485314620945ffb04f478368379a07590492ea54e6a01b3c82a40c77e2ec3dee7cfd43df681bd890df14668d74581f98fccbb6739b50b625acd5cf41b39ce223297f87897d666ce48a8cb62ec24dd42dc3a8abaf000658c34da5a3d7286a4040c485cfc2d436483d20cc19455b2fa76156d0e7afbf83c81db53c15ab41b874deb20362e825460ef56b4554d651b228e33418daeee002c7deeceb1cfde2db0fbb6c644dcae90f4dd00a58cf5bc43d35031cb36f0e13d0c91e643ecc8ee4e61405fcfe6b07b08fac315f82cc99be395755f324031372d82da46c3b539c24fd69266b084b55d8767125f7f7e53ddc3310e053d261a460e2b368610a15f888cdeeffadb7d2af606951a0762c6f3e28fafcb214d738b31056c1167b600823c185529c62ffd7ec0fc2dad96f1dc725a8f19ad3af858b271e83104e5520a46468585cec0a3a5b1608b925f6cdd3598efe536c40a54b05ea4f1bc18781d99402c7accc0e13a7db0250da7d8cfc501b9601db36b5c043d7baa3f73da70945870ade83f2715535ee9ed54c38abf0553bd5ba0adacd7264e6445a124cce0cff70ee8136addc41fc6a0746c5445e0c09bdda6fc443a91bd4898824d97c61b19779ed3697f616ba371a67dbdc92174cf340569ebdd0dc275d1c696f924eff1dcdef55efb440a4a000c2504f012237334955924f3811ba68ceeaeada8ad2b91d0db92204d405e25ed40dcb395b0d639a0d813d310b5c60dc4964461d5a751fc3b11d039d35913d00bcbf8f41ab07ddba1bec0ef3556204f4a3fdb693c22962b3ca0dcece012efcfbc8bb4daa3587cf2ccbe6087ba32fd993baffbc97f5541015acda76f5901688d43f5d667226de8aaa3cf3972e0db078cb270925df624b4bae8c7871f8c3efcd3a12dc6f5b979d3337eac932143ac4c26c3b25f9afa045875e45517e0a5c6a6ffcb16d847ce90be3657ec094c1e01ba3938251f13174d80a8378fca9d3e0507da87da4c7358d7fa4544add1adcc37d876a82dab3267af82683aa3a5b02106bca3097b262b7859009f27f0222614666a43c41eaf1730f260408d41231836e53f94105592f1b8e830d93b48b0365a6923dcb5dbc9e8d9fee14cd58c815f8bcb71538564f27454f9d68d717323c142e5ba729199280adfa5e5a5bfc56d8f8926ef69cad95f30feb414c53dfb1fa99439e759ee485df287ffd0608f54ccbcf1862017d0ba2867b572eece29a97e7771cc77c930c78752d561abb3369922b129b32ad438be3f8f5b835b7015d17faeb4ee2e10fba7f02f5926b1c41f5b978fa58c88d26fb295edff5756ef79668d0f604cc5151616c89e6c8daeceac665f3a1fb80f7f85643b8b4e6c4bd7d4e713e1515b805829fd19034e643141bc3a448294da65f680b4f47dfebace3ccfbb815b1c6ce0ca8c00faa207f489e0c9c653cf0fd62f5623cc66c8d9b31d38228e00f7eb2fbddcfea5670628442831fb5cb5149012f2c47a4e78ff605726f7d15088645f056a116ed2a7d663beb1e050ccd7d99e9cc2bc3a2c6eb2cf584d4ed785852a765c2ec1f16ffbe0a9364f7310a6be07d66ed71d3784f6a5d03dfc17df6667cda48ab25e291135a9ca939229b712210a4fd13ed55dc361c2885a30b8e32c5a0f466bd38d4aeb59d182270279b446c351998f43c09f38f3133ee0e6857537245f303b3380a7e2557064c3406ec2c84a038b2a9d898fade396594c7fefe25dca539520d83bb919e9f3b6d8868820048234216ed840e2af4c7f3d7f75f857ebf139da79a2eae752f09cc55ed757d5240153ee2c299a8b9fdb98c7960c09481413b4256c7c328220cd8a15dad3c645100e73cf022604401fd781b2f8c2b4d5e0ea5cceca93586bf23b2934b887a79dd9a4fc77c33b752d17f9f10099bd1ca820071f5b5e1e8e2ec1e84d356b5c2751cca120a3011d231229920fab407d2f76cccc99a3e40804e2c1c994b14da2a5b1617eaf986a5bb8675e819025f5370f48e8e9b8395fcb54fd14dcb35284a704a92349f8e1104ad78f0d0cf0dbf99c36e7a1209263b50b6fd27d47834cb36ee4b1f280f565aa5fb53358401780c9d6c529fc1deb68865dbfc8b0f634dec088e90cb41ccf6f6e5a40d32cc9edb3f777e18a582218a70f256668e48873354eaacc77136e380d4ed13b62fb9c7d3c8a9ace96d01ba41c207611785d04566888da888e8e1c5d83cff3eb355de8bc4ba84936cc8f1aee3aa4540cb75df44530340da9b90146b2995b97dacd0bdc86dbda89e4e28be7b8981ad2b6d6a8ea562729a45265fe5a7eeab21874c4de0765ef1d4347d431a429ada7bef2c39a9594ae1a13767ad61afa195990047043c7933e16fd17208e3d35f6985ed5c8236313b60ed5c5192b1f837245b64da9f6814ddc59d28949c50b707793431c99613d5557c51ca9e509addf82d18b107710e9d7f25ed1501ecbd1352fcc656d68d26114f58488ca9c580c5203d967bac2e7e0277f73c800cf59691acb89a0a095879af27331fe3d832665e2cc55a555713cfcd82b8f95d69080edf52e598b880c3d95939cd0589b4ab66166f15afb8d06d84014b353c3dcba58d8574e886c152b541d6e78499cb06816919d0eb1af3fccad6202a025a4d9e90973ae937b223bb23550f76687e9570205f469a1ef208dc18533a62fdb6fa67fc4ffa9dfce1c3426e27ff195ce4cb994d980624ce6f05216855c670c1a35d6482bff817ac7fd9a551372a781e26cf8213a34b8b60e4e403430db716feed5b7824da97ceeddb6c95c3964860f08ac1a3704c3727766f3286e0e165e59b1729e7b270016dbc9dd935c8b70a01219882017b10933882978d4594e02e49950c9530de0f35c8f7065b910671c39f4448d593a9fd8096a3dfc7cf67507ca9dfc2972dc300ff060141c1f74ed5798f937bfa641dd2e02a1db61a2680cf64668684b2edac603589840dba8aea4c944da2f3879fc8d24aa72351ef37c9904e1ab70ea18b7e45e1381d9787e8481b84a3505546be2f0a45ba399ab4efb38bc72fd92b1555d38668a40712448e0fc47af70ae363678a82887f0512f0a49213fea31b65201be2196ef924b9f949f9d26525bf454c18c35a5f9b2791b114549a382e6c5818c7516d885c2f7a091c9c028d63aa1fda2cfd2718b6b4eadd67ad3f32bdece4d0993c867c55c7110c37e92bb27bb6151fbdaf75eba449205341b00a6259cfb77af3fca21d5a8ebd13d585b31092582cda1238d5dc8597ec0c490a6865c2e7f47e31a9d0b131510f9f32625aa3ff5a493ed5996db86b6ee5e9e3b179c441478f6efca11082d35c3d4dc61c0ecbb62f3db9f46fdc3249c2f76ade7903002719c363c38415c2cde8f3d0d3f505b8e7a2b7d085fccc028cd3e305d437e90ffe2379077eeb6d4c16615cb966bc9531e3325ffb62c4631692c3ad181fbccd0c1721303df86bde292e97135dc86df9e481e9bf8d27155cbd1370ad5a2a6295d5637315196b1afe2b8bd01b4869db95e7085636c90a0ebed7331fca932fdee9cba2ad9a673484eecf3b60996d1640d486427f6ddd1575d1e29ef179e0e9688b95518a77dd453a854f70138557d61818a95a1a422947d5f5d213d0ee932bdf16e577db5bda176ecdd8d6bf6cd7f094940cfb2bd34465a48b315b4e519035a627e9bff3ade89ec00284dff6f779512ccd1c34772a6be45c7c92349dc7dfc287efabf9fe0036ca2cdfc0b7a2771388aac43e218cc52e197ac022a94c2f627b9a56757b4c1dbcd34476397e155518da7ba28e1c929e762db5d68ccb27ad4a5de7f6960c23696b0078a7987db52d6b24db625e70ade08c8e30bfe22222e212ebac494177aba6fcc9b7515bd169dc7b08124dd25c9f6f3eb531b7e3222c8e1717176f10fd5caf2b3f9173f717e1c46c25ed4159ffb18e7949fd4bee7033adb48cc2fd7dcb3487c9f811bf99e79dce9d06b2d1e335d490f5d00fc6950591103460135d70db63adef7c8f6cb5bace6b472de335df728967c7fea57a66bfd859f277c17202a65c6c9548379f848977c9cf1e22115f54418ccaad223a317917998c36b8c8dcfa150874abf53c77483f69409f6e6c0d5da95f3c6098b8d090f516e2ec15fe3f72d6d1ae6ec3ff3494f73af3d156f3312e6a41bd3a783b3b174d7e1edaf1e0d3e8411995e9d141680e5e6ae6d6d91627b736bdbb6e1bca1e45ac67f8ce75dc37ce83fbb0d61ce503db16244530ff24acdb8f454760468a1da9204b24b217741d45e19e48086d4ec75b1569cb087638c419871c0d26efea9a0404034b24f0d625d2e55cb748da8979ab7c40ec357a78cc2e3a49ca2e407d843df9fa876bedbd60ac92859f352ecc5dc59936fbd3a7704ce61cebeb723c34610a9ba3b9eaaf37444870e99e8d5609776c79ca27cf1ec84bc7ce0a68dcf9788606f66401989294a83748a92a2c7ef85e847455269555810dd060668e3ac0b43618a08001c11719c9fa90041bf2669ed4d75aa1dbadb73b4311a04ff6a8cdfe6705b94308c86e19bcbd1f93b1166accb90161e3f202db83844bd5e5a0000a66b75ac5c644b0c186481073f348d3a5bc76306192c3bde1ffdb9ccf4746e0411e1793e8e9de62bf6de9ae661234f65dcce8ee50cd9917ef792eadb965b64bd8fc0db9e7c4b7d0037106fbfdba7c673caf65837dd5a4bf86c99589654d48d12b6a34a83c2062d011c52c28e814e2fd648306552729ad25144b1d6600b8545ecf3a86ed05c38da7a483951d88ec4e8ad8420f268fb651652cc4ecf81d80381e05cfbb158df32ff87d8c183d65edad99fcdea5f90e399fbd06195a8b448d2d8db2ed71d7be3d4a50e4880afceab09e380b94d058f318d730e649c228535084040491a81ffbc47f558dbf34a9fb6ced0ab6f1e24a1d299984d0d984a2540b6a2e260880b4b6c94a2a58ea499808bfc1e1f547b97ad9a06512e08033ad79a77499e453c9128c79028c5de66a1027d267b6af81e6bddad4dab6624dabbdc56a48f7943d38d3fdcd7549a9a871d6d4264985f3814c4234967ca184919147477bc0ae7a82d394541e9ed377b8ce6fbb02044aeb2641bde2cdf0088c600fe4299a74bf92c898f2f4192974ba81b673dd6263b93f0fd3a214f30a67c09bc0a5531c74657b94b41fa52e133d1c3487fe52e4ae300b0d0066c2546deaec668e57ce1eb713cb4c8a381642b2a89b2cfc48a29ae4e666d290702614004aeb9ccf2b618a258850f4d070b2ad4778067d13a6c2fadd7c41671b86c27a7dea1a87c856aa9d6b65efdd4b72ded02a5780e53c2520bca15b6506339248b4f7f7b03cf401d747d018b04077bbe6133f087e76e4369692b3727573039bb8bb260aa87151acbc61320439b24be0089045c06ddfd07723196127f62c730dcb7b9efa59d659527c3de946d83d3a293e6cc7b0a93dddced04d8a6c98e9f8b6c843fd19cdbd18861a0be9c760ec6b52f7420f6b3a6e79cf2b9c70448d3be18501458856c319534e25bc7d991042a25622e20c08d575cadd60bca444cb298d2ef33acec5f68e37c39fd48496a89aff69e3340da383afe9f484c6864c3457c6152bbd60169cf3186423ffb2819a1bd65f6b414ddef467d4e86ea5602e79e3b85c646d4d3f5c136e0c8486d5055ad78c408a8763d64d98bcdee9b9bb66ccc2c6c07f1ee72cb922861687b2d9c84d0eddc3e88d03c87ba74e00299e75aa5b0b1f90bdb12f0be255c38f61c33fc6909ad19d5b3a45301d0d38bad8cf4d5d27cc4add5f0980602ae854185c4a38b44e34b94676c63d2c198bff351274c36fd5c9f090fda664e650449f4d1c790cae75a1ac4b3eebf013cb8e7b695091e5aa9574be4470370f97cfdd2ff74fa776e438d148b3492229b93fb7644283fb18f42f67d98a86572f2ec0f30f9f5379ebdaffa68a84a9999fc54bce855eff97cc77628a7bcb457afc7601abed3a1801ba3272f10ba6d01899a6cf858a291bb89af1477166717d7faa3a44a322a0014d85a0320050208e56d196cb397d941ce46094df7db9876e357c2623394dc3828e1f5ce0a14f0499a30b451efdd81f8c41a27c5a2d1fc70d27666a6f144422c63fcb5337c04b4baf9093dc9122e2c228ecd6d5991aa6d9eddbb1e1c387099cffc32ef155fc50b66cb20137d4e4800966783392bb3d6365ebeac9b3683f4cd04ed4315becb253fe0def6f6206d8433459266f8e980788e19a0e89206703515a6ae5908ff726e8801e2f550b5815523757ade9847dd17caeab0844e6532a27826adaf95c5962b23784bdfb0fa8bbdf26696410aba3e6da6d8a57a8644dca93f8a47b71c086a7ad8c78faa2ab62e2a8bf3393da5f49ec7b9d6918c991a55c6bc57007e4e331713365c235a1a7d4551af35ad64be2a4104a4a1f1b43f210e1b91d8c9d5ba1524b97036ecd117757c5c21482539e47ebe251073aa621eb6154d4be499c8fb65fe471478a20e85943d6571b6edfeee32323d35e4266303557290a85401fdfc9c0e4b73692614682d9df8ba37e6c7ed9da55ba3c14a78c4ffeb1b6bb23c011b0c8c99f71ed6679fd0cd728555a99efb731f92d9e0c0c08d7f492f02a788716faeee973a23ad059795447779b4613df54f80e72b40ec0b6d6a94856a6060979b50b084e44e01915e7d3526340c74a4fe07d89dab0cb941548c8981402a7e17e39ca7206a74dc3c39feb34686cdc276a4d7ed913e63253dc8e44752aa3cbbaa1d18476af5db192391c1d4f0b9d63a16d3a6813a9098ca216e5011a8606d22e7c6641e93eaa019008a6a2871d6b09cacddb675e2b59f1bb1982c82fc7efc008c49b1d7a3030c0019577c70be663b569b7caf403ef8380a0e46cdc11bb2b1eea870e986c1e2d6016a8ee44cba39815e57efd38b92a6606f89f37d59ae6f70529f5053b49ada2d73a7c0e5f0abc37950f01a91d9d5b85c76da565293dfd65ac6da62be5c74102ee5f81caf269e7c195465f7f24b28cfa4aa473a8ac0fe6ad4bf2f864f5741d7415b83ccf372f7efa2c7bfc563b2b90e0300768f90e74f35397418d018673d3e94d87668e1df7fdbe78604bb50c2ee89101c86b2be944ec7b9664cd9e64df32b9c11da04af39149527fda56dec8b2b496833ccf9982d0fde56e47725ebc000e0ca4995064fda5e9bfc64ba48befba9129954ec209fe693a810c5599cdc09636bc804e4e7a349970d5cc675e325af14d688116b4f84e88a2dc3584e882de465b3415b210130a924e6b39d951c917a71363ed3d0cd747eb24d80cd2ae50ee1334bd9ade7b7b83dcce562683aea34c9b91a2e18f7e0eef5e38b20cbcdf030166452067ca2b449d547eb31866186fdabe5273b9430d8bc445065b17255060dcc7b003a629dd52a27754a8db9c66bcab7e787f255116287e718172a0e38f062d73db1410e0e9015238d4ffc7befb8ea169895fdaa0ae7e00ed8b200879575aee16dd09ef758a8721513cd3d4fa97bb71eeddc9f698fa7e9e9ab0d246530f5ebb55bee340d01e3947af4a298163b8a9b39a8420264d40773d2cb050cc5ea5d0f3ef50a6f158def9523545336bf24c2fa7163dab0e753d7db48f1f9304872579191006d1c156c46f87a8f946bb9c3a9257017e803037e41572a51da8677c8d4951fc851798fb1ad5bd318639f5af7e06b099bc1c7319fe13ec46d7e41282bcef878dc8b2a146a63a6790f877748cc40243cccf9b17cb146a1b60a9b6cdf5bf0790bb6b56a1b45e34fa762a06c3225cd3fa536e7f7cf74d52c2b9db0618c42f224f92f26caf4b8e831362d66c1605e9166497b051680067475be2f38ee63e69e4f879e948ecf7b7e70de98313e34c760d1836bc3bb6d19b58b05833f4064c4e96f71b38ebb8706ae9343e5c8349b9a7d1c9c4b9587dc78950cfeec321505ca7a345dbade8b576cbcbed3a52c0eae65054873d627023285a9176d4902a3a4eb99bcf9dd34e737381e4c34083c52e7a979686a00633f8e9edc1a5824f33f3f0fbd89d96b5ad8c5307c4496a2aad3a805c9b1ca1b4838012fa52d37ffcad7cfe62ac908ee954578e015058e255e5d454133b6653a8fb1b3225bcd729ec11bb554dd740dc81bccb5925fc163062f00f6f67f1eaca72a19811f4407f47761f5ecfcfa2c70f44abb2f875b402780cb3232066845d211b2ae2db851ec88d5b4048b490a1af11277a4d6968e8f681d251546b380f30d5fa28188edbc555e7ef4bd2675c173a298b8207227b455c88b2e8816bed7ba0aeacbaec6924c7b9d835caabf5a37a249a4599c96bd7c456a70f7b49c6075f0033ab690db566577d48579bce619ac837cd0eded605eb7adde9ffb5ff04e2789cb0ffbf677e7d0b35c821eadfc417b300cb5511b363922ff19bce96a0cebf6e71504ba4a2c48cb0ba09d9229481382b5daaa37569058a4c327e21fbb4a5e2d02be3c847881c22f268bc7c2a38c64b2d5357f9de160b5b116b693acbddc627813745a0f8dfefc923114cb8e5355d0a55993b8ebb7f0b48ac80c649d289544f5e39700e081bf06f0c129466b4e014a09a1f047528477ebf237623d78ded68db56debaf83382a00f506f3e7707caac678d37dcd232328910b4c47d6205ed802ab23786e1f0e2c2265f7ef6d4ab98aba134bd6e756d9497fd0d12b999b05ced7b9b52aa1f7f6253eb9bc647d07f0f6b5314fc65a84962b6ace8a568c57eea9289e9259dc4ab08a1106fb2ee0e0d8f2e61534dd22c5a2f3baa641964501b6900e226221bab236740469258eebe183f532a0e5b9146cdf5c3d0d511be7db5ad3ee435280127519ee6cd7fb721130a75d8645d864cda1004fe66a501d906aefdba6da2a55910f70072f0eb63c925b2ac068eb759e9f133ede5658cd8e791b7763c14403fb55318b653c68f2f67fc30bdec1090fba0b63abd032a30d9fefe6d113a41fc78d4f33cacba7b711f25e5e745d348c0f2a7bf9e97b08642e16b00556452c6c8bef33170a1abf1be354af4a32557cc34abd1f30abcb1cafeec0c1f614909d0fb1cd017d56307526e5f58d216c0506e73c1ea0e176fad2e99d4d551e1906221c19232e7dae187bdc94c3557a1023cf96ee205f0564eae7a3f556c6bd43fed633d5409576a3c2250d0a408b81f23dff514b8faafd1215b33efffb317694e218c637b10dc8a69c2775201d6e0fec5d48af0f445bca3a5277edb2dcd4bae60aa03b2c0f2a27175bd3fd88145bc4ec098a172555dd597d4e8ec926420a05463a9285f85096f590bbea69fa980ca56ece211382d588378f8b3a08d3f8e1c3103556a5bc5df6fcb1a858c7dae4fa5f5f2c8333e640a8bf090119e3af587983b4c856f2255560775383f2c68f18bf153d658a5cefc87c82fae5d6bef59e207f6767ee4efddc45fcd90385c51427395fe69f787cc3dde8e6d8d917dca594d30f4b265db2a4db898df9ab1af6a781885fdf911b1d3dd4025b75fa1ccdff042f135ce5e56f1d6f2a18a771c11fd445719804ce88d51b1db0820e28c07aab8baac2fa29b14aee65586c7242fc5276c7d06d58ab595222e1091b09d137cac96ea3eedeceaea4266238bd955ec7d9c744db35415757b644c39fa23c8a2f73dc816eb666bcf77b6a45997567fdcc4f52bf381e494d8e88dc0d648d6d1e9045a0c77d409089d935ee256731a5c2d95f51d1f2b52210426e1731b200e9cbeeb5b88366402e1a141a0e716a440233f146c56ae3ba42823ffeefd193782406ddea56627683c47f4ae21fea0d3c1b3b532b4d168f19231c7afd302d0f900d107cd8223c999695b6bcb5a3bd24aee972cf3c78ecda29c07357e6bd6939e556524180fcc8f2fc320f3211e05bce661be93c50e1f8e48100c6d16f59dfe4a9ce89313574d978b04270e1bbea6a19f373c5e5080ed45a76ec9686ccb5fc5c4f86c87258476212fcd32fb0be1aeb2161acddb41d1997e5d44af47753387d243c58c7a57d189be9dcaccfbfd7fb74444dd0e5573f7b6822eea425812a3a98302124b1d09253163e587a96813feceaa1d76e468c984e623380c7a7045e65fbeb627735648be5951cd46953a490317209f57f316246cd40ed31db35fa557aa5eee4aac82f1c1563070a0070c8be14c1e68df4a87b5497243b9567748861d86a260c4c5bf9f010d6d0f03014c5265391e4dfd0080031a88c0decbfb0b500ce4956d70b6bfacdf9cc84e60a8624672d8bfc1f049f60f78e85d20a6307c152e521623db8360fca5f4267394d8be98cf3c21eb087c3becdd6e46da514d0c2a5c309383d3d4e7ee643b86fe209cdcaeac0786b08db2896e5d1ab731f361cc482b3f5ed870f3486754c6e8556a67d127bcdae85f8737c13efc72dd788d6c3ac805ee8917440e20245694389bea73c9b98fca289a7bae2793cac13cd62005bea14eff7f584751f421ee2e8ab81d88541d535404190d5592e3de2ec791880a928734568a3915e313cf805584e5230549f1c3d16d7a3b627213b9b3333927d8bb63975f2d99d140b1496da28df42e90909dfb8d2b32f213962f1d2cf9ceb7a99d598856384fa4ee02fe2e5b9f1c827de895be09f1259597fc64e7f81eb367765a3c8aff24530301c446fd0330be87e20aa9519631137c200e1ad59c59ab9b8a7eb089b42adb841388d6cf4c9ea2aabc5ff526e45c0f976502e41982830a9101de3382b0e32224992f76c29a59213ce0cd2ab42bc5380ac0730bd2fedd45413b437491c02aef5c8affec614872c996d5dcebed1c874ef1d8175afc728ca02e0a6bf34c79a5770c6931ea229aaab17a55079e998101bba083544959db863000988c06aec157a205bb3448be8d474ad074dcf565746cb650423a958911c14cd763ad3e6522fed14d441e3b8e7acd0ea513421216e56b537dbafa0bb7f0feb5c7778ddbaf655422c880d7558ec4ae799accd89f6f927121677731a8abf4c9ca665e379aec30742221c8d372e9a8b9acac1beaa2a0f5b8cae04d653c7ab6af7b1d61b95464620723971e070361e96f3b49f23f9cbb3bdfe7b33d5275466ff812957f292b42431cfe9b82e2fd925340d022087b53e069299454274f32aa776f408a93768ab74786329507d5e59fdaac849d9486f223cf6279c985c16d522ef2135363c1c846d8ebb83e1c4da615b89681f07f502384661bc9bad0f454a97e2e41013628562f3bcb6b69513bebdf0940d61cccb2dd67a2a7974fd0b2d4b7b945958bca87d367640be4089257b9583857b28de94090d459ff920780afa42420bbe8a6311d23cc6d62b1baf2dcf9e4ff275c8ec8d0d2bfa8b3359ede6303befcb2fe4637377576fb2c4d6155974a5b97d79e41f056ed5d6c9f75036a11741eaffdcd1eebf44a90c3bb45c30ef92301b68fcd12b888a3fd0e117c5292671055e631c07df671f56085dad9c6d844f2a56f47b9f6e7c4fd68bf2ca2fecfecd7d215e16067b241278b90da1e3d1a9abe5bbeb344a4ebe455a13f6efd966a2e62b01b8ded86ac3c4d8dc46f245904ab26bc2d5057c21f38e761e5a0cc197d5897161739176b7da09fe34ac86b9ce7416f56a2877f159d2e3bfa4c36b5df7a47841c2e38f67a738bca6decc2947064588288ba9bb7791dfd0a0ec0657c732903a9daa43947e9273ed6277ce18262c29dc02eec639d92742b11d36517bbe681a83aa137798c3674ff1ad9969dc86fdacc35a65c72c0009558299f03a45d6e3d88f76a78421a0de4fb6f6935c4358529e8250ecfaf6e7a5697def1e495e9429f44bea0aca87255aad7506754a2592eb02a01d94c708403fec21a7864ac1931d4b61e6cc3881e3cac9eb01a07410ae0b05b0678c0ca3d0f5bd05080d95f5a04efb73f2d4e9cf84ddb78643a81be5664a988543cbbe9b5e3f9e1915e7039783e0e6c4ede724d0c53b48095c6f9a42732ef227784046843480bbe1fcbd9de716a7fc23d15871048dd03336e8d36102159d6f8b5b000cfb1b8c9168ba6fa9d7d633cd45c20b1008b4b8e22d503a986310bcc475144865c126b241bf60765fb12bf23a5e248ca63cc4df382fda5543d0f8c8898f1bb76a58fac92a1a057a971f479e8e26ba15f8b3a3dd346d5bd391cb7a4ac26b533e326fdd276030683d3a4a1cbde95c06c7d1f0268d4a4514f5239631dcd35bddca06f4ac60d5e1abe89288a68b6328bc78853e6d48ab3a8ecadac50acfdcbd2d571b84da85fa86c9a13cb1cb7b8233ea14030a6424a020b09e1ad3b2c94f1bd487dcdff0a4c5f97d58bc378c373ec2ab96e45ac26e5c64f7596a8134a2d9c9e5ec72e30a8dae89707c4dabbe62100d6c33c10f9b26570219a2adbd4495abd0633af52a00ce74b63931b94862b14a547c4a2376d30e72ce2c0cd81423d548a49f3cc663f5f4355f2ff9d5dca524f9d6e9f75003804d40f2954eff5c8548e7778d01432fd15803c083fcf882bbf018e21c1c76171158fc6af0ef5509dcb68ac0fed023deeab33eb518969c8170f0ccd6f3920ea5205b19bd378e94898e0fa3e687548c81ac021f187d8164043a7e7c6b9387b0fe69715d10e23a98c52e80296ccf45c9b7b9609c30dfe31b5c49869894aaa674c0c3eb786fd952a94b452ff00196ea14b2fb54ceef29b0947fd8f53bcad81860b6d8ae9eab5327a2eaa0eda5793471850e40395b1c0b2d5251675af90f8d4d1868c7aa5cbc59e9526eb49d832252f8cf84d835776c1c344c9913022745ee202b84af14125a2d24300a4750e4c7d8ebbccddb584352a0b655767e7b5ebd10e4d3cca20e25f18264feabcf983c19c0ad42a3f8ce9f70993f67643c3268bff2858e84ecbd1ee9c03ca89c94f43b319e842f09304afa372eabba3b9e9afcc71447452a1c645d8eb78e432770c3064df9df3184e8844b81a67d94e3c5b47d34e93a55ee787fb57fdc946ad93be992a62d7052179f20b21385527bc49739e125e0a4cad6e8fb2bee50bb65c06aa1fba51d84f2cc27eb75d90755f5a60eaec8574e875a28a6af6ca63d0c69f6e9db4bdb6d0f50599d01cdf1605a903144dfcc945d8a56bb8081e5213700e9c2f8fe50f3c5f37ca053631ff81ef682280d4e3097c6612b9348307e5c207459c66449c0e29e9fe3ca4f96e792058403494ca839be27d639f98f1531177b48779101b1e66a2f80315b4cfb8a010f4b9aab81bd138b0fb83a9d5f56793aee41dd55598188b2d1c6195764108680f4c80263fcdd9d0afe7af5cd1e495d08b3f15e0a44da6b48866abee33b69e9e66e8ab0f3331c79755654914b19f64bdfa2688f64c7916074ede2c9dfb80a8339b39705e9e1ea5f3a37f5b37bf9474251a64fdb10254cee127b61c4e690adc207386c463351305ed31fba8b13de18c3325b303db261444c1bd14e165b88f89b71c0eebde026d00c40ac16a8fc2f68eac56177034f887c3bf60f701ee40de6d976365993d9611cbbfd72610f68d7cf572e8ae6caf121acea09e921f8353b5ef609ec424eb65fe46079f0daa131932ecddb88b143b1d5e25b87eb4108dbbf12afebd767c8fbc619e306607d03937be13433b56196ca64dd8d64cde9c4d1a63883170c4ed0590f6ca8899546f1adb941dc33a19b9ec225d184ba5d15e33c04ff2488c15de50c28b40fc16783c034284e93fb3bb5d4ac22228e1274aa204d0afc3b476df215d00602a00c0904d18715e260e45bc4ccb4e9b4aadc56f4e888505783b5d760798a4d9e4a2edb3aefe86ef449048b5ba721fd23545ef67ab424e6687709c5142bd0821877a1b461451e986bea0f8054abdc5b73e2a75a30aa5c9588d64a9296281fcbfe1b26ac1a3962c0cfb16bf9dfd5e40d4131203936252a5508b93598caa6fbf426bc26c99ee52a28d6dcf8e17d83f79d15a7815f72cd72761adc6498d21b09e0b4ca49eaa6d5deb92d470564f9139ffc7ee61bf748b59ec2785a2e48916f53309097c46fdeddcd12c3970293055b58a2a563a81ce45fe080a318c20fb85d92291f31dfcc2cce27c481744119d977063b191f30e845ce59ffa4c24d5a103f6316adec2b30cfb0fc8e713da7dcbe98e2a17d78d29384d9bc00afea6986edfe44981f9189551c4ba5ef760c6ca5d89ca66c105ee5edb804ea687248397905d61ff49e9b87e5d44be24c2298b5130c581b53756d4a29e52dce7b416941fc022a6d9f73e2033541c4dd79102c076ea37c1c78ed88c6c45123d775a754a479f28add41294d5485f93a89fc2c6d7af2b93a8f0e51b48626db1e97d1e51827ff4bb491040c62a000c9d39812263bdf0d3a4a0c539586910f7f3902184b7162f753b04d6fed3331d45b947a23353eb1f62a9648dcfa8c924a7cbf3ca91c7b11b9ae5cd5495d164c4439cf5ed01ef7fd2f461c6cf6cfa3d05312c0282c8e331eb42be31f8463e5e475af9f48969464bb0e942218bcd8995c6f6c97214e82430de54e8d8fe4161d94e551a0abca4f4a115caaead9ba2d3752fcc6369991d131732e218f33d231b514defd8523287288179c22177db4e1ea1fd6334fda3ce0e2fb21f6983016b645c4bdc0e560e2bf1b697c2963848390fa9ca4d7bbcb13adb57789ea9ceee64c2522ef2547326b65b582b440eb87ea39817711ba6b2ecf45ffbe8c2205375db0ffea46e27b6162d9373f2c5c0d6cd434f4cccb3667e41b49634c164f7f39665c3a5be3f54de34ccf6357261739857ac1bbc61babed7e01d614089c3f7273f91c56c14ca5bcffb0e2859e7834188164f4842498d781f2065c8cc5c69adaa607241e32267cfa70e0eb7a3d3acadcdb4d8a41d5d2aedf7b139e8a4cb25d9736d1d47fa002aff3449daa09400c6e9a06598ae8e87be82268817a5c23370d8e3b61dc32bf9e3e25244c80301eb2deb2ad5fe0d652130e95b7b1643b00497ddb3fbff75488aa51a6aca9a99f3d0fbf895837d928530bea27cbacde5876b24251b8ab80fb745506b278e734c9b160f4fc8b7201dca6ded4e9a7fecd514f21750d61ad45dfa717880c12d1a51695bf2c6f0924a4cf5481d50ba6178db16495b206ea41d234954a98adbc07fb4b009e4edb29078f85970104198fca2b6f2cdc22e2d34a7ed02b499b1192b61f6d9b03d50252bc80377f8e3bc8e5895d78f0c3fb638fadc3c2ee35ed81026edbdb071dc950d1a2c8fede042adb1dfd09b6bb4535ecb84320ef183fc768ad670a7844fd4c2c72281b251da23b87a3c629e56d195f27cf52ade1307e361f0a21e50e267e9b512380d9e0b116ef038c933fefb9088fa1e966be22320ef5a1a7fcb6744ca7c6e87f77c5953adad3d2b5fc2aede897ec7bd00683d9fda7c08f6dac154d5e501453b1a4af919c4a677a0f7c7bb1cf3a876769cf28f2f69ef5c4791586497b3228e30696329447e1e29fbd0af0fde2757801ab33e062fe90a921a871c0f768e637b27d82b2056733a3673390c91fb94facacac5406877c3b1ee0319d19e877a85894b3e275d6d2479e5a0c106d9e31ff6d4ae300a6e46e5683b89713c8641bb0b12a3e3a533a7add964e029ecf73c32dd051ab47d75ad69f290e97f60e2766f980562d3c566687de1785017574ef6e588c8e6be0cc8bf48a1cf03c2e11eb412188f79fd78aa252f7648b978e64ef8b584dd17811a379f92694bc43fe60ad8b99d471d02c9e4ea37ff70518db885e76314edd68638f28ebe8bdfa9fd6f23bc00edd171e8b6e9fd6dee3ef64ff835f9dea3dedf91715a633198a8e3b4dd5111107e6ee2ede381363c9a890ffc4b7593c223debe75578ab7187b344f9f2c0269878c2737faec717e1ed88e04a1effd9d3a0074db20eed8b5b99598835e5e13b352342cf1908a2acacc48164f4453996915a19fe99e7bc2d6226d72b340fcb746656f04bccdfe946951750abc065e52dd02dd26b45dee757b119159cd8ff0da9f7392bf2719e3bac4f4e584fda278777ccdee4c0eda7195efc819487a7befa6926ef8c438905959d09a4a5b7a7d90e7c9794c864a11e027d8f1fe8afb1dda17456a33aa018e16d5372fa9f680f4f02bc9cb6ee15d32cd977637f95819eaf648510ec60979660784266a2a11803e14120e81d7fac97f6e0f9fa74ee4cadb718ba531fcf3ff92d0f0113b038f6cc5a2eb3b7240fb8e16a43fc39bcfd0b44a9ebcd3dffd6533453f4b14609557622a116c0e44d1802a12d545d5707897cf54e7186cc0ba4f68ce745c42530eba10077bbaea0587ce03d43cc1b4fddda57fbe2f05d7a032df61e52347e5993b2c6d7e1da0ff2c38025a81eb351d9b07854eb3a79c286411e37851c18c9ae900702b61808306a545b048c639f62299045957de902c3aad8cb4ec1a0262914ef0d05499f8a5b1fd541a2596edc6feca3ad682e481bdf7d96bfe998bd97c6d57043ad5d28357fe542d33f36912847fda5129a5761b92f19abf611be9c46bf96dfbf1c9d0fc795cbb6dec1e8a7e2d344929e323e3a9da1be26f2351144a7fc2f3d3d00c8f40841d095e018e560a963b4c21f6ef0967c04d3e707b4d06e1e4672baf59fb756f60ffa396d2faeec245c99ddb800e6fb0db66ed7fb58c080e93ff3f94a35065f2beef860b6b9be58a07a37a2f9460f0dc885220fce9745a2c8c3b26d246ff133817b7dfd28a539d2f84946ecf435b66bd5a4380570356c0a2da68342a22335e7c61dca6b9ae29db0a162ea9425f8c470ec9bcc324068296f7a0f6618f996e737d7e480e3a1de86e2ee123bdd1f32d81c0a29088ab2e0906e0a57c0f2583bee222139b25e61c1c91c01e1433d2b16e22a4603c58750a795c26078d3557eec9ed55ed9639950e5e16f41fb7ec5c4c54934aea171d8498df93dc7f58f80c8d1e8a25f0cffc824e17549a1e6ee36d80c09168db1c54d311ded41fb1f8e675697022c28e7274cbd803d15063a1594630b755de32499e6c2a7fcabe322c3806fcc30c5cf0248f6b50015108259847be32e58bec062e7d0ae812b7299f71cf7f7a4211527d3c8056d0688d0bf364fa80c3a68b043d3ca171922befb98b7178693f33f8e37baa36b3706587f6afb2d6266b689357931ba3e9321ea4ced99ade167a0e1ac382e9540ff37a45b03f87af9ebdf56a6714330ad4568a8dee13cecdf57956cdb5c8e3caa7d73e940c72f30ca07a3d50af3f5368850c0dd6f2d103f78d94458999adde2f3212b022417bb6beaa9973c55814329b9e338ed7e8bedc8a2d76f8dc7a658396759b0656504c1356f37a83b9b071a7c302a8883ea72e24781cf2b05000541d9b7f7d7628cf9f5d9fecd8a55cafc337a51fb0a80c7f19972fcd5a7b67ecc66d380a38300c57e779d4d191dd5ce9044260b5dc844e2c141c8e6cf41d104781ce04552c416cd8cfc14a28476f7fcb723079550756f967af25a009d472771f273a5413e4f71c29c22cd93b879456ef424eba9df959c835b5d0b0273a5357f53093e9cadc6e40c71b1ac48a90fc0788deb6ed235cf98bb81540f89dce9d3ed5a10c5cb68cb16faf3a933d1f6e8046dbae09f78a86f99b70cd4561658c7f1cf33cd66e42063a0f42da1c9846bba058591ec95dc2e9f225b25003db0a2d7ecc6fd002764ac5664171efb690504de61948f48c6e731eea9b0b86d315f328254022d09ada27042125cc14c8695a2714b749fdffe7adf41fd8f3a7803d4df8fd4aec9cb48f765069f42abb3180a8b52777ca601e5db570517fc7f397b1d3fe8b8556d6e64f9f43bf9aa7118be4a8e7f047fdc0bdaed04444784db1a5d9f7e205c35a6c4163e9eabca52b7b7d99e097fa17f51240bbc11d7b77428ff81c2a4dd300070e839e92b49aeb5a35639407132716d33836d1753c0ec12d395e0ba05cb152f3f90b7a3a5fc8bc40d3a0f58d5300cf43aac971695894cc12fa2dca80b9466d5a844c59853ecd6e3ab001e9ea73dbacecea1b43d9ec80301c2f486105493f1a5e5dbb92d0630aa2ef9ee2fe66126d3197d6f23a334ff52ad46e8cb089c7590763a0bb128fdd929bf85369565adfea7e26dcd8fc2304eda8d350ad42c38c7632dbf8ce1493d1763f181ca31dc45a2f1aeaf687d1c787239a92e455862c99dc995e1d8c04e3c44f6ab1a8a396640adb1a368ecf3e2795218115b21f69e00a960de265a5cbc156c5b580845d04e47ccfcd05105040a26f9f1397e40057d7b77e7fc44726f68523696d60c5d8e0723b75d84ff3cd2a63d47dd1d4c65bf10bc870d8307d14fbff406c2278f50af2c84c45a934923b28feab460d03729058c2150c9a1ea254db7f8b0ad5b885f115399992da1c25f205ef957fbe46015843e021e39dd7cd25f5f1c7082eecc9072a24f37f8492ce8336dad48214df6e70796f5c777d0053cd2cfbf060864e7714d02bda167d4b9328eadfb87aab3e241163309e59cd2f69d967a9197b73fc7b0fab893cc4bfb5526c678010d258e5858f93cf3f04c0b5749d5b57821171ec34803f16127fd9a42609e0a091ec242628b428ee5ef212cc3ffa15a3cc57c80b1fbd996eadc8d8d193ef42348f55e8ace38f44ddb04e55185c9c1cb7dd033865cdc04b272b92ec67fcba339ef7e7cb72e421cce61271c47890e888a38593efb996e90c19d88f0f09c7f117c18d6b3cdc654404322e54ed1120730d32f8837c6b6a01f5ca4fe4d022fedf7833ce1331a9ee681b6b4928dac8ebee49d8df0181b3b76ef043ce24d3d1959110a992308a420684ed3387d0c58e79b87c0b062a8b267c4f8bf0bcd89bac4f6105829616987186a9c454e6278b94350ec1db53b29f76269170869e9d25cf1b1018a743a39a5b34f657af401fac91ed275f666aa3428d66c8d32967b1860d5c935670c558ea64107b89444c1acd4b9f0479ee3e0b5b71048b77a0d94164b92c956e52e3cff4f56793ef34e2ed027466dbb98e2d9727c1684081511bfac6676c377ee2cef40f15139ef2caf9e2c6aa806c6744bb12d2cd874a79c042918eb450d5e3485d484c032a0113d855b937458049b90ac03196582dcf65e48249f6aa870067601fc2644f82ab7805d0ea71ee05926dfafdf4f839346f853042eeaf9231dada277656818b1a8534c52075c4b3fac241cf01d1a39ce00388f6c8492baeda627558ff9bfe44228e626f96173b9427df8e2c87c65535b7d0c4d3877a8421d8d80d2dad6f36802c1957c43c2791baac782e56973912f4c7fd19b7166156099c809fa81848c168db9e1122a43c029e8cd60b644d940fbaa227a3312fd43e76f1b33612eaaa2734f3d0f019b18a6a81d111bbb07456d3354da54d8fe8fc7da8fe28c26ebad6ac8065add438fac6f46bf4d90749d9569d3d3f83e1408561f365a31cd376ee46f8a42e95ca74ff72b0245f8394a66ed5e7307bafb2952678d4cab5cbab65c875232a2bd898dec345b13d32e728f7b4af2f93880f1a75218643eba7aa89bc2045efb2308e05f51dfebf9e6d67c50fb18a22b3f995d755e10004b4ed079334a823e50fc422b1cc952296e447cdd118fa4dd6bf166a5f1b91f08da99836fe76840e0f56ba4b41337383c917f00b9ad1dc416253bed8d85a855f41012706d66492014abec47134d22587be5125b7120fb012f21e392432b02b1a673d76bb616570085b5803d5bb3600403191bc5f4eee99c535a2c629b3c66338a96674d3d81ff45d4c81356e329004e16858300296b10fe4c5872f08a4fc1422d0b6d0f9e64db04ce00fa2ea49d8c430265249ee97a55bf6fda746a36f25e4854dbbd59e54a524b4a893052d1cd0d9f14df7bf730da741691374bd3f35aea43a52da9f5f9aa574c7c30497dbbd5a56fd770c17278c7bb50f12e5dc5ad34c9430cfa3081e912a9371999ca0ca619167b1946118777282697e01e2d6ff9e599fb32ca37495cc9cfeba11e654afbfeffb227ebdee5380a3720794097c800d6748f5c997709e320b784f7b8413e2ac464ccc210f2f6f4aae59b0ac5b184297383092c591b47531a4eefbb26876eae73a07a1bbfca6407ff5dcca88eb4d890ccaf628611ccb7ee927b5efb79b03446c9401ebd3700b99000adafdf3e03ccd0087c86ceac04d766b0eacac71891a2a02d8a7ea5103998c2f3abe8af647a11ed8c49976b1243836670cc766a752e081648cec2758940c91b5f3b976a06ac190ecf700230848f62bd1046dbf1cf4bccbc5383b5f2ec33e8582f3a9f22ea3b6c48980daf942e26af8023ddccb0e23b7b5851cb782e68dbae3bde585846c5cef6bb7b8f3796a875d9381c9e2602699cdd6f7f1b379d04523cf64d9dc2c053746894bc4179f6e68bccc611dc5d08ae0ec0aaf32783fdf05df43f36ddc6dc94c0ec660c5c297a6eb0180de3ac0cf9b7feed0d14c113d40b011100b0e99e68a9649bc7f4ca86ba5de12184ec0d3f007c8c09336acc794ed5c2644259e9c1a2324f4fd03cc828febceb54cbb411437d34b4f15bb654481d2b0441cd4832800cf72cb32f4966b45d7b5cb50c3b5b001cbf2991dc895fe3904246dc0ec532fd8ea00dd307b6fc9144646eb7d2a4e2e246c7dcd591ec6da75724c92b56a03b3e40d06e8bc3ad271d85f035119aae3239d02f09068482af66196c62847fc0ef09e0aaeb3a629f469062118bcaad7e84de1a617a94a07f5ce7dfa515d7f304e8d9e180a603aa5d5eb372e775b0896ed32c1d38965b153f8b0e639f95116b34c105ca47d54863b75b0411241677d7f0bc28108ec1aea9a7d878c00051db34f9953b617d60e9d6dfde15f5b6c7f155aadacb0b0f32dbdd30fb61e9420e3b7992a7e19f02a182991fd0ed4f63af88f0729bd6f9f9ae56cc0c6d88149f60819e0ef02d938a0efd025912058ed9d3b3180d656847c199be6d22350ac0e48d5820c5a6da57dd1dfaa6133c1f2647c52f095ef4f58611bf3dd854c1db33095832cb7ca29a691f7b5430a3acb922500df6f082587f2c2dcaa0274d52bcaf56a06831e11bf9cbcd71d179b13c3b97b0cdcbea9b9fa85f07163ea50e435d8ca41711defb5a322873537c1d1403b8d1a6354e3e7dd48091440603017cc249fb78e7dcac5e1dcf61930d3bbbedd5c0f89de2b3dfb23bc1cef799cde0344094bf4de3bc7d4f4036c617a34af285804983f395845d4486f67a1d8f081a852bf1ed49d6dfa8940bfa395a9a7173dd771634e942a5dd460e2911218fdc596fef2e34f00ebe7dbb188362267dd44a74595fc0f66e230a3904bb89d7668bb0b62cce7529db7e5b7c70292b1722e96d32e47247b920f4904ff9e53a4e9b2b6531b7aa457ed50a05e29956402e3c4ada25cf2c07fc07696728fc14914615ae848bc24395dff27b522da67376142b3e3e77b955061646414c8273650dc350d5c6250d22a0044b88dd83d8346969b1281826ee6a08b841ecd0e28029338b153364908223dd21aa503c881bdc633758926ce8c39dfb288ed05d3c60e877a719eeb55556043a8391e5909e853704fa9926e8381566d3ad8cc8794359663025702db5ab678218619cfef79ad4a58e20dab2699dcfbcdabd2e62bfdfdd46d74355ab5f667df0caf470dd557c1ace27719d9e266594881b9e63680b8dbc26027569a30741b8f07c20fa93428a6027bb77c43a40416948f5d835b6af6933c7ceee0164e0e30cd1996c4a05644b424aebb924f38709ac224e867584e3c05236fcef8bcfe099bf60092df938a2adeb2118776d6b46514f16ea83211f5305355018a92a9abe3f1f761de1ba511342b52a559360afaaf4d031ee04230cd8af21240dfb2801e7712e97d96cf074b0c899463a21535f3874164bb999d03dbc6a6029cde180c336dec94382777e12d9382960e0aa34acc350dc62993d938b9cee83cb68fbba68b420cd62cc02c048e31b8a17c280dbc33dfeb28298a493a189c3b785c5e79ec786bc2882ae37a538be50296f4cfa83db3b133e650502242df1786f3bf2851bf4a891c5864028216d3b5eea98570608f876b444383d82443bac64630fee6f5a57a78c8dfc81154ec584d731f247fad3a6ac2a67c111227994c3ff7e7591712fc4876350e573a6109232d5aec5fd64b166d8f7868715c69365da3d83547ce87f93e7fdb2b0f83686f937b27165042676fccaaf262f8e5fc62bd137c10d1c63fa2e9c5b9dd01c95e1360b333b009189214b9f1c9480da65d6b57b6844f6d757845301f526aad840638c4f259ed3309de35ecc5fc13f983930f09f8e97b1efc668f964f4b981c897cba62baefaa2e32d747c7fbcaca819986995ee09d790acb888a871c57011875879f01faba5980355d795cf040e1f9afc6c2406fcc79cd4ee84e94ee3dd2e6910c65bd2b2ed24a4e46109fdc82ead9a177775cac4b3c321d7448cf9b5f1ff43926883df90a0dd2826927fec1392bd874c8df4c506b4bc8635fbf1681d7e8ae1ad8da45f448d8560fce8ec35b696c8f20605c1ff80b6bdebea9c6cd62a7c7bf478e48a90773c8a5e05aa98b7b18a1081d0e01fd3e31e44e62f66b057ee8d443868d2f74a69714af12f8da9d9afd364fb099cb094c306c71b4f4cf61fc5d37ea0516b205e0b4136919a66a810bfc1371c236c0136d9418417d39a69427208152b5e4ad48f02b94a63398f333e9aada0880af7ca1b9d42949d7812389fb6874d5b50f0e7c943c1a7e9d578dd2147068fe9087f3714e5ff7b8d1886d8974d59023973811e42fb3c7ac4db6b726069930448fea8ac97681ba957be0e30bd2ca49fdd0eade133d9bea893c408492feebfdde3b14c3327b3ac640e37fca5ee3cff5b6317a56cb44dec13ecdf66a9750873da0c79749b1336e31bee9c3c5c0ca5aeb4a34a2e368a0ae634aac79a6f54f74486eeb8a160e969b56e9aada4fcdb3171aac5bef7cec1de7f4c481a7e19b463f3df5748e2867810e638189d63085950705f4dcabf4443ae9ad11f671fdffb6aa55ef173bf8b25e3388d01f45207f8485c619b306b7c639ed44f17ffe1c8dd966e1e698964ffefd337decd61ea2f004d07877960ed8bb5abd2d4d69fd9a6a75463884737088b25b4ce35391b74abd5849bbed3e2573b3cc47dece39eff92a516580eac61769dc06e2b39bbedcbf9f59b56550114537b94e5d8ae445c6abd061b8005a716b64ab061e2f3d06f3453d7042b67d83f6993e0cdeb1bc4180d6a5eacaa73a141c754a272adf4a729068a281568e33d16871a9a9772c214ac16d09760cda8e13ec92aa85baa5664f5b3c47888045abb63d6249510b7d544e8ded3e47c616c9c02fbd01b13b6eacc110849550e40083816f1fe8fa7f0206ec954d471be29d63c706c371ad20a91968b9b8a3b7a92c2ca08fe21bd202fd24c748a5300e1562327ac6bc8fb1ce0e84040588580b2d3d4430eb5811d6de4e7b620454725b2f71d3aaa1e62ee7ec11388b26d73973e8c78519491cb5377352d294cf957109ea3404117faaf48d134fa1ab25fe57900fbf11c665f60a0fef75871359256320aff261bed050fc578a7efa58a08907bb0ebaa698836f1d731ab9c9230903d21a173feba122d6db67e7ec2535ca9531976704419e33fa6418524d5c91e38b0382ea9a0b4f49090817fd36c00fbb548c7ccfc68862871aa66693739d1c4b95ab954d85560b9c20dac9938c67fdba823e4061c248ec4678b03f987a46babdbdb1a3f92aec325608493365d73fe491cdff022c6d734b9bcd639946dd19d46533aca2a702dd1dd0d92d407b251759bff4374d45b900d951946506d31090997ca3a22eb5bee5062aa01e78815fce50efb966ab5edb610f9f510fa37724d1fc1f4fc1012c6f6f48c37bb56ea433c8a29928bd01fd6797dbef8570372d7cf200886c1a1a74a42ded3f9741d4f918bea5b3d31dc95022d587015fc7c921e4b2d39723c15364ac518cb1cc7127b0467f4bd2c9ab80a286c4588440aaca21fe638aa81e3b4f08973ec0db528bc4b4daa7f6fa2a6a358c0aaa690f16d69c8eb1fe72e7138aa2301a51ab5d5bd4106d8f9b7d6edfcb224584a615b0ca91c2d221e466cf3020d93c8cc48b15854c4fd4908793f8dcef92cab2f73a3ed569a94a9a5b798a433e51c1bf94b76d8c1c2214df301ca424fc93d30a108dc9c99dba86ff0b18d55a078b0523daec11078870a6391ba1d50c848c4909137f36a5806594db0e8c150b4e051d04756490aa74a99bc27a887d704842219561756eb67edf83425ecfdeb65ccd19d8ca29248ff3c369587c52e1fd360a3cbc89161b67823395c851188bb4188071160466ebbea80faca636e8309df535e0fef0ae7d0e2c3f6230967c7d0aa321b1286955dfdcab7ee68cb6cca4d7071e09ea3ed260a9ee3d4d08844dfb401fb1a269c100aaf7d24c5d8bc9387ed2735ed95246c514b2a3478fa182d83712327d0ba9de0000d52c2ea0c3a265de4fa0fe13c304a2bc123f7369cd74254e52a2f77d2deef4663181a781451b3d4de58ef218cc93afa315a59dca8ecc4f1d6cef7dc6f5f3136f5a07a01433887e36c3b871ca68136dfb0ed6e5b7e0df1b7e7bf082811bd2a7d12abbfc359970ead9bf1c87289b9ceda1ac2a4b6f73cbea4a414d5141b8b835f46f1106adb533c762ccf15ea1d117a849ac9dad631e2146b97a4437be5df4e0f7750fe6ffba7952486cd2a9e4ea29b58f6db505bc856142b6207c6f2fc0ff680a9b9c5ead05424a242c18b3fc481119db7b5f6b00c007224eaa2efa0d2a8d3a14a2562375a0d9601ab85ef87683cf13fc1424717b080a0a6788613de59cf9341995ed5b5f77476a33f3d695d3b1b9d67f19df7c846a6ff446cc4739fcef9612933321c5eec754d41fbe30c2f79ab7df6041da7d6b3b0b66dd2a457c3b6ab6da9c2a75d2b777bd00980d33045cfb09f2f976337df48661db10129c15a3276360efe049cfcef139cd267be602557e001851bde0ae0942118ecf57717fd0141e5c89e54ad0056a43f5b3919272ebfafa5da71dbae081b650ea54ced24fa2d866fb84d8dcb6e82ab4d44bae8071873a6981244564a36639067f8563c3681e1573858e7114044bff66fe664ce0f19059bfabb997a3a4868f8802291ef4769cb2a224de059dc6f7ff80d05ee729ed818dc8e26560422201073a839f204b7c6e932d2dab1aa7d8297b0647f136689d8073b31ce25089513305bc4ccdf668fc1925aa1418c18720936d80bbc203e20b503cea57bb09385dc221638bf063083f5624bfaf4ae07dfe60358453a4d2a06afa00934c32fac2be89ed3d862d4fb27c0d4eaf47b670cb24c80e12074a71264ebd1827a3b3742a8febc54895e9bc11019ee68bfb2e8cf376efaf064f52e7effdb1f19c76d1c37b853319d5d8b9f4e1577a78b2f8fac770aa1b019da3213ae1e851f28dec9f4f834129e705353e8715dc840e4a148b2e3ef1e9928188be0c74dcd1f3a40d9e57f896396af10a5d4f571798a7edc81606f890dcb59b7f3cd6d60b04d312ca6f97f5c63bf79213362e389bc2df54c0b80d21af8f7de6d20f3503e430149fa3e45263a4f031f71b7ef8fd10d174cc5e182f66a70af0b0ed6658468158cf42b50403041a268233d342b131acf5df3594648550c0ec279e7873b996291c6c93a7dc74eabf4479f0e1fcc8b720182a4615e3d3b9cdf967482466a452060e357291b17941c3bd89a5f8245d27dc7c95a2a9360c563e71601ccf51d883466838d67718e79fb21fa9259a60acfc913a8aac07f2268224f8d1be94a2a5a6d86124b8449cd57034f6a76616989856ffcd8e78f0562831543247abcb9f3f3d1b6e3818495d78b864ddc4328f947a5582f9f0a7d70f6e3cff046d4d40c39352d82cd66febd0dff9fcf87d760c2b5c000ae762ab1a78d9c0915a1d04439200c3735a345cdb8fe602f9362d84ac20225618aac5080d357b8bb5aba9c49b9ea2b31c65a782f05d978d12830025dd4774a146c3883f8d85a24a09b46d7d9d6b3941a5bfed67fadf216b86f54580236158273b6914a2b28cd05556ce4eb474912f1ad8a05649d4a8a36b0f734c3285e4e4069e765ad1a905d0ec37e38bd7dfeb9321bc8a79cc7a8ed371aee24741e194fd5f935d2e3dfd29e820cc82b175503631ac0309c069c8d6ee98ac3ae7edfc51347fdcee6330cacd095810f23d1ef208413663ec51f7c4049acaaddb35cb457816cdd58f2a51afde63c302972f4977fbb9c93e8d41afc95e5b55537eeb9d25cc4de71c4969429bd2cbe012159c966497ff63f1e07b45186edf783d88756a57179370e891ffddcdf41b3b5bd33823606679287593a736dfd21f6b431abbf0e36c8b9a41a93c92f10e92541dee3e54fd326a791616f93dfafa6f068d79ab1902e4c6753d70f399a560d45e088ed4d6f54cc9c24c5402623d3e3d9eb988c155ea2da4aba7d43dae684f7e787609ca13d2d55dd13fe30865e5124f22c07f67286d78cb774673ce3e9b2467e7f6e9b546c325cb6effbfb33ba6500b2a604b4cc0df110fcdebd48c7f18aecf2b9727981e1a752f65c56145a3414831986220e35dd1ee43187780a8e2b7e51864b66fd540aec3ac91dd9efa95811524f2a0d3cde4543fc236ae715cd3d7a016bcd32e4efd2411698c23c2b728d9ca91e62eae2c468589da591ef46abdf3dfaa7d0385303369d6fc818043b145bf4a77fa20e195ab6e4a6aea9f60c9b3fee0890f6dff65f32f53805f0baa6c001f4a62a7ce220f6d422cfcab1ed0f529aca8e16bf060546ab3133470c4f5fb245e49c7c65bb5f37734cfbc493b8735e2c2c492160fc8c1c94ee92f3c58ded2fd8cf10a68a87f7235f8ce2102c10be0eaeb07d2fc5103049aea96bd8926d5cb9bd0db97bdf62b73fbd2aacbb193ba7c39125b8f6ef01af498a6e0cb3528ba8fccf9c80cbfe72e4d909692d65e81c095eb727767bfd8191548e8b1cf8fdec20af70239e0c36abce5310b3cc4143d49ee04398ccb8530d597120509ac2f202f265868f1d728d7a88b441173eca74c16d489b1aa88ad6aecd068fa925c4e352a4b40ac44ca1ea6c744edd5c73ac85f18d2c92272215b1410b4cf5c2bda4b1ef64ddbc348cd5078ab9bd56a1a33940c68eda74442518bef276967410309fffb43030812691185f585709100ade3c90092f8c91076f0fcbceb6bd451dfdfd4f9c57ec4bc16cd3e98ab124cb20c36497b87440e1d0ab913b80457cb1946ed5cd9796f4e89b511b0b9b21caa634db3d6e42c08ecceac929b2385a944ea430e45ba85ff7f9e955d13aafb3c4388058408c15e62ffa843a6e13d13e12f40d69204f7c2815c5ac67915df94fe280560fea4a5873b6cbe179288ba3e9518790f3e4a2fc4cbd846788e0a90a41205d1a9e302886a94b150c86015c2588f383b8cd42e5567255c6cfac8e855358aceb02b2e07c3bb6dc00bfa7daf6a6e0409b1e58d05fcb0205ce67fdee63952a598a8ffce70b8f2d148d99e3f4f3a83a26319e96b234cc175e45526069d6922f0fb649f8770652b724ec2c618769e1eca97a6f4982a6e94e74bc8afe661914a21ffdf45e1fc31245aaea9d8eeb2844adf62870e081ebead2842ad69a5217511c6ca378814493616fd722e6ea46bb4a8625c4bddcf6b9b6e2253da92c95cc8ee3bf0032582bc6a270048512034752df6c9766917a3a634a290a6d0db57a8a2641f122945a738e973e852c39a6881a7cbf80f5b2aa01b1be0782a5b9354e32149a278905190d352253f2a52de1c8b9251d06d8d0934eb4fd787c4237133bd3789465a65b2d09d9820f873a285f9406c7e00e153bca0926db0d30d45291227d5c3fcee09bf6364041fff094472d79151da94c5598fe6f749e534323106a754f7398fb65887089a4c48825b5f893f79dd995ab7587c6b47912dbde53da432778b4c457c73630278ba4163ff505b6122c57c38597ae804b6ed87539535b1bbf7ad88df1cc5db55dd0767ed197d4c35c0538380ae444330d8bf879e1238ae3869b3d8b9512e5c8a995e68ec00f061efe29824f41fcb5ed380b77deffc134811036c97122ac9365ab89b68207bca9be29afc1ea4d9a41c065ddf4f2cf28f16f11a8adb2260f645296447deccfb3cd2e74cd5a712fd53481b7c5f1c384427aeec2b7f8e16c32dcfa22740659c990a09168612491ddc103305e1980c4bc567325cb2a98d6fb44b8aff45ab5f4f38cdafeda50bf2e9437486d59a33c28160e1ca42a8d8f0156bcea845b33762f0069249d851bbafd5ca28ca746be3193350857ffd50f12c49e05602229d70d897ab4796f254cb4ea0931a9514b0c89ef2c98a58bbd4fd710829a8a91ad6f6091c62727435b2ef58f074762cc66bd0187c00c0799dc1532f8a18739e97d82fc1443c26026730548d93c51e8a12d4e455b10ad169f2dd15d26f4738e0b3bfa56eb887c5bea11b663334e275906793bee620f41ffa71a79bf7e09f7613d7eb3bb2437273cdf18df5d26e9c71e65d1abc1091cd7a645f82dca0a684d7b3e7781bbb7e485d1626f57078415bf7a6fa4f34e6e2f33140a1d473bdd7b9919df06da04373c6c2c2738260a103195924247555727496746f865faa9b99bdbebd2e8955c89e52740e4f7479810d0b8abb53b98050634c0a84fc63d5866db18d437396dcae4db10d3cbcfb4dfb5f05bf5058aaf07b00e6bd2cf25d2deeb2586ed9cc4cc85de21a15bc0ffd2bfb942acc1c8cfb00ba1655b13a790d431700bd1c7a406e3482f99df3ab59349e861eaee346401ae665f914d3352d1b6ea575e5b59da57c809e3c46c7f16a25473f06a10da8f1ddcde8c0584c1589f7ab86c3e4e98692df818b8a4e3354a69620d481fbd909324a515d4aaedb0a5b857bde26c58d506806350555b138e9608df69a23be8b5c6a9ca65680e8a9ffee53a6da5a41d89384ac6fc55f8748bc721e3df08a389e8c6816f690e196f1fba938b67dc6e54dc9879e54536781d5b1c3a19f0f8f2c978cf41b1d31cfb9161c16e708a478fb605eef88cf04cdc04471292d65eeb151d50603ddcce802eb4d7ec4db9e1ea51ad323c6cb1acb051a3845e41630636322fe769c2f552b6dfee041a17b4418ef481cdefb61661346583e0f11bb55b2dddd42348b750e8e33241da6ee9545b8d46b384cface52ea10d6ecd2cbd543a7550d79cc75f7cafac7f084db9280f1e240d8c0ebfaaac03170d634fe855a886858817410bcde6d5272211d46ddd8dbbf34273c79e23d8afa313f220948177509e7b82321bc85b623f7cc1fb816ad7feb19129856b89648f443270c150420de89b33f5caab9632fff8cc3d00b8431094fa53d6feb25a1da2dc7b0d1545cf11983c8a722a730aca3b1afb6649ff0d8a55c090dddca5e65c0af6d0eb7821b9746b12e54d4f044966879505e1bc4afa8944686e9ef53d4cf64e4f59788ed760b4e9add1483bf1cfdc469f041e722d8319046f3cee36ffd60d16a4e6eeb17116e9c0823da948625a3989543c22e0c6da17573e794e36018bc744f25647aa7b0b5c8e61d19e684d49cb8c31e653fd582cd7fb0283e7fca8aa23e2fe3f284ac6cd77eee2399ff397cc667476da984d9a1f8ad78b995f1df43aa5b66767941ca76ec83734c7e6a796799399425c6c9f0dbc6b0d7f7563aad436444a784784eda96b7f4827bbce03efa794e269f5b6554a41df945105c3832fdb4f0d2588a4ef89beb0d495a53f6a87f782e8d451977a5a32179e4937122861c29273f5120022b32b66ac4938a751a9e3353c8f994d6cc566cf0920e4c388b9398dd6860e2508f8dd24513892e6edf0e58e010f34fb8e575c68af88e57d289522af3360f409bc970019eba64051f9b5585410e8da01a982f0ad72fa64e6800072527e11d9db6efc003b255305bf88dc030de22a0637969d49e9685f5a6b12ace78c1c03c09877d892c9cdd43d722ef0dc00b6d3762ca4a058614d7e918af1726721125e50194cb4decc9bfa48d7ebff18b91c15024723f3fc5d5ea83ccaf2dce82640e0da8ae8ee95133b1d33b4758326ed02881365afe8ee62aec555b9a73d47903d092133697a8dd12508c422fe81f159a0da61b96dbd5231f1fd979efc749dec27dcb36b1ec39dc85a0b60fb8c63e3382a2779af8923a174846ff47876659d6476c99da06d4df3a385693d9a8ec55d80fae26281aaff861c84a36cd43d853f08c957d37211f96b8ba912a8c3e12f8571c47cb31b72359146356534c34d9259fdfa194716caa7b545fdc008d8375add2dabd5963961252d55ad9a432ba1841b44a23166b2959cb5f71e854a9d2a5bd5bb2b9e9d10c483f9f53eb91524f705e1cda359df413fa53c53e598d6aa09929f1a8ed18fa1e8e1ea29d82f65dfff1c5fc64a3606705bb848c9b52f20a4c43faab6a47cf803d9d787051392c7a777af3784f8256a1bb850c0e3743352d7de3e176feaf71d9b0e57322d7a6041f6ce57bf2e343ffcc1d3c8034c6de9dc7df2cd7c4e2f658db6b038b9df3a71d07068db24c144497fb048f650f8717ce6628429bede88fddf687ea88189945a06c25b1aea44453a72ac2a35087f7fe7768aa0b6d3fdb8bd182a89ab5fcae62f7b7c858a1b94fe3b45764f9ca268dd7f3b214b410f4ce90b5221f0bbf90c87f3424946e6acbb315bbac9177cfbb53a077059eb2ae903d8f6aef5633e335e95f96b068eba256bc916dedb62f8d6c503d1fc3b82670ec16ae42ce08c41b1c9383c282b562b29489c3e67f9005901b067e3b00505e13c740314f1cb070ee4b98845200008dd95aed84fe69e9186ad2ead58ff306dba576869332aaf75b7da2011b23abaac17e9e6b202870c332393a32ffe8ab43c2a9abba840686be2aad6d7700c9ee801cbe5273ebb618a7450d48e79cc6136596dc9d4b44ed6a021bb9156330d98f4cc2e7c791242d343ed0ad04dffbb171aeedd886b9bdcbd2e5cf633d297bfdb74c7003968bb992d5a14b809b7810634acf2a7c71176b0174749b9a4b1fe3dcebefe54fff8b5c3137633262528224a47ede2549e355780a4682ae99a05eec6bb4feec41517339b12547cda3c8690f4c53950ffa70e82ffcae29cc0acfca0287cddf5351d183ac236e4994cce1df7c4418b062cb0a7e33f5a2e125c24fdce65f2e5f3e9d5b53138d015758c0120c14e0bc4ed02f36ddb982c9ba662dbbf397f7e9535cdcc0bd90a456f404a98aab512755fa28b67f601ad1f56ab460e00995c55e0dc07cad22941bf1b0426d9cdb0013730b4920d835bbed011aefb7aa09f50cb9504c81f599e772b1cf99b5a1342d055d588bbd24cce5bf3f6ff22261da2737debd1032f256801a5a9ecc39abed84af94e7e096c0e79f2fe7a9ba462c491f65e7e6d3514110b6daf0ab8c1218d48689f33207c9a6f1b2fd1081b29ee772b698b69ed0b67cf7c31c1519cab1d7a7ea9a04b4e63413c4b78dc9a6d31e4a72cf4cd68e9d1114599fd19b16d7f98326b5f87c03edf22e390370095c37dfb99fc1d2b99404b9108b8ac951b42bd1e21574dcd924756830a107ded4cbe3a681bedc1f9d4ce489095a944188637452df49d529763dc1a32608f8100db249230db47393b5c4c3436821eebc3095a350cd4b9e03b56cc315035254753e8adf3b967ddfb5415c8c1013b79291ea3663fb7e13f36aa000ef09bc9aa2c2419b3950e4b53335ac15abb30d0807e85b811d5106be4b43f40a359c7153be48c22dc21b1c65d4ee5ca665b18aa879195dd80b43bfa610725956ee631bf39c472cf9deec0eaa4103a2695d692dd52ffb5afed18c4e4d2ecd8d6ab8cc9fb525505d62377b2f898c2c218394415da1879751dcf996d1dee053c409ee82e8316f6b41e9a30ee046f497c0dbd16cb615e19230d8f502d52c0594c28e47d4b57a8a61ea6df644220160af520e563f3fb4335f1ebde199afc21e30514bb120f9d5c2a10cf15e403ac3590a493f99a7410d2269eb6cf45cdeecb2eb12deb6282e5d2b5ddfbe45bd910c992c8d179840f697af6e22429e3d91e13454a88a82a13fcfe30aa8cee173f590fbc120034afc4a4bb3096e9bf291978b9094a0c14506bb92f65c7e4d0351a2acbe49110fed9fb525c0d303f3ae10762126e210c2b5b92e344f49a4faeb0728a1b87138f47d539cd416f49026f11b5690bbd32790ea96ec2682a73a8d71fa2e5cd4204618e15b58c7f0db42433633905bd2a8c75d868c9b7a49ac6881e3ae66fbfa9c9f8838c1cd603fd956c172bcc181dd76c1cb45b83ab69773eea4bf1372d843f1a45ad4aec0cb06c6a8b7867b8dd9af7ef5ea5d79adf4445392c2832ac081fef456c5f930c63546e84572d0d9a8f4d912c0786338361bd78f30ed1052f7f89a9d27ab8b4af528403b126affe29a5a546aef4e14b1b4de5ad413339dd858bafbc45a6c3baac22d4ad74b69ae3ef60badeefdfff7e54effcf7486526facccf214e1297095a592ffe62826f09088b13949f9fd44827bab28ab106c656bb83096e0c9027f5059f2d9c5b1d51c87412b94b4fc7ae8c4e96d5851dc62bfa84c8ed0e3f5e3947d017270157ee0a7e05ada574178f7e29fe45aaf5c939b795216c42e0bb5e9ce0677a2b05fbcda40be2a40836599d2da630b163e07c35895801a6edfa5f32086772f93ef54a77371f8a88aa92910d0ebbf8be4be4d860ea6fa904b2afa65095acc285ad1bc3bc98a11628a7ab634b6e1c40b388a968b43897c8f9e510ae35f708cbeb8691ba5bb5a22370670851674e5f8b8b649a1c9d8797bd9e0456ced917d3069169f17e2765a512fd63ad71171cf379d6451f504ef30f5ff7887a937388d16428465fe7c22ec006a68b175bdb5d9a7497cba253f42f45a1c91feaa4287c5a64187447b074015c0cca87c52731a667b6eeac42b62b8ef40368861d775d18b9eb98b28258a7e54d4f5af9b26ea8dded7bd10cc812ed50aa5bafdb85242973836b069be0d2627950e719319ed8b47856586f9f24b6c9576d1c60eeb0b02d7e3bfa2bbd96fff393644ed52550ba410efee536fc6d53b38fe78b77ad70128e7025f34234d524c767ffe7e1fae09ac2324379d9b7bbf29ad9d7dcd56dda767bc086911bf33da9598d6ac39905dda64cc72e58803a1151b3a12b6931d336d8d6c2629bd38b40e90cb53cd1ca9ce358966a6050da68e72e852167590f7d6ac9409f33eae821fef1a2b09596c24c5a1f815168be6ec6ec209f3a3b02896b6751729ae9a8bbcaac6fad51c4823e48534c4962fa5b0f8bccbd7aad742855752a5e04887ef340f42a7b505003bcaa716a9c0e7526503bbc4db16bfb41fadecae594ac03d48274f2b77111e6711c8b84deaa4c591215653edaed0a9445d40f7a56b784bdc17f1dc8460c3e7ccc33222aa8e4ff638a0603031a1d8331592b2f873588e165db134deff38ccb1cdb0c45a062a2c9e50d9079dbd67022f61d5744aa8602a3f221de2992319e6f7393f5d7aadd3697e40887b66735f9eafdbfcaf188bcea8ff9a11936ba0e8f17dc5e42af62ac31ca21ffdbb2902469bf48e0c371abaa94a02b7c8058f7d51dbb83e2effba37b77188b66a9caded146844d40d064c5f2866cc1b90bd040b83ab98c4f02030fb7b62eba9e7cc94cf7cdefcd6724b2ef6ea70be7f32900ca05b4d1b0cc59c3bf6d2d8cff682f39e2ebf4fc451d8dcf5022157891607f769c5007312585fbc00b281a100155b58f292e0d8d1ae93521bd83eed03388e68029e61fb6ac5c8b7d5d29dae79d1a643b10d00a968ed95463a5b9879365097e281d150e678ee2154c8a2714f856dcc0cad4175676bbf5bd755e3755bdfd8eec50643c8c578c44ec6431218f54557be8453a8f5be6fcf689e474c4e228817f73a21bf906ae2c75216fa2a66e084b178590a8874a823c7c671c9f62f0945bae8ad5b86e4f905c506e32b1369e1e4a36a91eaca97eb2d2b7daa0e86afc7d482cc20ee861d0fb9ab89815107d619bc0f50e6980f611a68a3705b62240e6305877a9f1b24bb354f3f12e63e9be3893a75ec2347cd2a4ad1fac793acc49d1e0ccdf0eb27af5fde4d9d4aa4d7d3e21728fb4daa4709c96b220df66ab1e513462aeaf9b3a05c1b881c20c151b7fead7d6115ff3d4f084342123ff31d058fab60033d090f01934c2495f52ab01b7b1771dac56d508a8b2f0420a0b61f05b3ce5dd2aa0d38fad50333a757d585f4bad85b33f03aecbca935f53e68ff56832b6ffdaca814fc3c5046e03aa670e7a94bec29dbc48121aef5569bb8dc51a348730b8bb235997a4533feca26ff29b212a61ef408208fb1f089a299bd477540d12e4198cf7cb784e684bb5ae4f0bd52dce9a8e571460b96d2618c6617c4a9cb1f62cfc2de208805e2d3dde6137b099118ec4e848693b5b8b9879566dec20cbb176be42f31daa6a56e49cfe25c1248feaf5114e1920a1b5f2b98297d8e356dadae997b93d502b5cfffc7e33b9d8a66d6c0ff4f36d17132599af543170be630b7f8ab7ab30b337a4776f356ae287d2f9603f50f8876d76ed79f01f6c6baf7d211d69d682eac13a9e89e432d2aef1bfc6546057a85298d651c939d533f18857673a1948b60258440d691c2fd1c04ba3a321739ea4d31d002e57577204bb7aaadd4e1d903219448493650ace247b92d848fada23ce7c1b2c04f855e16d03a19d16387499de9e714ca11b145dceb8a5cbe7764e84690aa629b29ec0f7faf435361629c52fc0b56780653c0acd6ec03363c989fc9111839a8bfa6d63891a24f501cb00a20f6e858d4cbe5bd0ad3637caf5d68c5779838100309597102fef49f73a388b06b09da8ce37ec15b6dd1d17da93d54b6e0edebbf4ad4e4b2436a317343f983edb5318201bd6698f8c333a7174b0e5f99e781222066e18472b946b5047edc6c871797587eb8c56d0f4422f434e06480c4b0f9eaaf6cb39652f8a0a1f807f548f5fc5c9379556e073aebd41f17fd607449b498d0c3ae58d5d0dc5b26cc3e99a913472a8d3c9ade6f9ccbf70d45f9a12bda65d9235424ea9e27408ffba529e8781da44edd98a5b3c5e451c2ad3499890be6fc06b10dbbb52c17f856aa8845cb1b06142ce98af1b2553785eeb1eccf6ce16cb4f02af620857430177abbebc6a0aa02cde7b301f2d4925e899b76824d328013406aea2613d3dad15d5a4b7088fbc50d718222a578014755d142ab637734f591a5614089fde9c45e3366e6115a1a173aaf47c8dafb4e40cb692a0013cd8a401329776fa3638cb5153855139d89c3da4d4a78f5c70f64fd05b0bcd3e8bd8b49fb4092f44332f6290c69d0baca848f5f8354d2bc78d5f6355c9a58ed8f05950bcbfd4a078f829ed5560b92fd18080cd67256df48f0bb1627439d5979cbee33d816b97183b4b1a13bbdf5b07bb316c9cfd3cac6fa19db61a9cff6f21eb03dd6b168ec9cb1004471869d8f04090d9da18e6583d8bea069f51dd1e3e0c36fb0f86bc1316ff501dfb041530f953da8a2dbc3b919f05693434aff878cb75703e338b7b45a562de1329ddaf561dc31b4bfa4dd6166076dfb902f4b925cc28e84a15b67af1864cd368f01d42619d68a60d31bca9c13a6a801fdad59fc238211b9f2d9376e29b223c11a115f740df13fe80ab1306e6802ba21c5c530b7504efa3a2c00ef165cfd8ca403825b0c7401fef56d29c0620e0c83679f5be5586ff350c550bd4770a292599b44edfc961fd83ff96db937fa49a3dc7d4d24d095b6d4e790514aef12948dfbc9272741dc17163e204b81efe2f35121dd91f2632d429c435cdd9dc3a92ccf24afd8367280729a5af295aa6ebde276ad7908d2fe4adc497b3d03b63c571f95c5265533ec630b42e71f149a88e8c88074ba35681d5e5a37c18131e4207bcc4695b2a758daedc035bebdecb1e40d722474cb300a920e10166345552a94604b3b7129c794da4b3e2e9be2082c1860d4f68bc52c4698629bd3139cdff2e4ac0f766d84b748d61dc415df797437d56622ce009b1910707373f4d69857af1732abdc9b617c4c9d6be13c51b5c04dbf3d2c1b3ffec765ff1eddb24fafc25d000dd919499eccb2dab0d5b8bde34f3b0fd1c260f8cb740f57f397384a18d6ce3ead68fa504cc716f594c166052e849fe49442ff58cf51854f61618754874e627473cffe60207910b7202b3c9bce34a79c5e2c3484d67379d76381e1b74594683da7f232957aa5ffe16450eb919a0f8edfab28d645f6ecbdf9e203809ac41c2c4a7ce58a09b7d147ecd31b46e9439399beb3a089ad4a9e572d1b851be0fcd4f90eb0d4a2dccaccf59fe02ea0a3f63e7e53ce70047f2820131ac0f9d5b08ac24efafeba953920aeed17d28bf5e13b8629f2930e22e742c13fa530c28843e79fdddbee25f15dff21f8c7167a1b47fb0643ad58c42c19b79f27b17d0754f657bd92ba2b064ca14c5ef1a9ba0361f225efbb3cf2cc389719110abb11b06c0aee9c0f4748a1eb2930755c1000d327ddcb995681f5af2a8d0568b3e9c65f8d0224081c51c5a882152dff74b27b2712ce5f18b1fcd151bcb5e66fa9a6680c4d6aba1045d4bc796ee10d796158b8b08bd6c4a89e20477bee75f8c97caffc299d570d52acdda8f219d0e8b54acf536ee4ef2a35d33a49a23ba136940998862657d4875fab1a7239d2ab93d91998da82e68ee5aff9d5dd9938d668030291bd6647be7dc72f001bd8e4de91f8737e3570b39f6ca6b841bca7a28958d28b39d0cdba9af22800f8f8111623e598857eba7494c1baab2762525f92cf763d435972768290d427c3f46ba7e2cf87db9aa8253ef3222c1749ba159b3bc42de465e0117c320f05246cda9842bbd507ffb87e0a20b0b8150a4d604448d28c9d5554d90f54eacca46be97b4fc18e8006fc4b37490d2cb4826aa6d4c161fda95bee21cfac2fb40ecc69b08ddf8d8feba5f7fd6fe235a2934133f2342c8d1d7723c0bfbd3d1003dd38d6574641b7667208a3f61082d727916e6d26cadd265739285d678dd64381b97c15ddb74e2e3dc1f284272bda56d91f998ac80347707d4c09e763f0970b8647ece47f68c205c2da0ffaed837b25504e53b657a87b21ddfbfca32052babcb358838a93fbb042c785c7b39bead57a392d0931858b401fea0272db27c52888d3097238a94f9cf4163fb1f466084fc5971cb10fe2ecde1c101d2af7721a8038b84c2c399632fc571ebd7c384874439dd58dab066fd2a877dbad253b4f60d39f5c4fca285d6c30c87414d68fa90d28850803cff09ffe6b2993e6073db407fb50719eff09dfb2897532d3437dfc09a72b8ab5bea04fc20835e0e92fdfef16d0cd17dc76929c5d4e5c92809c68ef5513d47c79ea0d54561d03941a7da8f7bd16e9e52cfef6ef45a1ea5e236a76bd4f44bd84c2a0fb1cdf158a7cde529a361ff278e9a5776d8e48c250aa48f833af2a282d5099b6f9b68ea23a69ced27f63bbd348b5ad955350fa6a6f72971f76177ce59e0d6822209c178b629fdb5df63a816a4e4eb70c6a5f929447d78c57e4a870ec9bc19fa8ffac9d15cda4a83043b80d582eb6c368b2733c7e7a16d78e828fb2699c07bf411231b5114099a7b689b6cb65b5f5eaa414f6d8c0503f900b081470eccf5af45c9ff545b34c8441f2a545394cb1745b9eeff0a4616a1811f66dba72e9ad2f69f4bf4286a14d37f3bd772174d6922cd89a3218e8fcb270e4ce69a3ba70fc7e5c4fdb36d356112a1bc1c7da3ebe690d09d0601ed3921acce0a1ad32c6f9d2d547032d74b664c214f8eb24a0614abe60f8adaee0e73a0ace84bed6b928ef24c8e32762a04fe5862881ea0f6eebd0e3f3fd99bcdee1f0bd3c5d9b57a6b4363dd4cc7843ba7e2d349199e17de131754f6d4c26f35ebb00f732ff40775602c62019d8ea8846b71932cd4a545b85c842bca3bb2e5967649fece1971c0f448af4659d0200361d69d77571369372371355186c6ee2c4044b040e874a29a474571f76fa62725b75acb008aad946c61d7ef1fd03e6a0f2434305beec0264adca564c583f812bb06a30877ff2d5568d4274ef852b8ec01f0c55badfc9be9abdb8024a72bb1ba1fd90e21305d4ead3a9beef598b3e648346fc44a8c8fe1869270a2035e8b93f90f4165ed6ed7e611927f0f7e749fceded089a5adfe81f22690cd13d1fe281abef3282a01ab7c21323cde5a9cc3864aacf6df5cff3f6e600b6e2ae14e952a0a76881c64d636baeb2d33e84d509040de8d535588f3c80c7641738b581167348b0fda36ee27ea24f49dff5235d71c4bcf0d0dfb79c871478961eee8fd6c75aa7d400febec919aecd594f437e784cc9acd6f54571df1ee878e96a2ec230d4ae3c724fea3f42310c3a41ebc8a1684e0d679d8ad20f9c0506aafd68edd3e2f568e3158615a3d490a9d91ac915f1c450e2c03fe9020457b421a4e297b67248d034d305b4ea1b6ebd804972ca982e39d1b1182ed67cfa3bfb9f7366579d393417ce721366f44760609d7658598503364ca71b1fbb41e0506f9db7ca6fcc0fb2fd8bdea2aebc5f7e34357e2472b615410ed9b5e50dca7c388bd05fad3d42f5f344033258d213c1bc9253ccf15aac05f4c6be36d1d41e3a5fc3e5587d61bc6f8eb69f36620a44e270ee8a6d080b358a599cacb8fde08eb1d17efcd02fe4779dd702f0254b42d0cb86069a9f37615f416e72a1a7441c1bd7cdd4ca121a8b2ccc6c8dc0fc9b7486507d9f647c2cc9cd4ba92055d104bacf1cb48c5a2ae3afbe5c17b6beadc1bd0e9b02bef290adc409447feb759caf68ed0eaf47e7062dbff5a59a02119b8e3510ad180ba399785aee17c1ea42f802098753faa772aba6f393aa7d199200caa6b757a0cf622daced735d807f94d2587c14462d577bc49ebcf8c779c15a8bafae09ee24e091cd423b248e6eed0f647b5f0331088537aa1ef1120e6f09141c96a23301518580a81561b3a3472c06ea8798c5505f6724b00ceeb2bd31cfbeac026ab78bbe8efb508d451d6908ec0b439abdecac37fc525b6ff6fc6d9875f8392ad8588f470faed0da74d4368d42ec7585fddefab05aeda7b4db13e280aee09a73bb8b53079c5bb21919cdc7b758e1f0d448416512c889030eb48de2c980bb610e70e4bfa724172021142103b79586c70f604d3b9e3e8098efeb910cb24b0bede1a59e11905210ba0ce33a6f594a0a43e55b360d7a572164542e4a2c2c4c98064eb1ecd0ac9bae0c1d57a673a3dab4de548c126dda937dd4d35ec7a3200c082a2c81d2a140a825df4bc341dd009fe30ef4785cbf3fea1298e3194b32a906cf4c41a2dd7db5c736ae34e68b925afa6864f25e16e9d3c51c3d3e07be2b91c9da2fa5e16f3f6a5547ee5f11db9e9d004222029a989c54ef3f1cf33e0d4ce7e7183d2c2e449729bc5d56e4c405b9d51ac61459e5fb8370ac2cbf3760f99c76a26288cef2ba0cc9ec66782423a9e8bbc175b86a739a8333155b53caba9ac89c325a23d970b98d5b074c7a70ebfd9b9016700731007dab9662036f07212ccf47a530a64a6aa79d1fa4d5e7c75df44e5add9aa4e2c3f0a284ff71b782952ad6fc18dc51fff5300ca2a05fefe99f5cb3a85ed1b886b9eb0c391817811c7bd87cb8c1d59e21f3b7051348f9a54d30e8ddc4cd36fc9d6240c62e068255a2a58d6ddd1b8d76d5f6041a0f581b08237690f3af8e6ffd964949570eab6da13f82b7ba94b47b02e4cea3add03c0e885385288f14acf0b51ab5e953a04fada7b8abafa0525931426a22264347c30e8b0f6cc1b65357de2a9f9503c1f863d610160c163f5326f0b250132a45caffa9401a9b63ad8a203633a792f8525feb367c2b7b2f38bfbd8677b95e108a8e52868342f0332d050c64618d26e384259adf582db68e78711c4c1389ea556bdbdc853c066ad01e750ab880174dcf7ae9a912f966e6629cf62fef9725b250a69d85c236b9fb31ad3bc64f37308fffc89fe193bcf205490321415af21a87170eb377e5fc697cb69c5827f22bbaf4332330176354ac9c6e612f841557974bf8442253b2f1d75f7e65223ad8b4849fd7de3d5ec5ace52d093e9475c0a8cec4cabb1e90779af7a8660750dbd327f08d13bb38347b831617b3c516ce1c67dbb20832394b5efda373f9fc0c5c2f84b081bbf79419112b77e7bce34d493364142095ef21792056086082a261a54ae35246d624a04e10213dad1fadc454b982135a961fcbc4778ba54380502d927800c502a6033742323a5a8f50935f38f16eb0d264599e46a665d42bd16f39e48b97b3d25dbeccbf73e49cbcc7c18e8373ff955881186a9c2b91fbc62036bb481160fe07cd2e2838b8980300f5db4e180e210276236d6e76f13852e53d337e28a1d9418fe29d7725629fcb535cdd80f7a76c8df9fff72cf790c3d392f758fa69cdbff5d8428ff23d5e4e0e56a2fc329b239263af9e22a61b9ae6ce9ce4b431c20bf0df2c2abd53cbd6b0f5fb5467a7760b8072be54551120996c667a2349fecf3462446c7061febc24b5ceade7ea70bfca7858fa9e70fe43078b89456b4985261fc30291fd4bf677dd41fb989f30a2af15b5e4c7852a3b09c3a064a4eff7ed584817f002ce5ced4fdecebec2e00521bc9754905ca86019058b432d03e0c83df4fb53f5fe173420cbe3d29bff48aa5f90914799ab9ca7f7f31a61158fb3b32738c8304b6bbc3d09e442ddae267fe229b6638e1a7a5d924404172b74ab302de89c7fee27ad7798c5917be83db55882036280a3db7fdacaa89fab1f616f349e7f67b15bf88743d1cc08bd86e450d3cd968ceedd1a15b9083d77619bd7ae3e2412e82849660eba84221f31fe7674fdb1b075871307264620547616b0e20af3d8d5a127e3196f56d4647d884538e59b4ae7fa41eaf5af6484ed237ac69653ff959dc0efe59cd7760228e586e1e13b7a46710dd20e1bfbcdd78d3246b735aa8eeecd1fe7371863030d93f81757cc5947a657114745cbe9041dc5a8ff542bcd9fe69e1fa8614eb4ab07e0c183480e026053ecf5c302631f43d6bedb8d8ecaab66060014b02e795cfdb89c641f551dfbd27183eff2ad53eb175e8bb3a09e0f37cf03ad9219b45c1a66fb515b4a3855b540660761ae04819631baf071430859400e494799163b7e6a0097e21281e46d631579506b034d93ac563ade395a6fb701c55a45b03fc5e13443b614178e8d93784300c70b393d53636f7101392d2b116a441542ce5dd1f188401928208b3ace117b5a05bfb1d14eba7f157b4b33f4a3a3a6b5eaf9e5093f1785924539150cb6ec330d6df0b9ab6a75ab178c0b98498cae0a25049c84b6344d586441e47e743d23f2c0995ef3524cddab26d7482f08226824a78bf0929d0bde7a4f791d97204a3624e162a86f50163456d7e4aded44b924815076948e58a4023223b3dd78e0e5bf2bb5bfcabde9dfb1a372e4cacd0fe9685393b7115c8331288986aab63a5fa0359c4a039b77889689bd2aeaa89a6dc47d8d7195bd1431ed957564efb046c4e457df17af7356bce85ccdc16687273f150a23088623ed9d3f2a7a56632a8d5616d946bcbbaf90900fbc35146aa38661ec7383d84c9f39fd1c81fd724a1674ffd97d4ea3205cc9b059cad00aae5918b779ae5b96c677afb83d0a60785d6c82b44f136d5df52c728ad683a2f892579ea82b7ed25b2b7ba821cd1f9b7c186424ec1eea06aaf2bc0fcfa1172240a9df01b80c5d4755bedb74c613d6b672836ec8329c4efc041cc014c8955a24a59fb9aef70f2aed92ec2cd5e16e450a459d0efb2b76a694cf577f6fadeca3ee0f3d0a766303e6f1e3088a9906e25a6491b239ae9d6a9a842594ea2c164e3ae2dc09b4f10712330c877f52390d7408c0f181611d658b3ae2eb123dbe6ce2921ef3e088e0f1597b0625496739fe0a70fa425aa96da9b47e9278dfb9a6f76bfa6c32e534daea67b844d3e5a94c3966b9bbe11c317df41c465995737af5574c0fec6181a68852aebd19292db870feb8c677fd7d883c9f94ab7d847fefa4e29ad3b9432640872e085f75f379683137621c32294d10200e41b84f1d1dd4e972ac10756c789b7ae67828563e772efb340bd67f59a80f984e7803f42fc32b904f7c202120c363bcd19f2ad305a5c89670f83d2090a8ac9a0df625e40d9034440b0a4cba3f3a084a59f1f83e8279192082ed459e1b63a84e7c865e6864ef5944494450d5b4e7328e1faea73ab9e5c66b81774be961e114b7ceeb004c5800d328beaaac073238f7acb2e089d2e3a9a17f2950e56d861efbe3ae55eea7b5cb2f82e4cb3c2d7ad58c9de34755823392964268ec0a90451a37d9edd32618e7548db643f3078a62377751d186e549100762e40306d26930fb18b6d75d54e1b6379c1bd899da4c56d48183119575581fb7fd8de83f05521bb565af0a44103bc83d5487830b75e1c7431990dba2be09a8cd6adbc9f3cd8e8ff6960c56979f1a69bdfefedff51fd8b03bd32d370d046b19ccb27a7be2c673cc51876eb3ffa90dea65ee74ace2cfcab735e3abc59211bd8704cfcb74a88e488261e4c36bc83bfb03b06befdf9441b45fc6faac27fe7641a7d8e12c03343e2aa6529250e917f8af49497500220ced358438a64b85792795565497b5a4546df8a4a2b958908e1ed2bf871c02720079a5087d61a3f27b9657559d9a52bba55db848d2054fd69fbded96d00693a455f43f4dcf49f83e1c6a519943f0342524bf5cbf4f1fe23b6722b49458455824797cd224fb8939e3f95268c0fa4c908cc1c3e2c46f342ecd376ca5c5e2848722023cebf2a95e584829867fbcaded3735c00d0a8945d78c6488b47a73862632dcad93ee0f67cf528c9c114e193ed69d8873f936b6fa0119dd3dbf6160f9aeea6977afca718532c50db971d7aef883b867a5df714bfc262fdf18ab1c74f23087e78a407c0521dc1c2850d736820202e4db0f2a9229c10b57c0e8ab4df75755893fe35f9c8a844ea0c0faaf0cac1701fe4d85c5a42a6ed1be3e9a805e1a4199ee590ac557e203d6d6357cd29c4b88bfc9934c5f9b00f2b33a435c17668d7fd14c318a355bdff35bd1978087e55127264675c06f61698f1c903ff434008601d4bb737e4342d0905bdcd8f8bc04b34ff696d27d26afadb09274c94abd4ae6dee74c0b669c75f52bf77a3db0157a870e986771943e51633d73e5245fd57da3f6bce655bc0a9629c75a456aa96b7c93e6dcd027605a4816283ec44c1810eb0a312417d3ee24088f5836525c07d5d896e552f9755874842ae88ae4fa61276e0df9632e1167fae77cf1d91df9702b8c4fb181c0768149f1009a9708c934ffeca42d5244a72bfbc99ab12fcd1720f0102957cdd2642d913b7033ef5060db6b151f999717007109d86db746d11bcb5c14bd51038244e07bda6f52fb8a8e36b655fee13462e1e1892443f00b0bebd4eb33dbf8c83803300b9bdb0e3892ac5ecae69c0549d46dac160cd61d8b3a1c220f314d72011e38978c16aed19c36946d4d209e8bd03995ae72fbf739a1846fb860ef98dce4163d156cb48ad6272807ab774b29fab69057e7063dade38ed064434e23090f30c9c4212e48aa24dd20c94f9c33cd5a441c4a29058fd6f841dd436a7c2c10f12e1401bedf983df5fd2cda6c53138dd2e4fc657046a84bc3bbb4e7c421e5c8b4830e565542f6ca7adf71f1394fb4915a78c0cfc010970c1bbfe74feab03adf9d12434b14ab54e06cce2a854081d1e9be3bad40edd7b537f2b989c0170521e25169a81ab35e3d150ac27207c4e2f91a972b9f24cef887206c236fe0d5fb3b81f1a388e6a9c5cc68f7a8fcac8f1374c524b09a90863a90a638e95117c96f81bb0fca8b03bec4c638013d2bee9ce5b4cc2311994e5fefb677dae570b71eeaf3422ad5b71961771c2376d0bb55dc77fbad267a47670265ac9aab355fde9215e29c85cdda794fe27e147a5b205da3c8787347183ac20a5946a94525b84693ada8146c538528acbf3045b977fcd9ff11922a3441571129a4e912d322b9bd1f160f5d2ed121f2ffaa4a87088e529d15872caf4e037a46da6c946a42aa3afbdaf30fd4efa80be9f7e6659c6ddf50509ef0571d33a682da56ecf0a1062440d4bce8c0634297572c24fa9860509337c590ca2c14b2506499f398ad6bf4fdc4ed9edf90039a133af65ba6d1dc4fda87cb69e634a837a4b54411c4bb35bd45e08cd2929a75e0282fa63146e925818b02a1705dba0c9c78052459db733f5f767337ee7152aed8587a60d41c0874589d2664e022ba2040be79d3265b83a406383edce993a7af1935f3414137854c11884b8614e4b74e17775897b40a7351caed74ee089c3b0033b2b6cb85a8a4b7787e9c870adaec374e2ca68e70c2a9bdfac0a5537dd7b7fb07ec7da3310e00671e11ba27411b3b2a17609811e2816d04856f2f3d43d551ac768bc9d7efafffc13aefde0642fbc8ac61e8147910aeb1a5ecf17e211181cfdc8055bacefc31b0fc41c14c86fe2b7143ac2e04f1dc768627a3bc4ac22e991dd46f0598f9ee9269ada8673c40fa349616f77d0c32563e439fbb31a267c73e3766169fd0f25d7c6f42784c08b37cb41cb1f06444aedbcde468efd05dbc478a2b2f54bda335279cc68fb9577c745c3daf4199b993f8414e4099e017631c67abbacf543485971651c1f2dcd3cb5db7d936cd32b1c3c1792c4e3c095a1035ef3135e2910bac2499f40b3c66fea7679427cc1ff8bdb62f9698bdf1a48ce4953d0973d74f1afc2a039266c6213d67a03887b0c6c88c20993b50a81b43eb32b5e9fac738d171b3aff8fadaa90c5bcd033032d6d6753023e266913aa2fae19f2b04868cf92c91554ceef4335b28ad4130fdbc6f74cc41b5a438edabef4bc10af5696f43d6ee5944dd726dabc3379de8e039b22e26fc0ecda63495434a468ba1aa66e83f25b55051f4bb12f53e1156dbe670a7b8e49b5ea9069ee2713a416feeadf59f7dcb51ee3bec5813cbd59c39001580e9d4f7c10e13ad87ad21626f305877c1bd5331dab23bbc72c13bf540ecaef93301fef132aced77b4b560d2f43edc748e771a76abb0310bad1b8be04aa3c6340f5734433b179e0fe8e3650cca76b5c3fbe46510c81c6400cd2f272310aa81ce59518132beb7b42e48fab6ba3ace851a913470368a060eaacf8d4e4fb4071c2ba64e476b6c666a34d5eb590cdc48ab0b18bf422f0e0877e34dee038bdbcc845b95405112187e00ca0c13be9c6b38d43354e6efbc6e64f8da9625da5068086dd62e9d80800bda500c44198887dfe3dca8c16389b438de5a3dad097f805a675e57d7d6a654fbc45b566b4249964e169f203557ff844ada2ad952c4bf2392a1a6841ed0db7e10565592f62929535082661c1b85162757427efcde816cff48fde808e8629368cc82544bf650fc3b505f13aafda9171f29e706f409686360b9aa27842e5f57de1c8203e1eb4277d663f444551022fb5f140c8b201fe0f1b19e837f318735a745638556d535d09e99263e32024a38cf1427a00ba73f28bee95416b4cd815ea35c801529058333f8af25551115659b2cb6a6b5c9b1a8b4ab05b312f56d5e8133b95215e825e1e5d3326cf45b8e494a94ba2675cbdb024c656dd57efa7e52ef15c1c248458afdeefd195b9b645c547b97549e4e2a9306039674aa13a42afbffa815033e91483da444038730b66f1854652b208dc61452aeb67df83a1a40d12b660139983bc5effae0f2ce44cc3b7a10c551bedcbfb47106598faf175b7528a459d175d4e01280ed1218b8ccde68bf2ab2ecdaffabbec7d3edb1dd06a6794094c6f059b9756f3e0931b6baf3be07c184b305d749fd0abd8c4cc2fc7c2d0ff2b72c2807968187423838b62c810f6c1509d0e39ca1ccc06ec38ca404aaad0214b1dd9f5a123858e879ad17e260d8316c98851701cb5da5368f2ed0758a54276d5f30c44c6a12d045a4977ccfc5057b9eb662b326c692516e1c15cc9b6e3abdf207a0a79acda15c5fe2c9b57da9b86429a65308c5d514c1e4a0c8777a7373928b3e4918cdce6004769efc91f416d45bb6e87f8faa73b45f32ea17947e7df9cbae360daee3f1a116083757eedb0793b49db7644010d6a7aef45d883a9b4044d4862a12b3403f0a9ce3281f72a13f2e6b526cbd991ebf527db6d2883ce6ad969f91fa09d1b4dd6262f9043c41e3616d85c509009568eb4e28d354d47b0b4fcad7e32fd88a0bbcb8db5c2e85da21795b3e95045b8c7dc9993269c991c0317959d8dabd0ef4ec1d160c4dc1ac48fd50f1a14bce0a2fc0a3e01c5bbf4342be6097e919cfe7e54b28a894d2812907dd8bbfcd792fbe1086d7c3b4d856140abd3d5a70c98ab079f2ea0c9048420dde9382d89f906725523cb149d32fe497f000dce3c912224fbfc3163560f52c5b5aedf57239bcf18bd1b2c3d5085798182c2e7432e9647e78ffe48b65201f10e501e2391730253d5c19a46b6539489f518d6d12258ceb67a5ce5326ad5fae2694a2047d57258ac015bb0424b93a303c12eb512de4c3f0f63e18488e9c9f8678d9e0013730155abd6c34f082e55dcaf68ddcbc4bc033367b0d794d63c1084655ab0c5ba47e77e7b87d41dda1a22e4708459a7a5139e3afe38b4c1d5f4fede0137a5a629ecc36291761d2eb535db80e8d5c6dbbd8e97ef07787607975c30a189fc3f74d88515ac7e0a3e94a299c63b346b0bfae9187e24d6cbf48d0efb351a7a16e5c9425f0715639ddff429c756d12f67b650142ec2cd5304d64da3ee0a52a609ee82e721a40ab46b8d4ad0971d79e21935009cc6105f8ca1d6d4d87288128f09a1454c2d56aacfc07717fa0356f22b2191373d74569c910bb4125eae7a64bb8c4133a6a8db4b182f7ed780e830f40360344d78368a84e514c87c027b6b2d7ce53e9b8fe07ee4a9eef841f99abfbb748b5ed81da3009fa9f9d69f7031d61d03a8e7fac529f7cfc22e8a5043b5e231343c322fe987e8cafce3dacfc4738801d019be6d21705ec92ce88aa43028354e8e232aabf8a16990f22edc45c664c282b9a5d38c48c8bb1cb371452693e41162ffa732cfb520b27204509caec860c88923ea6a2ca5ca88cf6548d10c3d072b58fb82234bca316911ac5b315149517929cdfe32df8d5ee2fcda770b5ce09de30eb45604e878c541caf6a76f60d69a5003d021c8de05780f7fd4e5bc74f55854b4196442c2a41a8824dd9064d91001ee2a7ec195d2816745955408ae14990df67b176dc5e5b0680eefd88269f438262d85601df0fb2cd9f294be6dac19bc44c02823976d59944dcb8297bbc62a9695585d5d8b1e13cf594616f6303249de9a68f21f2b9364e5285c058633f8c1575e1f3e4f916c4ce592a8aeef8ab332d1ac191d0e94191397a5823d504151f5a49df4ac81fcf90f0883b7f836cb25238c9045756813e71fa23296dc270e6947382d0b6ce0e5ef6ffbcf8c349ecc0d9db4caa9f165c501fccfbce97cfa987cde2fdf2de01c9397ea0d8b7eafeaf295ed37e5020f02ef33dc9b642b0693e1813f06a61a1ff7511a86aefc840d03225fcb1fcce82241651156449372ff99acd7bff326c99f2d8c1eec12cc31b398a00fe07d9e2f89ced5936678bfe1bab1a8940b5a61e7f445d0e9aa5995c66f9921e04cc82ae07aa391dc7667c70f2fb3fdf6aecb3cef3df9ef71558c8245aa822ad1aa13645d1edf031f30dedeecc3dbce87a82e26d2a0e636f1b938583f30cd6699a100789516f341c02e1153e516bf6e14d7d43203d08b9880a526cedaa43ff45e2bdafee9c7dd40acb0c98a2a3d7013a8ac37ccc1aa4df95957fe106a0674ca5b9f57260eac8689c7fee87fbf5209e6301587d06c6c423d9e2595a8268dcb678364845dd4f4122f7c0b73d505e22e99a72d6d89955bfa23f8d655dd1938c4d86cd99c9b98a45726cf0283e30a63902da93aaaccd34901c4eeb89ab5f8c29661c28d5278b6d30bc287794985379b49e5cc90fe4793be74a1eeac28967c2e25e6b7cf7029f792e7856f3f6c464e6759c85236cc6a181670d15020de42b9cf7bcb07c80c0626e8fb592ad35d1bed75d1efbce11f6af6e878f171aed1f795aaa50d11848df9cc596763e36c426c777fbf44034b412a6d2140d0b4604b48fde141d69c06fff0d3252fb2b613d0b57ffde6578c9ac08b62ea1565003c7e122501190c736fb3c6d5e87feebeba06059bc43ef4ad0b58904aa4cd369bec2498529b33790a63e49cde5741984f52c36e7358737d275ef1ab464f7367c7a37a169a61fcce143efe5d949e2176210b5a7e91a2fa23eb60e08cf3b4593d3acc1cb1d1cf544060f462d7a132f6137dbd9ca4fb991d07d5cbda8989e6ffdc16e30d1080f8d5d904683f0c4bda3878fe3eae304622a6e0e4a957b12d2bcf7d683e5125e871ab45f135f2dca0d2e836f590d4fe902bbe03366cbd332fe8c9c1b92fc632b746fc17a827ebb35fc73ba1e57333d97124d543838735c05063d9be42b63f18787c27366e95b660d36f71692f3440f19d6df89dd8957834603873eaae0bacf052efbc1560a4857a5b5e00c85cb2bbd579d83489de763604c2516d93bcfc447dce1a4547b07f5eef30e7bdf6a229bd829a4eb7d0a1816ee11e849def07596455bc723dd830f186d58a54b19c6c06fa82b8f5b23e3818312387b7e9f1cab8780b06355a94f333cbdba41055e2126db707a89b11444130e42bce214f35b497ef0805579edf4c7261ed8cf9904af3f118d6414b1332fe04e02ecc35401bc4e2decc343ab3a13da2d9dc6848ed012633122d7552ad1ce12dffe3682312945af4cfd44adb0666e70563ba8489ad305f50cd047c91c02abb5e9e31b4a9be6cb1c0a4e454dd93512557589dd14a1e1d431ebe8df3bb417ce833fdfd949c74c9ce4c63260d1569b08ad88e2ad41e0530c84ecb639c241ef5af714660050ab23a1f883b5ffd2389babe6d3623c9d2801caf6bc9f0d193e782597f4c2573e296d6a82e39676d46a41d3646c335e9b40ec078496e5b3d456544a111f741186a16c0fa1d41bcb5cb3984e62ad2d9d628b78c2804083d152fcbb983b78ad1555d385fa1cf6e2bb0a452be66466fa1225185b9cbe1fff5f66f839e128d3529c18e008a7a3fbda37eb4f151184e02792977b6dfd9fa2f6efe7a13ef8c0dc0db85bbbf5d90ccf7274dbd188909039351865feb020df8cb4f6ec9ad56bc3d36a6c0ced78ddbd2ae6d2ea33ced1419f601e18b0eaa5e37435d37548845a3b4d1f9136c4aab43a4f8c24acaab86e4e30f2efcf83f560c91356b15d894ca4b8c7061ce9690f5a82e76ae355f9d96344bd7e00661dca890542271054bcd692a3a8e3d09b596de9e3eec1ec0bc5f6556649c529e8bb0d8aa8670ff90d4b74c608f5d273011b9988a37a44b36d45f901e9f83a098ef7dfe9229df426dbcfe37820dfa54c2fb2e8b5a8235dee245e58375b6c35e3701defae1035e7e18fd0fbb85970bba00f3e11d071a4f94a62ad7ebc8e2b2f2122e24a76a5953eaa5c16d8c3fa825afae7254aa50181bccdc5f5a2c55dfb99b9fcf3af79b71ee08b61ba5729d781f7c4960e1673d5a6590d2dc74108177bcec5efa8265f5da1f964023d810e1ee399c049fc3df919ef34d1c63b71ad594287eab0be430239f845cdfe64ffe94fa2014c9c5feded3dfda31027e069c6dfe75102d9d396b54373605f9ddb50e5d836e587ae50a228d870b7b0657e844ba0fc906e3dbbddcb29ffe0f64aa890f6e423cff90edb785089492a6592efd16905f7f89752a92aba3e2a74e9a8feff2e49421ac386d45791e6465d1afa842696886a4411bf000996f53b552988f844507906283b16ec34fef0777ae24e2e30a725748d968cd2f5b3dd4b761eec22989450256be62af70df5aebb4a7343c49a921d62c8e3977d73eea481957a38887cef979ffdaccb90a62eb2aac6f2759738b5297b303e42bc0ad7e018c6d08839e8b1222ae005f7d857eb22a0eca16e039c5bfd1399949c75d4bf6d7656cd1b060bc43af3a5d096982b9bf0d62cee80f736c4d499acf13a9bb4af2bb94ce88084c0cfd2a72be6c3d9bfa8dd37d5e1aa8a156d3ac2730aaeeebec94ae75795bf96bfa5179ba758058aeeeaa6063aeb6e761b49f1a1a8627cb635ea47621b2a17649fb2abcb96f9b108899d78d1384730006cd860f1a5d6cd7e15dfbb8ace3147cdd977155833a7219086c82d013ba761522280cc8274c6d7e8076752e6ae78eb53a27874a13d188b0ce89f2c0537a88afe4fab0de9d3ea8227c52120b116c2806b1dc1235955454020413c360ba3b8d87411c573ef97b82c849c4983edca3fbfbc265f7f8d90f5ff0783d132d05060463318dca272c4f7609234da5a5786ec2aace2713a029d500ebe9f25cbbb614b747b94e93aaddd80fcd6b066c73ae80ee6515ebc73546921ba0854f3bdf1deae22f118cb268a4ea78eec22d72f08c30f5fb17bd3f5c49834924b20eb0f7d7b03ee24042d032705ad23a77eb6ee6c2998b77777348878e27e52c984041d7a48b118c6840745aa097ea8b63404e570119f4781aad64cbb94fc80bb91fe24884b9bb94057d98e4fd59a7fe9bb23ce612d2dd191e464ef9841fb8a4ae310c62bae086178dad81c8a424ea7b88ac7d18b35f4fe0ef8110c17cf5c583e527871c1cbfe5134c51544bebfaba04e212b3c325c0b4c106c0c8a2b5d8d38ad419156a1b165ff180f161f11a1998384d13143f4d41b30b334303ad64fa3e2152c9becdb4b6ea09b37640c27d62d2dda467598696980955c3586e24d5e7a9bd23f02e597f5e67e05b537290d455d0e76fbf13d60bb9a1b4466997be4d4e1eb63ed6422eb5e39942d7ae7e7265a9dd484f175950403fe281b9a17a84c186bfb8fce425be480f172d447dc81f9e2c3a52870bf4899435a4e7150e98a38296ca28f347e04b270b6ee653833e7471160d7a4800a6d34b023f0daea554985855f7cf0121eb4faca7fab1084939b84ec7066fd33f74895cc21ac8bc9197433bdf581d7e5f62f9c88da4fa97603571cc850882206a57c59cf07c88f9859aa717955efc731729bfbe340fd98289b20e7fd15c54e1c78ee05d074ab03c1bc98ce31f0d0c7f0abf3a8c7bc22ae0c8c263a2f32c2383e6cef2729769339c6fc866b906ea039663abf4b14e764dad7de51b2d64f4b8c0770d3af4d3228dbba812ca555b6681e7b679c729b6949308b3ff988a9e502135a2cc8cc2000660adb002a1b84b976eb7b3b6a3e2b04b4bb8360ceb5800651c030a3300f77a7e051da1713aa76e94fbef54ee6f6b6d2896af52e4f619f5dc3cae0349127dcf31e85dc3d172d8c27bb195c71c95f240752b8464964d1deb6f1ee8755e609b9c1c0ccfde4e5dfc484ff41580bc3875713bb567798930099a3c42f3e1184e7790aa2631caac446226516dea1900bd4c69dee47fe2b72191aca5702eef3e51b7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="re" scheme="https://wd-2711.tech/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>register-mechine</title>
    <link href="https://wd-2711.tech/2024/03/11/register-mechine/"/>
    <id>https://wd-2711.tech/2024/03/11/register-mechine/</id>
    <published>2024-03-11T05:53:51.000Z</published>
    <updated>2024-03-12T09:05:10.217Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="00700bba2da1554961b6f9b7ada526e8d6879ca56e1554c651dceeb2648b9581"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="re" scheme="https://wd-2711.tech/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>recentlyThink-5</title>
    <link href="https://wd-2711.tech/2024/03/08/recentlyThink-5/"/>
    <id>https://wd-2711.tech/2024/03/08/recentlyThink-5/</id>
    <published>2024-03-08T10:00:53.000Z</published>
    <updated>2024-03-12T09:05:10.215Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="450da67e96053cd9796d4b10ab31e035db8da57d0997b71a42ccbacc07da9e2c">12638f17666ababd49b97fc9c1b42517d56f29967442912602e188166eb4611e2a66732f797ee1786bdc1142c2cfe9c56e335befcf92078e003726af61df63cb65120dc9de38039fc73aad14f5ba952039cd5c32eac1d9adf6f43125119b71479a2aa527bb5ed2320d355c2260e0ab04ab5a06907911d0ac5f261a70dc85832ce3513f8b609470704b5a9ce416f93f3d714419c2821875045ab0d12c4a9cdce590041a0a94e23a4e692eefcd76595940e78705af5048fdf3a0dfa5c12b4bedd2e963909a774bee49fa28acdc9ff3b9bb04e356d25d1fabb385ce8455bc8f1f2f92e1de22480980c186ef8867abc9aad3ca2fe3aab061d3e9de3a367e3233ca141ca0d0a7c10582300fd5462f26c7a22009dc115bac22c40d80374c847afd0ab9556083dc7d0976a52d99407d5a3dca84a793bd3b3eb63558a9d5fa3b8f7a9083ffc866df21f44f2e62254b5734d5f90b1d4cc0ed7a083f0f8bc51f095ceadfbe895a9767a4458e15584d30355372c8af47cd9179795994d99143a21243c4ee89304049f47e1ff1e1e91be4fc1b83c4df0a3b93534072858bc7db2d4ea4844803a5b198301d5f6c6cc5a413f42ffcdae518cbd8a285449fd15424cd80273caaa4831ffe920d2171903dae65f766280c8a098822b68296ce923f051572d36cbbefc1a6f347777cbc4fb92b833484820f532694991c228881c97986d286591a12d0</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="杂记" scheme="https://wd-2711.tech/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>ios-reverse</title>
    <link href="https://wd-2711.tech/2024/03/03/ios-reverse/"/>
    <id>https://wd-2711.tech/2024/03/03/ios-reverse/</id>
    <published>2024-03-03T00:54:41.000Z</published>
    <updated>2024-03-10T03:03:22.528Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IOS-reverse"><a href="#IOS-reverse" class="headerlink" title="IOS reverse"></a>IOS reverse</h1><p>We need a <code>MacOS(or VMWare Virtual Machine)(Version &gt; MacOS 10.15)</code> and <code>Ipad/Iphone(Version &gt; iOS 11)</code>. We can refer to <a href="https://www.bilibili.com/read/cv23382698/">link1</a>.</p><span id="more"></span><h2 id="Step0-ipad-7th-root"><a href="#Step0-ipad-7th-root" class="headerlink" title="Step0: ipad 7th root"></a>Step0: ipad 7th root</h2><h2 id="Step1-APP-unshell"><a href="#Step1-APP-unshell" class="headerlink" title="Step1: APP unshell"></a>Step1: APP unshell</h2><p>Ios’s App is similar to APK, and it could install an app in our iPhone. Compared to android, a more strict security mechanism is used by Apple, such as ASLR and encryption (fairplay DRM encryption). First of all, there are some tools to help us:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. MachOView.</span><br><span class="line">It could view file structure of Mach-o.</span><br><span class="line">2. class-dump.</span><br><span class="line">It could extract information in Mach-o&#x27;s header file and generate .h file.</span><br><span class="line">3. MonkeyDev and pod.</span><br><span class="line">It could do dll injection and hook.</span><br><span class="line">4. Hopper Diassembler.</span><br><span class="line">Similar to IDA.</span><br></pre></td></tr></table></figure><p>App files are encrypted (fairplay DRM, Digital Rights Management) in many situations, DRM is similar to shell encryption. We should decrypt IPA file first, but there is also a easier way to do this. That is, directly download decrypted IPA files from <a href="https://dumpapp.com/">DumpApp</a>. Otherwise, we need to remove DRM, which is also called <code>砸壳</code>.</p><p>There are many tools to remove DRM:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. Static: Iridium, fouldecrypt.</span><br><span class="line">2. Dynamic: dumpdecrypted, Clutch.</span><br></pre></td></tr></table></figure><p>After using tools, we will get IPA file. IPA file is a zip file. Then we need to verify whether DRM is removed. The steps is:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. Find IPA file and enter.</span><br><span class="line">2. Find mach-o file.</span><br><span class="line">3. Execute otool -l xxx | grep cryptid.</span><br><span class="line">4. If cryptid = 0, we can ensure that unshell is success.</span><br></pre></td></tr></table></figure><p>When we unzip IPA file, we will get some files/folders:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. xx.app.</span><br><span class="line">a. CodeResources. Plist file, and save plaintext hash for every file in xx.app.</span><br><span class="line">b. Assets.car. Image source, Asset Catalog Tinkerer could open it.</span><br><span class="line">c. embedded.mobileprovision. Certificate.</span><br><span class="line">2. BCSymbolMaps. Symbol file.</span><br><span class="line">3. SwiftSupport. Swift supporing library.</span><br></pre></td></tr></table></figure><h2 id="Step2-export-header-file"><a href="#Step2-export-header-file" class="headerlink" title="Step2: export header file"></a>Step2: export header file</h2><p>After remove DRM protection, we can export header file from IPA file, then we could find hook point. <code>class-dump</code> is a good tool to export header file.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class-dump -S -s -H IPA_file_name -o header_save_path</span><br></pre></td></tr></table></figure><p>To be continued…</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[1] <a href="https://juejin.cn/post/6934667546301825038">https://juejin.cn/post/6934667546301825038</a></p><p>[2] <a href="https://hello-david.github.io/archives/82a2b295.html">https://hello-david.github.io/archives/82a2b295.html</a></p><p>[3] <a href="https://juejin.cn/post/7166220484810375176#heading-8">https://juejin.cn/post/7166220484810375176#heading-8</a></p><p>[4] <a href="https://cloud.tencent.com/developer/article/1688063">https://cloud.tencent.com/developer/article/1688063</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;IOS-reverse&quot;&gt;&lt;a href=&quot;#IOS-reverse&quot; class=&quot;headerlink&quot; title=&quot;IOS reverse&quot;&gt;&lt;/a&gt;IOS reverse&lt;/h1&gt;&lt;p&gt;We need a &lt;code&gt;MacOS(or VMWare Virtual Machine)(Version &amp;gt; MacOS 10.15)&lt;/code&gt; and &lt;code&gt;Ipad/Iphone(Version &amp;gt; iOS 11)&lt;/code&gt;. We can refer to &lt;a href=&quot;https://www.bilibili.com/read/cv23382698/&quot;&gt;link1&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="re" scheme="https://wd-2711.tech/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>frida-reverse-analysis-4</title>
    <link href="https://wd-2711.tech/2024/02/21/frida-reverse-analysis-4/"/>
    <id>https://wd-2711.tech/2024/02/21/frida-reverse-analysis-4/</id>
    <published>2024-02-21T12:01:01.000Z</published>
    <updated>2024-02-22T12:42:20.290Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Frida-reverse-and-protocol-analysis-4"><a href="#Frida-reverse-and-protocol-analysis-4" class="headerlink" title="Frida reverse and protocol analysis-4"></a>Frida reverse and protocol analysis-4</h1><h2 id="0x08-Reverse-analysis-of-paid-live-streaming-rooms"><a href="#0x08-Reverse-analysis-of-paid-live-streaming-rooms" class="headerlink" title="0x08 Reverse analysis of paid live streaming rooms"></a>0x08 Reverse analysis of paid live streaming rooms</h2><p>We have a pronographic live streaming app with 2 restrictions: 1. Pop up prompts that only VIPs can watch the live stream. 2. Non VIP can only watch for 15s. As this app is shell added, we need to use <code>frida-dexdump</code> for shell removal. we can get workflow from <a href="https://github.com/hluwa/frida-dexdump">link1</a>.</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. run frida-server</span><br><span class="line">2. run the app to be analyzed</span><br><span class="line">3. frida-dexdump -U -f com.hay.dreamlover</span><br></pre></td></tr></table></figure><p>Finally, we will get 7 dex files, we can analyze these using <code>jadx-gui</code>.</p><p>Then we will begin analyze. Firstly, we need to bypass the restriction of pop ups. The pop up will call the API provided by system, it is usually called <code>show</code> method in class <code>android.app.Dialog</code>. We first verify whether the pop-up is implemented by <code>android.app.Dialog.show</code> method:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.hay.dreamlover explore</span><br><span class="line">android hooking watch class_method android.app.Dialog.show --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><p><code>Due to the app not being able to open and constantly stopping on the initial page, the experiment cannot be conducted. Just go through the important points.</code> Based on the result returned by the object, we can locate the pop-up function <code>SDDialogBase.show()</code> in the app and write the code to remove the pop-up:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setImmediate</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="title function_">funtion</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.fanwe.lib.dialog.impl.SDDialogBase&quot;</span>).<span class="property">show</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Next, we need to bypass the 15s limit. We will analyze the function calls in the dex file and ultimately find the <code>onTimePayViewerShowCoveringxx</code> function, this function will control time. By hooking this function, we can bypass.</p><p>After bypassing these two restrictions, the key is to conduct protocol analysis of the  app. We can see it in P218. These pages analyze a APP in detail (very important). But I am so lazy, just look at it, not write notes (sorry~).</p><h2 id="0x09-Cracking-the-illegal-application-of-membership-system"><a href="#0x09-Cracking-the-illegal-application-of-membership-system" class="headerlink" title="0x09 Cracking the illegal application of membership system"></a>0x09 Cracking the illegal application of membership system</h2><p>It also analyze a app in P239. <code>R0capture</code> could catch data in application layer, <code>r0tracer</code> could trace class’s method (just like <code>objection/wallbreaker</code>, but it is more powerful.) It could (1) switch classloader when we can’t find specific class; (2) Add a delayed hook mechanism to avoid situations where applications cannot be immediately found due to injection through <code>spawn</code>; (3) Compared to <code>objection</code>, <code>r0tracer</code> could hook class’s constructor function; (4) Could print class instance variables, function arguments, returns and call stack.</p><p>Before P250, pages talks about how to bypass VIP. After P250, we analyze protocol.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Frida-reverse-and-protocol-analysis-4&quot;&gt;&lt;a href=&quot;#Frida-reverse-and-protocol-analysis-4&quot; class=&quot;headerlink&quot; title=&quot;Frida reverse and protocol analysis-4&quot;&gt;&lt;/a&gt;Frida reverse and protocol analysis-4&lt;/h1&gt;&lt;h2 id=&quot;0x08-Reverse-analysis-of-paid-live-streaming-rooms&quot;&gt;&lt;a href=&quot;#0x08-Reverse-analysis-of-paid-live-streaming-rooms&quot; class=&quot;headerlink&quot; title=&quot;0x08 Reverse analysis of paid live streaming rooms&quot;&gt;&lt;/a&gt;0x08 Reverse analysis of paid live streaming rooms&lt;/h2&gt;&lt;p&gt;We have a pronographic live streaming app with 2 restrictions: 1. Pop up prompts that only VIPs can watch the live stream. 2. Non VIP can only watch for 15s. As this app is shell added, we need to use &lt;code&gt;frida-dexdump&lt;/code&gt; for shell removal. we can get workflow from &lt;a href=&quot;https://github.com/hluwa/frida-dexdump&quot;&gt;link1&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="re" scheme="https://wd-2711.tech/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>vnctf-2024</title>
    <link href="https://wd-2711.tech/2024/02/17/vnctf-2024/"/>
    <id>https://wd-2711.tech/2024/02/17/vnctf-2024/</id>
    <published>2024-02-17T01:21:51.000Z</published>
    <updated>2024-02-17T10:06:20.481Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e6770f6089d2efa5929f4858fc78e9c840ceaf4faca76191faf8a9daa57479a2">2c151d14a1692af99fa0c574696ab642630118ededbcd92b05c804024ee0b0d51dfa9d14d54bf076d10e116b7f27ea88cb454a981302ee60998cb6c0c5cfea240a216d3b484c313b10008ffbc4ed81e39ec1076cb87673bf00ed5188c4908a80ef4537e9129adbc3d95579b68615794254e5ea55f67300e79b6aef4e9e46e619b4afe985af7f85f96dbf13f2f92c792872794dbb6302e584a8ceb6ca5f69320993d227a399ea1375b88aa28ce84d5ca0424c54cea752f7994101fcffe0b89d2d560a2a9cd6afc4ebe7b9cb035302ca5bd6d1f15e997c1e5220bb91df919998ca43c9296d3e393f5244fd19fde9f8b9cc283e38999295fc578e3d173ff1404ceac0c1562aac5cf3ecf9de716d85c2c366cff361f1cac2211dbc0f34beeeefe34705fd60f527bfcf5ebb155f48aff1acb3228a95caed1113e2e8214cc04186554e3ecfedcbe3cc9984cf13ca064efe07d9abb03655487a7a400e8533050a9b5db0a40ac4c1e19d02741a4cd3db746bfff1709ca670e33fa22eaf33f0a01065af6a20b50ce0631406c660358b80071aa2fc53928f6c862fd8ed99cffcef7cc8260f24fd6025902704b2d4618052a49fa0e0253320f556d5e8d94ac78356d6241a93ced666f69a7adc051ab0f58e1c7e08d2f64cf30e7b543d54f85c8f13e6cc17d6a8140823117e1359b0b3c61bcacc838ce7262eb52147227a74bb8e9601e3c6b014e3ea2fb4902f625303857a4afc5e4a8f55c4cc073be4cf69caa2bc5148005519cece29ba817710a61608cfcec2702688c42981ea82329a7fc624d7e643b424fe761e4c30706be0ad2fda1645bc51a94728cc870105a47d7251e795b199f150556f4ea314b3cd9c4f75d25a5fcc4edaba28fd765acc7af38eac24accc403daeacf0f8148910f09165e496f66627fd30399d9e4ecd921e65259c7a4e7022b39ec38718fc5203f3ed95d181d9509e98d2f43c9059f34cb06bb37d2415b6cc69c625eba73cca08746ff0675b0f706b54d333b1241ce9031035dccfca46d83230b017ca92c86d63ed9f205c5cc7ddf564d3833921ad374ca88d9bfd314e4a97af750c033fc0145cbc6c0d9ffaa6ba407d390936ba96a31bc1d406359bb675d260ba93febfde68c4fb6346f08972cc6b1e97c10fa0be2817e2bac98893ebb2ce1d58c6f1a869cd577c77ea865b1e612c967f17047eec008303cbba4e6f464dd48627ac9c637844a63d15a6a96d748ba611ca86cfe9de51247dfac8b9fb6b43972290411c19819ffd5843d57dc1dc7559d9e981598265acc5cfc323f95977c456487d043bb7e6cbfb37cfadf7e0aad9b9a873b0245375648f1267d51b3e7ef4444bc7c939210d27ba647b71ab35794e589612cdf6996417d84b0522623485d6b4bb2c458302e213e9fea9db5d15b7d29f39941d5eb584ff4bd4659a9dbd3a988524c77b3703f1355f5527e01055741074ed10f9f8c76e0a57d4e2f918e1310e61ab6c67e83646eaa5f71cf9605a4b4b45e819bc5ce27b9918bea59157456738ef37e5797825637a31553a4cfa70ba23d0db75985342034942b8bfa0db1fcc1cc1bdd59ae766b0a79077778e05ce740350ac7c17357d24a278a97f102e5b3f76a6fa6a47a80a2b052f681b72c422916dd867801f49fc69e9b328fd1671c8294fe395b24a15ec2a3f23d1780b75cfc402a7b3eb72c06b76c2e0f391cc39bc636b572a2d30b72e8813f8103c2d17c8879526bd538431f22a39d51e17707464a11a34bbb13f1174d054cf9a6722b27147dcae05e4a9ec0920f331f800ae9b48970f7c4b5492c95248db7b76462802e3074434a7a290ab069e6e3050226073f97fee48bcfb6ff5f80097aaa5919afca4f97600fb050f9d4fee942e1754d28762b938a05999d5622f070e4b40e750c37800448ca3240de829fff0f679d23529093f12bc284716489a28437ff6eec3fc24c49b2064e4abe522d41be9175127a4dd2230287d9a5b7a994c0105ae0c16b0eea8ca861f7310ebd20a7d692f7180a8bc784f6cf438ddcec03a97ca1c028c5ba1dc72e45023aeef8831bdad4262bf8c54a57c11d2e9b32e42c78a0fd7cb192309410c91adf22c6c029118e5ef18fa1304d2ede70da768d03d04f45e7c720bfc514536d07615a1090c38b782e60a15ba50e66df51dae76880263faea8b62eb6cb73166d6532baa4883c61d33cc9f824619ac82abe566de9f07756ec62886138608f9864fdcd4a30d9254e617ed2cb2d2e9630b02c1ccdc2dc7685477af8b01078436abb0520f501982a5a5232ceceb9269dd1a7ccb019b7db3456551aacf01f4808a101a4b380e3b54be7f62f37fec1348c8cb16a91f7e050880b60fb1a1c9c9e79e082498b5661dd4fcbff42c7080c660f56c20b53eef605559045214d541214d33833218fe8740b4a28809af56451b57169319f64f7bc4a4bfdd3ccf5dc19bbf88f72aad1a6d0c21d2e2a399294da7e9854b555305575964c48ff31fd32f91acb21052182793eadb9012967bfae15be9769952dbfe8c245c7281d86baa10228676895265859656c0196f761b0ad992c595f1357bd1e985a408a2b5575fbed7cc0ef63dff971837adf1ebb17675b6bee31ea5ac44bbcf7ca1c1ce54b29b7330d0c287940ed17b03d2b59ca36e3f32ac71d2af9b157a609835f9d918f8d6e13ce91c3f072d72494e84678af09fb57abf00c618b573d72887bf5c45955b0d896769e90eebf751450cdbb5fd8bbf242d44fabd2837384ff6d6ea18b919cda93eaa55866bb74d29e79983cb04116799221388cd78705d16b4e5f960ef4eaf52fd5b427297a1176cff3ed5c157267fb27808735993886a90dd5ae7c0a60915248d43d5693b9781174632d57db8936c70857677fdc9f3a66612c19fc4191cb668c4a9fc29b5c62c1371a6f30e365519554dd1eea1c6f555b39ed406a21de306dd4780f74ab88944be34850727e10981b4c11ce42c3cf97f94ccee5fb69845653e21e1394b52edfb395aa190856b5561784b46c9f22313139b9f9c35fc2ac8a47d16f33066d5ab3421dbb5205c0add701a676b010de7810f7af1d791f32fc03963b987424995f6dac757b06c42d57d40484f88ad7f72705b993c865fbfc4d025414d77fcfa636479fca4159d2722efb9378fedd3d0e5c9d92359058aa776303155f0c1e9107b090f40201fc5b8d3cfad9658f97cab78e53f7c32c5118c2519f9eab3c71161bf6bfe28d3cc64a5f62936d5ec00bb9d7648601a19683176ee06770fbf312d5a37721325ac948070145d913f60c82573c2f2066251a99aeb9a8714138621612c13a62d7e7c403af4ccfbb2d82c59f7a9ac2a05c320877c9dbb3bf3ad7a6ee47b405d3a1cf7b109c53b35e53324079191b9042bdcc8f4f8be374da2f691e4c9bac1c8f6ae3733f017ef247ea300a9896d84fa0745386c63fd0e10f80604312a01da4204b8478e0bc95e0d7056676ffa3cb4eafd9c225daeb61d80224c154c960f3397a32ae83d4a22acf50033052c820944f38ab188d24a34172c6f20f461628efd9376ee77b722a1375cbad22b8df952fa6ad5030d5d990b1105a4bf51c2a29067dc1f7d0690249fa04bb3e31147a24ca4e7c9fb569d9b9d724090b94d513edc5db753d75817ec50a60dc64c9e6b758f23fdac8e2b096da9c34bbd9ae573a2bc9b535613aa57cb99d2f9b5fa5ad7e609edf5fc658d597949b735d2fa23d668f6e2c08c692c11d8771da7eb333681959254c6b97c27ae23eb82e18501736c927e93c719ab8fb5b1e9e1c38c5ee6d2f8ae59229b3551e9772361f5ee2e56f348e1f7eb65f1821ce6a244868d33c26e3a6c349f246dc97b6d78585358e4eea95c6257b5d02df457afa7156e303d549b5b2d14dec1b3e15bd68832d0dfa0954c9dc12e2cf320a638b66ae1a29be5fc872e22db6ca67e621b5b80adce5bfc2f2560bf52cc6ec5d7000bcfc4763cd943c56062c0906d53268784cc5c70fd25aab44852839b56ec5b42fc7ee13447f0677ed9ff783a522407758d56f477584b29bb35ecce88988a53aa7b86f2cafafa49002253996f61cf899f1ec614d3b4479a79858649d88a2296c6118635fc0ebc3d7a23d32e2d570921c156bd4f416c467e2150b2f882fee75f5d54b30b38cccac973564385eca4c39cd9dd74e4dc63cde3616dc43fe36e02b894d02793ed30f0fe3f577800844018feb3507998dfc6d0f2f1f36f802437f6a4130e7cc98f720635813ee73db5cf85fd57df1aa4974d637877e4ec563d2fffce2c30419a18195110b51fbe8320e00dd18c145cd7a1b91cc26110ae75c25b156adb9a921243d8708e8740d05e4292219fa3adc7f896f6615c1c6115a2ef061ce582a77b53a9d2b7ccc8f53173def174011d38eb38661963e6649aacfcea5cb1fae3214215d8f029e8674151cd4c3d7b37cfebd4f9bd0afef72b6803ef624ec152c330291c728aaa98160e2c6b2737161423e03e94495345cebc9651ed8d445df0cc35224c00c8672035ad5cd8c05ff8786bc499fdb96a0e7179e95e4e7d4bc86acd42d6dc2a533c8dc4a4b5b9e1252842df44fb5a3d7dc7a4c5869b7449754df4fab6655f2168ef6cbe41f786104090135d759b819da01ea068367253a82763aa3d72646f62e004e6b6ec1c7a44aef420fecc4cdc5cfc9fb02f7f0f0cbf91e4ccf32b45a51f61625841cee398f34dec4c2ca98eba43849fe38e5973b288922dd70d94418641ea3b242c3fc91927ef1853d0215a4408b841bca2f0e90e004f72b6bb982d8426f006b994669f4008e5e17d4d38a080e76910528ce874c3faff16d3bf341e404be3bbb226a9ee3c40985c79a4dfe4efb6d8bb585fdb59d823912c23e572802315ed864d00c9cd74cdde4450c3bb2fb75de6800e07f89feb35f48402d5105db086d8ed415123ad07898c8a9bcaa48a5aa5d813e224df56f92004b9589837df38523e49ec88e2e7eb042511d95c28b040a3b4def7d166bc17d4f76e9a036d372589aaa2a29e34ea7002584575363ca46e74050b3f12b76c02d2e234773e2fe5f04b7cc6b89df64041266e8ef2a9d7004080d3ff6c476f6aa4c9356e07a8dede1349dc49321f218bdd0cee86fbffa8536f5047affc1d6d1dcea2a6b591fc31c3ed9f707a5fad09b0792befb34d964ccdd5157fb1aaf6c627c4409443873c91b183f5089d10e0cab48c915d559404f4ebf289fb19e2f00cc03e1acb4fc37b25e4962abfa598484626e96086eb666f950844c6df7f0b4f3f2f7f0c64ae2a931d019eaafd24b9cf41385a7b7f1fb9b573fe3787a01e76a2c512954523e3d8123ca7ee5b2f331fcafe90ba533689c7213ffc544918f0b7fd1f801f8ffcdde6c3e71b473d35a559f0b7f22f663cdd2666b17829d9be0c4696db145c8c19bfabcc3dd6778ead67b63b395b8c6fffba95b76a41466a093d01d8f781b01c52b1668617c523b32ff47cda70a2953a5492c3275eba436e82facc9753d9601292b7e47fb678b39f3581370d4c125ad959a807b9f91db0ebf9d0e052f8efe64385f0abbd8136f2df359141aaba97a3d358294ca23525513e28d289744e385b53ca3ea04751f8765ee1782b33d7bfccb84b6469ff5e3da0fbb1770ad10271bd15d090a130aee63a1e29a686a9b8f73fc0bd0828063032af90d1a0e204ab3d040761b5def7569c1aed834d546f0a5cf30b173a07c53c84c4d705ad65569c949e8199e1796546921a8ae92896b99a725299afdb5708c4c9e5e10bf73a3fb07fd7b6c24b8c1d3acc2669c8f7c8d00d1f0c83f97a000c32503f8ab15ef47da52394c7154c7e7e01fdc9fb5d4795c07b49fdea472a654e664e4c68d19516a6502df74fc477cda2b4fc3d2fe6c8475b9879528e1e03c448acfe2b971143c1563221d537c832fbae29fda7a9100f4cdf954f35a938379e7df72dddabb581189b2da6f98ecdf8d654d94b38ec9216b4a68331c22270f6f17de5ed62762560c28e493be88ae556f1f001f606c0dcda2ebf2970823a361cfac64d9d3298a90c5144e7988ddec04135ae54c0fc7df64864608f8ca555f2be1973daf3cbe305cb5a0f7579a21eb44a1f21e76312a0f45d499fc90cd3cebc2ebe9f1355a2adf0997b5f29072cd3c95912e9daf1ca1970c83fd7e9e6d4590234b9b5bb2a9dfe2fbb4514aaf374c972dbc775ef3a447f32cac29f029ad6f6348de91fdd85c3d63258d4bcb72562a06c5584222cf9c5da77774ba2fb4398f8e0cdca36751cbe4e616f1d8230074990d5d998560ca7907fad5f5209e7754e047a7329e106dc3644ba7549a357261942c4aad62605b9fad7baa6dbe63f668a363702dd9b840f7b29fbfd3c092a9413cd3be3944f7e286445b84be710ebcdae27d41a0022635c665cab93cb37bd289af34fce169e2186abc99e86aa633466af3d53f25440bb719b1e8624a4394baf055164027c20c453b286be4a78a66fc9b92911fd7a4e7a898ec23c301818c31a20ffd8aee63cbc47675a22d68cc7ea09042c65951ebb2432bfb88a4fbdb42e242ee8fe86b4763cd1cab1a9f8258f8354898c4d832376a5d5e4981c9d246657420a3f5425011723af4849c118439e44758023088dcbde8d98ee2f12e99ff08d245c79f3b53ecf0311e5d430a1b7b64a87702fcd6f2d7348eb8f0d333e904f47759812d9e9f0bbb0c635aa16f01dff2fc3c41e56f9cd6e3809813965da565f357850a19e2a0aa6898e50372c80c1e74bc6a91bc407ec37009aee1ec7097b3220ee3d2dd2f863caee95cf5a99e066d13f56794f8535cccc90b132f1fadeeae8b103c84874ee506de55fd74111bfda887f5e9e1c5eee10fd7a1cec5df13a3fb006aff4828304e66011910e133c48b0e7a9a6598cb2425cab59093f0dddcf3e96437f27ea1c087f70414a97b357ced8515bcb9744a7c1d7459e61ad38d3f1a02a8c1a4dfdd331ed0036f04d4e5039a6f558b7e634d3422a30c7dfd4ceac9e4d7958793ae86c0a8906e7b672477356ea9e7198834b7d06972e2c3bd8bbde7a5487159fed55feac44a865916abcfd001ba06959623f463bea34ecc83ac72db2d5c2754ed476a45e24c46cc515126b0c05c518d5dc3e7743e8c3eb914aa77ed3c739a58b6fa9a8df3c82262d9d4854134910517a9e7d29b16047549eb1e935797e8155f8a3e40ff2d8552603b0f609c90e88c8a9b575d10b3b5d3cd606c2d14c02ade40d39e9a7f99018ae89e3c50b283394a1b1f972cdcd7dc6b5a5f03c5b85957c4c0bb09d24e2cb3d0a26ac77a1f9c2725c77bbfa801cf6e85faf62b06b24173563ed932761f10b5e34b6f3322283e44f15bf0eabdc91feb09bc7a9c5afa9bdfbd57aba283adedf88348d65d69b4d8258878e8c700ddb908733ff61454ae33fb41ff702ee547765c6046401758b6e2e84d0df13fb4e763f0917eae96965b5f200c29446866a4fcd3d9a073cc371a3c38c4a298c2ca96108b27eaf82a50707f00b0d743630f5829a22e8a7d9f5d383213651bd2a820f0b82f0f5ff4772b1adbfa59b556fc9f16392136f75aa3ab74faf6e6c57851ce163e7d2d5c6cd996a4ce1bc561b778959c80abc9e83e4ae2cb4906f9800ee783df14ac569941747ddaeae70f422b5f2627051f0512ca955ca036f5da467f477fbe85d2cf9b433c5b55a50e73a62625ef5d10aaa53f583909a8e9e2af0e73df7dcef12ee71844e300c422c2d06648176474d26c154550377a55394ea771e255f3436a9b54244eb1e9ff0f461127b80f0580853f46a95c7c6b973d5eb2c0de757d8c2987056e02c92dc7eaf5326abca90ee13646f50db9090da65aa7a01565d73d5bab37453d45ea6628ef658d29e7906751c8da5d63cbdfa3b46049f5c5203b821eb1c3e830f4620c78999c458a34bcdd922ad8cccf4c8705d29fc4196d08a9e1eca8fad942e5e3c63a4f0c80db991f980c6e482904198b61ca02a01497e4b6055ff8e6d8e265560919a9a8e5d6327aad4cab0368db91d919dc8e7fe8e3bccb77847a3db8ebb9844f6ec17607052a9ac918afdf3de995527e45bf3d30d556b42fed8aa65f428be8dfd42b9fd287c18177de540a12a1eda18e4a7e57b4f8783e59270b1752e6d581dc36c1eb2e9fdb1790a480b471143fd5a0eb9778a580a523d3582d1cf83c740082598bc6b43f6a5864b2402bfe2277979b3149e39589ed0d4a126c7b4ffc6dc154897b1e7ea612bfb6f0f80d90640d4769a09f7522761ae21701a591b3059875593f1fdb00484b224b8a4425e9fcd41137fcfce2d8237d75edaef346d4ca6f33d0aa10e65aaccad38b0062d0e1b528c4636df42680417df49280eba67e4959e03010e540cce0f7365ed21749606d79f7c1d0fb197c4272873f81626044d2bce59b04024b304669d7bc0a77143fb60585b9f4f09db3ea7c50790828ad5e8da9caa33a67223e3e39e4c4d51ffe6a62adad982ca2b27e76700ee01a64cc8e2d4a0da04859b8f1caf1620efc5a37650af3370ea7e320362d28d48bbd49f6d08f25b5bc1c2924f4801b902b16c2f33072e245c8bad773ac87d33d9348ed165af598b2f7b71c9bbd8c2441c0abf6be5227acda7b9ea56a99bbcc0a89d8c1cef8a56e7a80e01b9988d3f81b45d17c67f385e4f9198998e96e713796c7833b1a884674426cabe1ef1fe43cd73ab7841735f806cdc64cf379284a6fedb9f91cf2d85342db1c5e1078064611f5b1bbd470f962f880d5eff2fb8a8de6aaad0073a0cac2d65c0f6e31666781a0ebaf3d759d5c69686c492444e5370fcb223407c5a69e0a4d8f124f37f8e400449ebb329f10e897212ac28d71e2dae5493ace8643f9c82af609a09433e6e8e5e16c2787c9063414574dcd05487eb69af064356c3efa90e8fbc66855b82429a75fffb7b612f02e93d2802565d645a3b654b22054d560560bfeb9eb03b527bd5801f080cce751b94f00f09a6371a72a6b7a0719f76554b9d596832e6cb85313f1f8d6f734a66c7969b648c29a8f8f6bd8b9eb9795db652d144d960ad1f74b8a2db7b91e32274a87bea19db52a2caad8f1987eb316a68ca4e911b6892b972a890d016438231c1469124e19c3687b7cb3154c0e792a1d9df13bc9c18c0a901855986b1185b3f7ea536c6d372c59be610f184c69a394785b4fc5ed9b33412c878e50cfecb6335fd0467431bd67290d91b92687328f3fd2b075366163c0971a8d19b68ce87e5921366fed7c0c9bfce17133ab64a934edf72c46bdd0c2fed9e6ee2835079b8e1945ab1c11172c491209320b8ca93aa280e4d2cbea9d0584b812d7baf31d19eff7b9ea49c0a135d59ede02c68576fde02689524369ff46410cd746891fea845d67ece9a668860e251f28b916522ede6bf81e2f2f8f4f6c50ed2d98e90994ff28e89d78f806fca4467bdd29f93272fa253d0b86963400bca9c1c45b307c6dee0c71137537ef6f3f19b152241311d08f98e7a63f05303fb9f278f4d7db3e96811135162ed508522936f7108ebfc376cc248262ee556cf3a5d8c2fbaa6c1fe8029d422216e8083382799debcc8513cee27dc2e646d9211123ed8e9b84bea0dcf720f823fa7d4f422dfb8fc56f3dc61b472f8bf3f0251cb5aa17306633b70d434060529a646ed6eb26dd75eeede2ea3c8978c3dc51d13a4f9992b667104c559fb5aa4ddc4932c0e8d4f0bee1acda15fc081ed2f2f6cb14a0a57bd037513a79e15a3b8e785f8c9a2eeddd3fb9808d2042d1d47dce14a31726a88de4aca77fc4777fb83b29ef25a46570d41aeb05a70af434e110b6d0d5e1145fd18c921d79c8dc4f810485f129633858280860d65526de01931fe36da708ef386715584862a5e37fe7f5684463045df2f67bdc0effbe1055e59aece4a74729ca36214e41831b4ebdaa36587841ad23bf0c5a9ed1d7cd350e514fb90caeb77e6ae08620ba94c3f62f06b9d05c9f45bb3ee8a2cdb8c40cedcb425f9f388e2f56f1d0a0e2103739be21e51b079f5992968fcf406a3b432e5d62e3ed36e7ace232cedafe782840c15409b872f26019a4366523d48769ada2c86aab7d5defde08b106ca3e9b403acb9dde0939d1096ac4154e1e0c44681fa9ee3621cc94799c203ab761fec9c0ef56e400c3b0b377134d12952abd4fad2dfa9559db0d70e44cc05c97d8a517c73910927be17bfaaa930ee81b940aed2239af39385b3fe19712278f2eefa50c25661bfc6b96b15538e014a1251d60983d3027af99fd838a1a4009347272b7ca06e1db48e8ef321da5407e554a5aff52baeb79a05c8bd9385825dc6e82053da289cea6a0ae366824d0da45b6298d8c0eba266cc0dabe7d4a6f12b182b4077b857875db14979e1c3bb0e6bd280bb8833a7280dabea3deea75b6c5b11cd9f49d8055976509767e72ae12d39ada1752acb10fc8744256d07215c1d49157597b7de37c75ed7e87201cba4b0d8ed71a8218eaf2db63f720da93516cb113ddbecb00c6c0a7d4e2255a48c1884efefe3125717302c2fb0055923b69c4066540190132a2ad076d3614af30392c7f339bc7c3128165c815f8c8d3874f10317a94e6412e8fc129251294937ac65c7db45c2b21f938a2ffac3871a3dad994ff7e4d27a2f47f041b15f47ce766a6604e7575d8ad53cb24ef02b202fa6e5073f1d056189b040c334c25446ad9f44c5d5352007de5d0400b928a208c9b3505da2e5c9a12fc89c0e41ac0fca1377aece4a68ce16a0f6873c94224ce4a53d530cffd82370d641fea0a06f43bdddaa05dfa9044de7c59434802e629ef9f788d3e4d809f0e13f30730e2b09ce728e7eef9b26ca531c17e5707f3637f71e76b2c763ccb88a7378fa72fb8a7b89750d869429bd354a4d08610322913afe20132e0b00e58633e169434c0755c393de0ee9ec478bc028ff21e6fc5721deae73621b5a9f0ad4c04278597446e5185ca573e7d0da3c68179fb5ab179f1a8f1dfcac9b43aaca2a870b670f4b0bc8420807522122977c90aa9bf424ac28c67a176fa0970eee295759a39482c2039efe43dbfacfbd543e366ae9a2d6fca46656fc761bfe4d9557c50e54a0bd9e9ccabe093e7ea1efc8f62e2d7618fe23bfe0e57c5bade91fac7fe8b3991a5605bee3764a090a205cf0c174948b0f1316b2800080fc2dc917d623d49b964517da25fa9fe1fdcf9ffce39fed3e3c1b56f7b8dccdae7e7cbc286cc17e3d97ef5a134fa4f874079ac0320c331d1cc21208cc317a9e657a60a363dbf08854af47cb8640400c4f2633d0de07e5473b7beecdfaffe6e9e0a589146d02941d1743e3f5df41d8954059fbdaa19a9a042d8ddd7e9b27943fc1c94608a38b6b98f082ade7ddb59c0f803472c7f8c68e275c42be684b7869a35d690df91ea50261729cc4f511faed8406fa1d769fbe111ee5b0aebd73a34ce957df25278639526e08586e1388593baa4f3ba5be84bfa490f6e91f92aea60d0c8c1e2c43ca6104a9e3c6db200765282eff243c3490c4c9bb222f59cbf634a9dc9a8937922ac42319a0a617dbd80034c781711275c24fdb94680e8b79e5df413e7db9e7c7d2befe9c3a1dcbf873429a155b2f61053032752539ec4e2fd153490077069706579d18dd44980c72044db554bd297c0a2d0120994c2d4ffa023e9cd4fae921154cc3fa01c828eb6896431f2ee2352629e16445cfaa408efd8549992dae3f95d0db69f1720092a10cd794ccb67acb2ce03bbcbf92ab096eb35c235ae27852908414b0cd7cbb15c6ab15a949107c8f0f24dc4159a1c891269d0c78c3c8f54f95e45b0924123e9c566def09190b51d4d2cfed48fe76e9aa07265b7774f0196b8f1c772805a67a36711f03bd2377b0a7dcf22949d640b8efe41a34a29b1d482bd4ac5aa6d87bb1b2d83ff22ed68befa8e060fe252be6cc5feb1f475b0495a9540c4cb0acaec4db60ebea06bfb574d047a5965e050b3b0468107e0f35342324b393f03c9a41f100fa9dcff3f0dfc63040201a1e4edd6df983baa2e61eae02436bb0364a18c27867c0fe8a81ce5e8a7ca6015d0e78322676eaf8b4ceb7bebaa047e4be47107df5008739b5c563d926c6c15c6d61e8d502be51b25000e65d38ac3c9d45297acbb4b93e2fae1c26923df43f320578b7173c6c2e4780f712e6da45e5be41ef0402932eae0fdbb97cd0b6c4787ec7d50c3d20abbda8a07ff61020c303fa4e05b9ca29b1fb97247c922bc3e53e39fb78224a66546e63040f89761137e10cb9f683f57bb0c38de2b3a7e7023ddbeb8c5b16c248017b47e6de12746c3711236b8655afd958eab581aefcd240c71d635bba887ed397d6774b77b502aadb98d08710177319f5c3becbbf0167993254bee71eff5ad8a79186b23346d63fdf9399e10d9191ea7563073048979976d18a05fbacc6e449299fc63e55fe1d590d4d8ad32198e34073aaf5b9d743ca58a3e1c8645b0c82c99485bb8d46a39639ec4889dc61d3618f54fc3655f5239fc441945e94c31bbaf3df9bd9496020a4dc4a7e3c62b44cd25c2a84b21d2c2240ed783cfece75c2d1ab35cdf73fff57d0673cfed1f90d21604b38dfa8392b1a457ed287cb232a6c7c2e3f6702d9a753dce13f7d3a17891e13d9dae958bf0db25a6afdef2ac95553c73b3bc2643b8544de1f6bc1e5178698c157a25cd23b061aa715041643bddc9442767d00390e5a77d7422308e42cf9e189a59580ecd895a5639da312e7194e1b51e8b861d5440978ada330858c9d5aa48b5a154d9569ac99aeee39f509b0e46486621a614f198c60c26d81aac6b2c4df5e50dc0d343db86188715e820b1fbc884995c75dc0b2b18647f19fe9dccb853577cb11219a1b104dc5afea52c6cec8c5dac100e4a58c4aaeb8e1015f2ce67a9a8123a54b64dc82f461032bb18544ee77937ee300e8b7646fb5ca468496a84e5ae2298953e5de4574d3c8a908917bf6465be5ae80cfd22462478548ca6e82ed7893934d3725b5edb2bfcf96043c44697354b26a7382fb4957a4ea23ad512c4fcab05366eb6b1b98360c608e53426dba7199d9d49b64eefd4122cca31f13e6dfa9c320f8a3e6973e0ccb46a4f55cc48b66c9d55cec1c3ce4734b7707aad0d89d0716c8a3bc1ec7ba6fa31ab76772231220d35c693f2a0b0725fddbf4aa082e2186d9ae03be3aaf6ec10c7d5cbe49548b6fcc215573bfb361600020fd756cd4d9b460d091f9eb4f1c2517486d14613eb2ebc18608684ade74d73ea84052fd350b09d42b98f004922ee4edb1177740aeca9924845fd46e17667c79319d0d8f3903b241b3f902fcc96a9f3219ef9379b18960380239b33dfdd3f7c50ddadc1e9f4920f2d07f8e52e8563724fcabde9f853527a516a27636eddfc9fa42774f646fa7bb1c00153861bd1442d357d864ef027f17238f37c02b288d1c28cf4bcd45b976eba1cdda3b9736da9d675cb0c1f2216f174c2b2096d09bf9118610232626f392ecf9b06ec7ae5e331d4501ed58b9e8318be7c9f4d754da3231286283668fc1c0a6eb8df09f55d5f4750a816bffcc5998235b89976071ea18fe2974678cb41f0ce57f55d08afa8a9ffcb36a65b4be1718aca45d8e7f118b15b7e12d9f30e566134b950467737b0ba182e819db313cc1b2f9403e1b8a703fe588d40420aaebc6adf02058a9ac3a5933ba80b23eca312f60b0f4188e9fff646f86283f10d38664dbc9cd93484439354ce8d2e0f4e7ddafcfff2219e33300dede122641e03a7818fb130e2273906e75d0a6083e653d9020c74f45142042e8dff9c87a40525d1faa580941ab40e979734bfbcbb0e72da395950fcc9710f7b41198b47de6fb6669c737ed8989582087c0d8145d183a0180080118b6340939ffcb1493142fcbb202b86da79dd77073a74691f2b6969a4dc138813e0201906483e05151b889893f3254054114fcd9c586a9ee3ce5c1e30afa9619b52b6f5ebb2c8702dbf7f04adf2f0ba64b624051ff5079561133b762a65c42b2187f6e81056c86b69554148a97000bc85e10a22af1b7760e9c09258e49bf5dd53b32f10256be4e48ec73c1f8300df17f78c10c08eb5899472f68c6a74b9605e5e7ababd2d01ff04d6941d2764897b4a57f733d71da7660c6979e5f81aad262327dd8b2d64408f90cd1ebdffeec57a525ff8f603462bef376b1b7db7a97d032cd1885eb65e5b51174e2347442e1abe0f9a9829db286d3e722c273a925f6aeb324d5709deaa6aba87240078eaba9616d5eba23b8776416445334e45f262c6161b30badc6f3135e21f6b85fe6f22bd50cb4b289c7340eea2400ef01cd484afccd59cc59bea193da615ea8b61655e4df74b5ff12ba6d403be00eb86c5326a361db9f866e454a16dc4793d8c634c64f5aedc63593f8e7399ace9ad30952b10b53179de23138ce2b5d9aff6ce22c3047d482af7f315b45e69aa9a7af42b0273a792560da5adec9778dd0f51b6d0adbc3264d06354912475ab4380b32bcbedc5e5ac4ed25f3186fdd3a709e6a733572a4621767c549921b1ffa2deda45311833249468ce1d2cb3a964b752ffb4bb692de14f19806fb97ed2044220a8238fb8d12f89e0473a723379d06e07ad0ee8991ee160205294451e377de08184b83254a895b4036e0cbc0b57c9b1abdf19653980408312b6affd6d9a4482e09d9e47a87778e0dd07f77d60bc88723812f722ebf504acb9cc2a6410d38c4b1681dee4744922ed6c82370a2f867dd627fc9e35230c7759117a2365d883f5f2ec8bb5846b6a98b43adafa660b7f78cd9284974606c590b553414647c8fa7f9d9fa7be1b22bd6e79aac4d9f4ff3c750009e938d6374cf78286ad90c8bfa655ca073ab3a1a853eacea04556d72d59a43c2970ee12792c811ae9adbc537c8e4a28b8d464dc1a26d32fb70f88b5523081e11d8d350246ccb5d5a33002eb911ff15ae00cec6962def4154609259427290d03edf9ff017f30e197b0259d3e13e8399b1a11f98a6429de3a8b44035098a6d4579239e0d557b847c732357c08a34b098f66d5d2cbdd60c3a164cbee48d30a88872026a6e6d3de6edb8510e10917e1710855e07d665a74ac59763a331422abf3f9a8a41bf9d113083736c69dab86b531597dd5a8ba538795ee5a9d1ea88483399faab35de9b7b3c4c5fff47a34c4d5e6746c589c1096e2baac4c952c2ddd4f5fcd868874711792130da50e115c8f5d380ff4216a098c92740cc3463c1452f13a4d9942de5c59546ef7a2b1804ba22430046048dc09b2d8a1ff1030cee7d0dc9f7bcbf2e9704754cfc1b1b2959bbfda6413c9b65bb7c24dcab1669791b5885a14d8ede9aa9ad42e33411ce18361873e70b4873bd1e9f7f560a3b309796d2c647d2663c111d88c48b0548299fc01d7ea097d91280eaee11e6b825748b95742239c563f7d71a13bfba7365e7b9b8523598834d38e6d0a0224859007a4d09af5f5babb9156462d79a2dab05d3df82427ca71752acb6a2393bc7ac2b0401ac686648289566dd20304c657accc53e151973e72abcc05534da2407aa3943ae680f4c24ab1b71a256252353eb35caac4c2ddba70279c11f955ed8efe86c46760a2a6393b73f65becaf7e3f6dd081822ee8be4812897d916ab103ac3fbd93f556cbbddef70801f070da5afd3b30babe9066c4c1d56dd2ba1eca55a059832dff83fc8d500bcc7dbfe54e35817e01d63a372b1d513951570b55c4190018c4fa494945c82dfc1076f2f729ebf075a66c348357ce94c0fad4fde947b29cd2d771a6ef29b7debf79b35ecc33c1f1873723be9ee8b80fbb3d68ff822decee2d0cf5cb7355a010b9ed8ed02885acf52ff6c7aafb423d5012f76e94e61244f4bb5fcf667a17eb963f697b7efcdc58da4d068c80a38baf96673c8b143afb38a45761ab5fcf1d910f34abbb35af9972843dcae53ee19752b4165db0febaba07230570b415efe89298c4fea75708c8f6f61758a3b0b5c972a33eaffbdb6ba67220afa182d103c4b96b4fcc4c433b018d01bff52592beb7fcccd3a1cc578998811aed664efe85a329c09f806ae5d2fbb2bc2ba7c814806dbe452c79a9cc88d2600de8fc7448b0fb547bb17ee6b92103af47a2cb61b9ccdf679a818b4a33b73c9a5746dc29e89822fb33109ca00f470e33b54d113158d0f01be4f8c8bec3d599f3ff91696674b72d347321c93d23ba340f8ff9fb672a6d442d6f45ceb1bc49cbfbcefd11597a2f7e92b92805a628f5cbc3ab10477d4f5d0064427c5090253fb25b12cc5229c6df1fc5f145dba40e97dde3cf40681689a2c5f15543239cf6637907b963d3f3a191a2698173735ffcf9408d3246b677862dc383d0d8974aa4c07795efc933a5191c01e07da3656188d113b95058e8af6bce836cd903fcba31b6df8067c48dc35b35f9195a09bfda62b26b0fd51d979174182f7aaf8458725ddeef166d0e215618964481263de02afba4f3938c9e4c37c28bcb873a0387448b46e7f53affc7125c64418f74773d7a1dd04e1f19901209fc807d7f5c67f9de88796bfc9cf2a928a6a16070b161f3031675fbc2d9721f9511c68631320a7c48331830b545d736ec3cb23c557453b50cdf2ca83b38365651730b81186cf99b8c0b9197257491afc8ab0cf2c4357ab2d76ded27bc918a596516ee6f3dfc475edd831c3cb235091975e7faee91049a9c32e05106c818a8ae6f800417079577227d1369602427735bead77c30456ef046057afcbcc58800e3e68d463a384d4ad82ef05bcadb9be9b160a8d8627a3abd0a8456c10ba0aa7016c36880d70aa6c5bf1c4b50a8b4246868f48a68afc99cb7553dcc3f2d513f0dcdb37507c2a0fa651bb3a219d54d271addf5a7ece8c645391c1bd5811a2eece0d19e91c8c789126420b715beae246b98418db30d094e7ddb02224130f4af525194b2c57b0490c4be5d62a179041c6273892831a5a07c9a8fa3bdf1799cb01d2487631703f76e8ccc014b2feb6053193146e0ee0157df0286b9fb7b4baf1e4a3c6ae7aa1bc7a26e7ff1630a8648e589f13c4fa0a2ccdf1863c2bbdd59f47cbfdb2f82e423fd839b65412f1aab4a983202520693294083e82b0dd9b592f3b997d4b83fa92b87d425c7ef414144c523f23dd8d6d3578ef412f289ded9c80aa7a8fcea2c0a969845bef62b3dffda70ee191b04f0d3296cd2b1a84fda4f628a862ec3f2146a3ef436c0550b6311f31427bfe4dad020c94c2eba3ca4afe786aca9f4678f926b37c5b4b7d3a6e709d3c68e86f666f70c860f74788dcca602454f7810b27a83f615ed21e92bfe7164a8da133c33c1a1f6ecf14195dda72e18ca7ecf45c9b6d4156caa49a11f1700aedd26e0917423f5a812bc97fd4b6b75c673d2d93dc6b9a716931ab5b25a972723bf58348a9b4e4253b159c8282b9297bd26bf11bd7a35cdc4d93e93ac50bf9572d6f6a1f84d9c7338acc52c1a2d7d15546f91733f52008666d5b057f1b169fccbdccc02d6af409399c3220216ea0c827d49e5b3422bba6db4e0614745e1efab983eb06944f175c13071fe77b154b6d93474be7d089608b74be906b30f861472833eb65ca66ccb6b7cff302f2b3c7cf3d5acb10c1dfe3405ccd259c3bb3e921e0b307d833c07a1344ca1a8cbfaab7d9c688601e1945217bd67b367edac6ac8578101e77be507c0918b371df96c8538a31ca149d7f7dd6560ee8265dced6f1524eda23a8a2b2c718f133ac527d12a7e07dfb14dda5fbd55c43b2f9b8ffe10bcfd5424c9c230f0cc9d500770a9b3b625206ca0dfa5f13e0c23d39516c3730ed282361da12fc0e795403928b7136392d2ba1bf333c432fcfdf55fe80e9dfc5f27117b21f60d29d41dec73b5bb95dbd43fcda68218891932ff6977199ca456975e9c71282455560d5922ca6a513fb7ada5e4abb4698c20f4bae70e9e7ac680dd5cf93c123405998c2c082260600e7807b7cc4307adb68f4296b21fe285e24ff3959b8a7734b7ff1afcf71e403832ea25310cd99f19c9bb8217b923831cdc88d0274b5913e6204e1b3f56ca9cee00b006f0cfd7f214a86fc713b64c887829da8220d25885da234868dd38ce4b8ce6d2d6be9750383077c74ffad699b754408b2364c9b5d609a35f7b836e7e18bf1e47e201651ce2c2c882de8fc48e51708a777b11273275492e5f515e26b12bdd6ffb09297261ae4aeaa135b66fb12fbb548680d999195e451368dc55a6f8843136fcebdb03967a6dd491b8b101685a477712750d7d9a4bb0b57344150e9a9df14c3618bd13c0d2eef382038921f93955ec23d03ca3bb9645a284507ce361b423bafdbc6c9960cfebd217da776dcc46b0e85811074ee22a79d8efbdd83cf7a1a1fb055b7cb52a6066628f1f9df06f28ce7bcfee2a6c7af586ef52dc82804f54dc68ff9b0e27aee5308b1c92ef4cf721c02755db34c1ab332fbc436d335865b6c341f36651544d192d416008f1200a2280f28b79c91b150393a7995808f3c13a7b5bdbcfea0d616f4994b9a21687830198027275d313a6bc86f4c80e555f018827a72f5e2d81a86cad86bda4ed4893ca8bf2b4a79eef20715f5d0af676aa3a778a5201b5f479e207b8808e2ffc3dcdae24e69d63987b7ae209d26b79e542491258ae5421a89a930cf37a2b97b9168519cef49312ece473a8fd279743c99c0644a9a80bdf89f3015bfeacb02d6769fb5388dfa1288f8fea34c23ce7f779faead547e4ea26279e31c341ad6df96f9489fa1a3ddd2ac8c531e52ef3e6190f0d739d1635e41326b442e592fa62ca66c433b3fac88622408843280dbc373a1729232fa7365836e6761641fe93af6a601bdc6ec9213b682d8848cdcf4cd645cedc12381d67cbb71d8543ae54724a6bc723dedf82683aa9e341e1ee42e12b7417f4196b021e4eaf983fc88dc43ebb14db617f7694b1cb2a7f4faa8f288df081bb2a5055c4ccf63ac0ac851f21a615513f5e532b73ba978d80bb761ba354462060cea3451bb5b0d2e3a5b73f82129c4a0482597d03151849f73bb0293dcc4ddf0b758e02399ff2d922079468807775322620f1d125870f1f4b34670f9ca5f7dbb75e7d33f6dcf3ed2ff6fb63c52e12056e9b4573d637addf1bfcfaebbd317e0a252f3f0e5e748562a06277ba1ef0c5db5d82b52e5796ceb74f2591109ad339ac9ac1c7ff0e28a1f5f4e61304283b87c31f463e4b8b6094664e53180caefd38cf1874d84ecfb93200d43ac5689f1a898497dd9773d42a88f3492942051b891c5091df3a550bb3d69f21cd06b03317e522b74816be8735a4f540fe04d29635b75dee72099178d33b1d49a1385aa768525a527183ef0ae9ff274eb506284f18bb05650dfbb7349d7227bad07aa5bee92869434d69a3fbf18933b1ccadf84fc0d2b39c10d1d9711091b4bd22488d22b09654ab36324917b46a8bf92270a0a900cb77c43ff20eb28c36cf8364b1d2b049264ee7702117da12adfaf12602cfe451d532f9e4321c50a1924745d3097509ce0514bef7bec55accc567ec223dd030dd8942b1649efc88d532954e07a63493bf69da798a4519d70ba3d3d15f9131c8c8a26f8d5c2914c3a5258bdde28d91b427a534ba7b7b5828d07c409c4d04b51521886d1f680e0af509dff0234207f477946403738bb7c0b9a6e1c91043146830b9439cf70866f6d753d91b7119feaa2b43c52b898d919aa21b804d2895d55e9bdf79d9ca5e9bef5a58a1c6ea202577610ceeb9f14934e7da58d9d2164bcb783ecd0a7a84f68982467f1bd17aeae961a4dcdaaeeddd7b4315bb50ea3d9b3dadc073d35186ead6a0b46514be8bc00ebb83f925f053db8f093962fd891b88e75ee4fea5fa36c87794a8d81d0f47b84b5e42417c206ddc5fb762af113031fa10cbf201b9587d00542d80f150bb50e14d40d48a9d100c9cd09c6162259840a0f66241317debbd25aae917bf14a4ce426f3d95ab5d9ab6d3a7d3778dc062fd4af9ed4788b1ca7f1f6e0686e50782b2d712aebc6108655f388e14484fc70c279073eaad8c401f5443b0ceccb462fd0d652eba9dc5afe80a121b9b508242bf4b56efc40b4aec8ed83eb7af258c9e22a90c5547b002ebc68ef904ae91b547d4ae5ff808b455cc498659518bea50ced8677a0a9b713c89c89e50f07020109feee145c9e0921d662af5f1bfb093699109e25b22282280328bb2479c7f6897d1e724eb81c312b24d4bca6fc976978c0114b9537404105f9b951ee10d65ca0627ea6803c4e1934da4aec29940b099378e03fa66c013fa6eb76092b9a1e92b9910f0f2904bec9b09059764f26a0e15e069a0af0cc1b7cf09269cfc6374f2d9f7477f2b4ab399f0b4faa39f5f94a83458704acf4e0b9f55a1104724b0a8bf0f77c43bdbc97f6838c10e1b61ba08dbe1a88a1dcebb11c1c4142d6df8e5955f797326a4f53cb7e9d7438ad7002b80599f6c0e624ee6e92b626d20df8906181a4abebcece76452cb18ff1e3d98032326ac52234754c50c66d159688e81ae12f21bb788849be06ac9f0ba2682f5c63bd515c02042896bd5491d371a83b8e0e6205af941f11e797aacda2886effa66848edcab21c8338cdf7a62f773267538640bd91a0f471a925ef477808f84c67d8a25528e049d09c8b1a256309773806425923fe4ae9968cde2df4c68949d27350a460dd058ec31e87f8c7a6b6a8a1c1784356eccea7dfdeb3345bc44b59407bd676aad4af4e18bb0594ffe585477c1df6ea77354d22878c93ed9ae127d219cd6879a55343151c32e6cdc0e5036ee1ac470546c1096079c6954592823132edd5bb327e1ac9513366b9673adf7759be35217088c3824fc6339fc0ac86c8b92b50ec42482670fd8459ead6b6363ff820735b060282cc870f3a2177ba276ae001e2b2009891548b47ad04fcada4dc0af071b74fd37c207de3aa0261c6c72f3717ebc7bd80dacc72f211b806f3ef5f50af9140bcfa25188b8db699e43f152e5386b97a2aa0034f310fb1b2edb2db0a9bac4224f6872958fc9c163c507ca76faa297f76bdbdf98f2fbc1deab5fa3ec022cc4d386ffa8653f44dc84a07c196221ad12fb3fd68d0655a008c32c1cab9793df246d40c639ffcb0a655a5d21a78b30bfbe79e9d1e99f0170b8c4a721c5746f0b42f6dd2141e56e6a32a8fabdf5ac62d69aa74319dff23f913f15053b30c3382a465e8c06df2833af60962bce2f0da7c639c38b36d36219c2fe011734e8bfc5b497a4e599e2392fb4fb35477802164e422b714e285dad7d0386094e0a0dfa0b281d55c328371241d1028a0ceb7a705f2ce238827e4a88977fbe42fea92b1536576e5b435664e267e38a99a465ec924b67f0a01c92f8bba3eaf5bce9ba7c9836a4a9714711daa20c2f2c7bbcc70d1b63ffbbfa85e95d553b0e8d08332c433c043ce41b3d7382d120bf8a2b05e7b8f830f6db14bbe9b86e30005ff3fddd0aeb9afef965fb5179005b1c19489655669c707c9bf91481271f22395586edf575856f41babc2e9c3a11a7b6a51a6bec05a18684827ba8e5f4686a6e7c725ca73754dde9ae3804c8b318771993ca1ad493877518ac36ada77365ee4b43f5102bc6d637c02227300758a0cc778188a835d7acaec8910fbfdb4c94c0f94c973a76b2d95ccfa3e7f13675afaba135b7784e3cd6ff992d1a9e6a5b673166510414909510807b8a9814961270f8f2739e610c8fed3144f959ed95c0659d87c55ce0cbbc2144ffd29ead3577f274225a5bffd6b72ec64c8d703f6b1c5b7fe0d223b6024938a0ad59d36a5b10d5d95b7cb49136e51ad7e7ae02e9687fe2a6b9515bb2a0971732c669cf00315c0f862896c390a90576b7ad229931cc9c1c652e86c4aa4813f03f3b1b48aa747a7f8bf296b6368f8cb6fd73f6000717276db8e0ebeae4816dc333876427627adb4f97fda870cfb43a29076f3523c10f45c3ab64e81d64e3ee13adcac8c3e81f4de24d6c8414e70b68bfa6988cc9bf0a63c56ef7350b4291c25e66e052b96dcdf4bbd6a6331bbc56032a742d4cb3b8b993a51ed1c09b765f3997d77c34fa8f5afbbe47d12ae27a51a6a40274db1a6774da843f4662381ed18d74a809f4f4a31399d36a47714aaa5723ee496bb1ba5db986b4356dd9a10797c93879508c275eaf8b90d12bf81e9d23177efb1144f5ecb47c72173c41f9f955ec6deabba558eb9b36e4893289556c000578afd5b120b09fe39e40f96722e619d11ed4260cc2e49fb83d7969b46f3ce112cbd4c57c01a8b38c749973d31d18ff46441f2160c554d8cc93b7639d8f1fd55e1b38664d27628137cb28f32fb7cd3515a64393651f5b58ae0d44df812c6484bdf6675577690cf1b7edc2037224b1f2662202961321b05c234696a5a056657f3798b8b68f8cdd23dd54efe09dfd2edde6127a11f3f61332637dcb9bc77629f20753bb2458bce32bf48818394c708fa89d45952539bbfc41d0b1f4d341d51ced568f5b5c3f2bf44726c049cb747771ddcae71a4d1ef32f724c62aafa3e057c0a4db434b72a53ea217a6efceea201ed2617ef00f14e4909390b15d4aafd6cbaf9e8bf830aa375ccae883701efa909fa3ee50f4b0bc9fa1ac62a97b3fdcde0791fd87b1b7dca667ed07ea4396494de193dc1a8818e6c8506243b06bee174c22299a81fe6aca07d766846163f14ee565046af2ba21319a2afe80cca3139f59f7c1e0053aa1ac9605f22b7e9ae5454a33c57ccb88bc4d67777f9dfcb838d7c02bbc9582757d23134e5c167c646288d93f80733cf14194a2cb0e4f72a79c33139824996dfd5d1cfc3b824aef2a417eca89af56d1141bc6a5ababae2e3c5bc760d1efffb696c78a2a740585c8c1c81fe2249799425f5fcf0c02c11a513451884bc813622e28fcb96c1875dc8b0d73fc82d63673e6e57cc11074ba6af96d3026d8623d85d2d42ec0096d0941cb72fc1b694bfd39d68947d84b0f2e1e18d5d9468136d5a2f01e53754ff470d7b6ab5c50343138b38151ed594726a4140dd55b60557203b787fe4b53b235e2b0bf799e9c041cad25c6643daa064c79d2aec627631ce2b06cdae7ba927a9685ebc82c0ee5e2e09024dabe9f69297770daf10db0f9346d01b97f15caa69de341444f7075d5cf7993c92398bbb4280afe148030f69467fdb78cad2d555e49d1057e8c179ed359840e13ad7fd4227860c84fafba8e08e90aa50fc42b04bccb7ae3177070ba9d6df0cdbc9381b60e6b8871417ba4f31062b5fbea3ec7b200f6982e415868c525fcfcc7d365b7e2ec61c85b02632e7aea086d6deddf0d0b31466c0835a5f75d5cb8395dd1b06f45f8a51a996de07fb3a34aebd2c4b408dd61a11f85db67c2b07da7e48c26c9402579edc9d927ec067caa1383bedbe9fbaf8abda4eb4d86523ee95b193a69805d5cc416cead4334fa9a30f1882707486df2cab0934075a55e6181f1f2679fff2189e0f6171f5b85e5ad3d6d3f866929f9cceddadc4c7bdb50496226c5f0186a2f1b295b0a4a59c80c63a16b44050305eaad0cd1d2d73cfe2d890c1f174435b2d5374a9e768d8c539d6a7c5b4fdbc5c942c757c1859f6d7cc651ef2ae8d9ddf9fb9b2964ed74803aa6d5b7292c7fcb738bfbac84e1465f373f23882a13f4e2e185cf8b34f15a07474b83eb38e8190d0e546809afdd933802dd1ce90c7e20e94defd069da3e99fe8813d6531f3e8f9d9a38e5d580fc682d9440be19a210c111ef808a8972d87c47ee7f532453ca9de69e8b4f9a585a918ec16a34bb4d1de951f8efdbfe5bc205ef5f35390a8c76a507bfca158ea195e374321a9ee474eef836b65b2e5bb72bbd89f728214709e8c9821fe4fb9ffad2c413a2d7373d7a0561ce97ebe752f2f4cd399332babd53c7a6712e3c2985ef7382171ab9498b4cdf32e511d81d6eccfab7393c58296964e815d5caf94e6ef83273bd34831347ffc9c536ca8bbfb096663e5a5f4115d752482dc7e86586bbcf4378da12fbf8623fab93e99c428a61273c64d9b048f0f6745b54ee80f519d53dd013d48a6472a2b7daaae256f6e24d6e2e10dcbf7148688fda9619f43f97ee57335a74d5a14b014dd95be721d4d0ad2f40e8d0feb46143d6bf98cda43b3fb00fa834176fc211bf495f7ebcb03b43574d084828ea20e1584d29b45cf56914f51e3505d07f454779faaab0b1f0fcff6363e7e5e333f3e4444be399020f800c070ca827aed36a9e8884f9df1ffd82148a4a99719ec7bb4dafb6bc44305e44ff56e3ec82c48226548c877653c99c0eac82a9be378d8b5aae1abb975f637072ac44285a1f7d0c6df8d5061658be564dd50951918181ae3305007d2eed5762ef264fd2276a166603739db20af30b3d7f16fb2a0be906f21d07e82d8604f3172eb363fa62b0e2e161a31ca8ff5d31fdb3ec7c98851eebb05a9a6ac3085473126d0c3a5436b1ef66eb7cfc49a633099d1c9fb8bd0c03712f3f06fd47d43cc43baf7343a75b4d6d2ca141cdfff2dbdce380170eeab696c74826a396f0f32fc4db7cdac6d9c1ac5b981388b4ff1f2c41dc50d845c2be200d49fa9b9a67f5dfcf3a68501d5cce24f56879cc36cb2fb2ffc79bfc26766092e837f2d7a78690387c0ecde74c903bf5181a1f123eb8f16645510c324f9e499a244a3145e6584e9132987d1d5424dd33dd795fa494b0435e3236efe52bf4a5196210ea1e51250bae21d2b38fe4178ac7368429e8f26a46aad9b68168f7b2f976b1698b5bb6651ea806f01e0ec078db6199bfc0e58e85093023b6344c2a985b01b26ba959f0ae9233d643195e1c121cdda95b8ed3c012816eecfadf2d7bb0e40438681d09c01884f56cedcb4ed17aa83bcbbc78fa772fa46956669e0fb7534009fe00600480fb5adb72a7f250671f386a12e8779d9a3749d4fc0bdea631d249c66aa55355d8ea33f2793cd8cf98040be587cc08b244770724f1fadda057bfaae646b6aff0e524800835f94f6950e2a1a207fa72c392c4230c3a7e24a34160321ea1b639d233e2a60702da79b47eb700f7793a61b532d3190782941c2881e80473fcd0086783cd38934bcb75e9b8040d9e76f6cef01a7d220d22e4ebea5f7267461be333223adf80f8a17e8c97148b3c9e0e599d6a1a2b7d2a607d3af68309d130a0858874095e8cf7e52468de3af8047a68a86e1e010d93874bcb8e64552130bebc5b220102d1ab7957e1c7ea31c64f96d46ee4b418fd6e5ddeb01a1d6e2ed040073722c4096a7c7ad088c21dcd3f98d28e5181d41e5872c9a67b29ce3e215ef48a02edca7a80a0f2f46dcd22d96e828be6173e86e3f0d6e5c0c60f24fd4676929fdc927b1597db70b4b804a5dc8aab090b21c62941cc9fd229ac25fddfd6a32cf4df3460f10e16a602d78a15d775ed4dcd6a3cdbb3c0001e95a06243965bf408e12b647d05e3a3bd30e9f859399f6acf97992ed2fc87390a8a0f012b1c6cd7d5af3a4941df19549d1db2c3f448f0c99b2a9759242985de755cea9d753cdd33971bf03b1f969ff9ce5bfe3cbba9254e919e148fe1caa21953b5d6668f9bf4c9b6f3e0aced1e98455dcdf4ee7120c1a4e27afd466382118a7027952ba4fdc4d403d19107194182ac12de0e9b444bf67a1160d0f3439df6aff2238a1ac0ca3e254a2532d949c38c682529ef73d113a4ff6b49ce4f4e9e342234b279f7784bda2f067ccd087f2a41d0f5547bd51c4a96c6bd96f1353f77b0a24a23df943012f07b88b1af19756282ea1ef02868b822963847cdd7c95ac69d33179cbdf0bb85555ad2c0caeb8e53096164f144cdc7e97b7987532dbcb161531575321967239f409a478b2a188426693d43f3b3fd58a6500f7ef5632193760c37742880380e8817dfca2c8a1e740021eb2fc0c60153c5b051f9c0b60b79da6014d2493ab9576f6b225c7da6a17f92715fb7f093006cdc3aab7106c82376e21105423873b65a4d01a1e1a7e367259e73c5835d447076ce6fcb80c0be5b52613341c0209640683dbe076ee4007b225f2b11fac465c5449ff72a89009c5b6a12397b83ff4e17a993b3a51c0e2771f490a2af1c8de7fd0282836ff251f137407f9dc65ce806eb9fd2b1d2834471ac1ce14fd594b68a8203616ccd20738475cfde3349e5d5f243163126345842664b7a1566ed677a96a1bf029c9d2e430522ab2c220ed22ca4ef3e92ea7e9951634f236d0378a0dfc893c3605606900bd6cbd76f90ce92aadbdf5035124a0164916bec2b6850816988e0f7b904753dc73ef0318bb807bac76ffd977d8b6bdc6fc576eda17be8b7619fd8f09b0e6c4b4d77fd71a33c91a50ded2ef67bd63f89e7c5127e820ac9d74f6a282f9317e33af28738738b24e21dd0f1ab44b0fadc4175733be36482cd52aff45eddfc1808cf21c89c7d669d8cdd1a122a296250ca38edcdd63f23071418376563df96893b4b34531114e15c1644c5e656cffaa64ed858aa3850bf37ffe5ed2c4c79bd419c4d1c009341ae3a0f4609c2db2cfa00987c6db9ce1bded13fc18fea690ebc7e80fa1a16b0cb294e105ac1f277dedb91bede3fb8ef3b2b8558832ced5e10534d53cfb153d8404111c69d9b5c69cc9931bc263996848265e62db6cefcaebe3295331dbb9f5763e41240ea7b90baa936503a6e66f4364e13b541e95e50714c570e043c9172794b908e15b0cb0338712f7e7a06a6bee790f0b2a9d6b583e053069a0d3e7c14eea622a28f912bfe613b8c6f7af88f9f868a6011f824c8c3e46b3c6d3abd03cbee6358566b476e4724ff06fa122b13beb68fe25fd8b3fadb951bdfaca46aeac23a0865159ec7c4ce5f0fc3549fcf565adb8e0fbe85530ff0fdf3b24eaae5c8216f796ab5ee31d4778fd751d1fba2c40aff7bc8365674eb8d5fae98450d2fbcad977a236f3323cb754aa71e01dd800633f8a50596e7a98ebad372eb84edd45ff13d1398e1dec7992ffaca4219cd5d1445b84df99c4aec9e82288a0aa2987019d90bf1982bece65ca7dda49459dd57e10867d3fa7254e9bd63e82f0848c74082f1fbc72d7ae17efc8922c1e9d33e0396226f5e9624c36add559f1180e67c5ed147a9c1c2aa256afd59890636ef2853434d8065b9280a2828f53ed057e4f5fce12fa6d415e116bdac487e0d40c464ec0475f62b2d9d883696b5071a7e34d85efc91f9891bac250685ce5f21e1f77ff3733cb99f1c27661314956a7d6313dd5665854a8c09f549491de5f0b74ccfc37a32819dd9efa61edf6d81b6d21426ece6b903a273671fc16c685cb9482d46542324f1b1de943db52b08abb1cb3556cf5d36bbbcac219db392eb77a9b5b92c4e956907f237f69ef111147ee9306a14fc46a9fd60006f3560c6016e054f2de1a0b353f642bfcd80c9fc8e81fbfea2a632de4431618d71102ff59ce9201ce8cbf98790ac78d27cd445f1c57b6c65965d2710f0365affc88ba21f75de764c88de4c8acd3726e4ccc8313abcfa0aef664549eba025a318b65c336e1f083852338ff8d6aec814833e475c7aacaddab6f2ae1b4e8e7c40709e41ef6e69a1dff99a38dc1a4cd21c4d38f2cb72156cc3338bfd2d5d1a62abfff44a08b5d82c37953ea403091e52cd1d3eb7e3e3b88e45b64ad10fdfee429cba365560c1c009ff16d9ae1f58f7f2e08473fd2bc41f697e1d511264d97b774d4cc15ce08bfc4991704851e782d1f1a612de5ab37d8d3ab44862c5af8136530f94fca750f75b8a141ee13e13370c65d4d0a7ec52f9d08cb35d5408803e9e97fe310024fb61d9a204c126f103909363d255b7b60178942c84d309c5f77e4a308ea98850a59b5c03630ba9bf51e345d669a1cf8f530cf1efee54334765b58b2bee492015f1224bf1556d822453525723b1cb7a9a87b75fdef671b382ce8cb1840de5687165d2d210b6899b33b87cc4099d758da675c239a05b4ab2ff758e5e7141feb4ede787f2bf375d416aa0472f3c58fca148e3ad50dcd5e29cc5a34054444e9b5d3dbb0ab0f2c19620131929ef68c42a84a9ac837313124101b033ff7b3f9bb3f26d367c6f1647831d34e0a9327f2fd605309bdbaacb487ff9dda8d87c98e54e91fa9466d9c60fb181504a0c047cad1e46bb9288ba7f1ab838bc396a000b1c34aa991776102c338f455e47d425bf4bf6ab870878804bbfecb41ed8c2cb7061674e2e707d1ffe3b2975becdc21f281d0ea24eb12c5ae4aa066d12cbfa686e6e838b7218e954dc4fc854cf4de044020c16f198c64a01ccdb4bdf1d43c7f4786502de34dac6b48518c30023df1b47bb46c324a4d4138509eda9b0ed66daa85ba9446f8e32467cf8fb7c75603f8520568554a9bd6bd6489a83b9260fbbd961588bfa32f4f030b80c68e26c0de1339ad7f3b240fb5862ce1852e4ae77632c39722e1f486bf274ad66d9669de2719dc0f02fe50e1731d118741de89325d2b9758bd3baf43b9d6804746184c2980d048c52bf0008c8e3d4eef8d58c00f6d1959b67579771994bc46063a93416ad330bdfa753a3f79c8ac89905830da945e40828605ef5268e682a6359cb36d69a2272798ad1113091e8bd478cecc8c3d38390fb35ecdcbcbe3590d10cbc7fd07d4950fed6c8816b036ef6ae85962e2a453cdd9fd1b03e333e7946fd9f05543060047cccf0369b37d6f558167bae17d0a5079073900cf836880b1b00f27009c778fe56403e45444bfe4368fbd8616bc5ee23f129744c570e54ec075c106abb6a809303791561bde5f4b74ca9eab15b6a0f420f8a338c26515f473366859c50c80c9882b456bb3e7902461d4655cbbd67381b0d17e0ea88045c15cf681ba0c98b9edfa0771045a6e7b20b531517a4e2ebea4150c446843801abba235c5f57df1b2b374aabe9312b19f5c9f649750e9be74c134b47c183aa69993f62656b4bb07fa97be9f4c0d4e711f7a6b704dc7137b05d270c6999caab52c2acca8ed2ecbca17927c59cb6d8a0ec7be13e903e3aa8b9811f67b9a6a7345a330b3d40bfa9d0ffb13885796d14a2e2551a5b28d2d3228e4b7c1abab9ed796913a4c7c859985f2e21595c039019424a03be8892dd7f6dff69f7af61eb080c3c6d53bd7e38858673f27d0ae4cb3b7bfb1c4bd0b7ba66a336fef314dabcb3108b2c59e6b4106e160366ad13a4eae9d69814a0ef931f7375d7ac1e1e9173267dd0fc93d15faefd240ed859a61a45810c2ad8ec2abaa4e82cd92863b97f201a03c5c4acac5729a7eba24e1be3dfa3795890ce9d948e82e862709a53ecba811af6a01a73d482c799715fb28ae59214596d45ed20e0e3d23ad4c92a3c35672f02dc27da84b2d8456faa9e1e70e5032d5ed8fb6af25f467bfe6d701c5ed9e77de8d834d559f8dbcb5aabf86f7cc09677f3b24fb6b29ba624ceb0259bc5f915a97380158cee89d49059e5237a3dd65789f4b534fc66165e8e551c626984b3eb2fb33da6367386f97f75eb5722127ae4e18a521da51c37e9b79859ef1bbe503814e09e3a2cd1c44978905f632003ac2a9b87ab3dfaefc5e12a58024265544188651ce59d0e84873b8aaa2f2c5cf7907ddf03487fb8b8f256c9ee5a85c60e063537b9aec029226e1514e3cefbe9dde5b03ea38f733ee98fbc130d09fc7d17930dd5121cb2098410d871f76c29775c4aece1aed1423a059e2ae90494d1ed3522573f4e41ba559598d38bbd263d372c50113cfb681db7bdf1864436be24e3a60e3cf797878ce24b5da1bdc9272fb4691d2c9a2e74ecb1e433c4c0cd591a86ef35d62bd1f59b069aac4d0a053a77e52136dea8828dd9f5e7e0b28fa704414a5a836a0953badce306da7e41d7a546e0148f798fe07000cbaaf2a17e8bfe4b09e3b466d97cb4033c6f98534388e56a02b9f4791c30620f2016d1e40e927815a0d00692b27b2d6333a943cac4e164e6cc8d1fada65d145d8573bfa4352d103d1d24e09c12bd3a1ac850015831b813e4b7162e65c007b6fc27097369703c77b462fc9e4c697079d4e8a73fa19a191f82196b2eb97fee367091d3a30b2756c69e0896f1002af7d5d6f528552fc0ec4ad28f8214c9349e552ff01649f3ab64a6ab9d3f502b6fe60647d4277993c277117c99ddeee2cede90ba66e4ba009f5065c2fbfda9a7a9a288ece25cbae0429d6dbc35b68f0329f3215d6cdb3d5465d98ad4e503e2d635ececc251a53d283e7a9b4e77ce8a2fad0179ad2e8e0c03d922d887189e40366d46ee022dd5d54de05115265046da3fb98dfa3851223e9948db5aca3934e766d938cfe72537ec31bd9c233c3ae049cf6f18fdfe651068a4bd449241a45142b4109879ac641b4206f7961cae190ba0ba4b6cd61dc8a2f48bdccc6ce9506e28c723eaadebc78a04539cea787e67c5613745ad70181f6858685d310100ed816070ec0f85ec3a91de989035f293a0291370de81fcdb1bd9cb599e92993b6c7a052a807f72cf45ec0a4156c4e3fa7d231c3e0bd079473aeadd35e161618bd0f1c2c463edc5cf52d7bcf5148449e74b82f45683e67df31923ae4bec59f9bc514094e72f3a3a8980db234da9d2b5d2c3d84be14527a666860cad6f67c649766203d3ad76b34151e02ebbc947e3b0c21e3fe0beb3f035aa484fc8e728049af33ce000842336813eeecf482cfbbb991d2f7be226ac770d93f88e3810f1b428b637275bcde90fc79814a7e6566f7f4426ae4c72f9be2bedd651a3aeec19b373510eb1a90bca0eac70906d42b9a1b297fcaed5f5f35590aeb3be6ba3921cc059c68f844d68b203c4c29c49204cb28dcb58db8fff057356cc737a5bacf39ad26eea54bbf62a025cf16e6ecc1814dcf880808c44d898dbc033328d51295d085afc438d4bd38b456c0c3a1578058948699770783b9cf33dc5b694ae48c7a25921d88a23261b2f98c3f58c30b64ba441b39606444a0fa325763f26d19ceab864ceff26db7b4eea0475461e313ee0fc97b06f9a1d0fb555f3b5b3c3900eb293441fbbc955a84dacaf939a150a9873e1c237b96533ef558e15103238842619b8fd53d885ef4415e24c2fcaa9a87c2f3d20485b5ef9b0cc4fe73d3317336385b6865965db8a0761466aab4d0e52521e3e830634a9aef96ffa16496a2de2c34f2ca46e995b9ebc596cfca7985491b4422e1f20e2560333b0085899423a4529d7511ce60f5e20b9d66562f8b05f47c1dfa15a8a83d95283d39167aa0c07bdc7559097c500948b4a2a2469f13e981d918e5f514f810f96ca92db91d306ba27870a264b91bcb6cfc711241360d9889cac22435ffd694b42a9159963f531ba51b7a93c747e4969f95dc3a41b466b3285082b7138fb0cddf287e98fde4e5c0fbf3ec32d9104e7ef1fe1a26fed0f3bd15c0f3ee4d513a2c7f7ba3e16479b9e24c8548a3da87e596875716f13a1b3076a18bdf09af2006f84e42cb13b09ac1585a0be3a1ceea7aee67de9a79139c3ce91bfa88407ca6a5b3a85cd421da026269e429c0a27669fea947027e79670368995651279561a20a12040a8d264336228a99b0b3a944e24f66620774d92c6acec60c9f0c42b2c3440baa47d0ba936b86994f09cd0adda8a836bf617d4115c1a71d1280893e9d8d0ba8b411037e83649e1265c5fe6866a148913a2ceec002e2c1fd362a4aae840a281c49b6cd29827fe02ea8e547fba84b932d6e9bf195f6fd53992bbbc52e76d67cec212cdb8678531c0bf935761ec84d81f03cfbae1d7380b37efc8fbb35bcc680b930d8ee28cc6d82bbdb3f19b51131cc936ee09133c23be33fc257d3993cf674e82fdd8606053437c1600e530b43457531aaf9668dfb7dda989004ec0a7024b82c7083e50054db73acc5052dc6e1f0d6c8299340b8242783c097a85e23a38fbae7ee749e544df66d36bb9a0d7d22840a0766c74dcfc33d97fa01f96499211fba5234ca2203abb3371f7706b234d3e585ace3539cfafec0fb0ba186a37371b6e5362aa0d520a1a0d7901c8298ce223aa5909f65094f7f8d2d00d975ea202d0bd3174c7ee93ad768dbf0475fbebd3ba8864bd89d43a96c4a073f3f2a32735b3528f0d2119e38df2b96cd979c25d0d2cfb693bb8c91cf152f23013e787518458a47dbda4b24b35d70a6dc6720c7bc8fa7f573e5d89841519eb9e70ff8fe55b53867c9759144c5132489753d0b2738031c1da02f3530c3e2119f8eadb0aa2cf6ab793391fb9d15c7914d38ebae7dfcd58501d61fba3e92723ab78f05c96b626c63f21803c3b877f4a766d952c7726f4ba04d43f112321fd1570a8505353a2fcf182ec17eabef1ae875e4a2ae27d9de74f17803f2afd42329cfb40cf943d7f175da73952a74e46e8739a5552e3e1d2d2a9d6f21292e31e0c04816d47155c12d2fd1720551971844a544bde5cb7e43a09f6c68fdba89275851739d2fd96aaa77f89e9f91d9c4baa6c184dd1c09bcbd55012612d1c2acdd9cda908853d97045bce54a07fa2656a6a76b18a5406ae9b1bc4ffe260c76ac9dd19028da8bdfe8f3a0776d8d5ef5d6b4dd69b460989c9987cc652e70dd56de7fbbd39170abc15080a8d16513612fb56c05e46cdc10bbf8d03fcb8745ef30e726ca5976440f72564638365c56afd1389e06bd878ebec41c55a9adf3e65680d9f1591d8997ed0b66db486430f5ba0bb65655c790029c89300bb8a72b03042cfbe7af7a77a489f2640fc7e22bad3f5b515ed2bc2d3b5f6ae67a62bef0cd1196528692bb96401aa185575764ad4989d76e5d4858ce7c682af17a71366f317257a3179e65b7cba4f9b02ce1358d5735455c19154a7a61f8894b32a606f14523070dc1d54af955c09234edc09757039b42a8932d108de034117eb8ec15cc10cbf3961d2ce78cb333b4704091b393c43970857318a414a6e24210bc9b5b3cc8d0f47744e908fc772419e7a7cd427548538fbc1a51bd4a4f9643544050269cb0d2aec6a305fb537a9f24ce1117db7f617be3ff8dd6833397595bb167add5deea076b09b6782da6b7b98ccdcfad3b3373c1ad8bba9b4e02938446c9aea837ba38c703ec366a44ed319d047d9b1ea7998f8ee1a4f8e64547b0d4ab30c2b8ba0b4ae92264bd2b2f34916f16a9a1aff48421a452d64801c349d27035be8945288bee5e018cb1a3f17f24da2c5f21b19809d859355a79f5f41e0d77b42677bedcd5ca131d7b86a9e05707178cfe35885fbfc951670f2f0d4eb221bb5cd5f00d43e565dd6b2a46a3bb8d42483a3828863cfd5cfa929a0e480753e262c23a8229f59b6608297fa5df31f2258fc166b821944054933eb25c50542ea156498a845249d13ad004b0629343c2c92a6661aa6e6b247ecbfd20b7b5e3fd3db5b2a299c1155049a5e38fe4495e2547f2fe5c977d84df917b3a88b5892e4d32bf88ca032d0d4e30f10675f3494c1241d05b9073660f8cbfb51241438dc958b225898c33cefc4f4d3cc20e8e783c2a9902389039b7b67cd525e88e0265f5b4f19baf6aa7f3ba7b4cf281c5a6c1bb92a83564a6e93cf8728f3f03b3d0f4df8a1947b7bb320565975b9636277cd43154b18911bd39be4058491eaafd463e90eb8090996a288a506e6b61f719f5c9876da4347aabb93ca1a1cf25c705d9099d372f886ce34d0be7c3ece079b272eeb8d27c9c4a742c817b959205ef95f3960c7e2538fa6e12693a283f665d15cdc83d8f71d332493e6011d8e63a41be19aa626bf7327df0ebb5cae7e8bba5037d4c6732e1ec36de90f3d38682e75384e7da42593011b3ce9f3842046525de120fa11aad28de548875ca91237606ca67227410f29730883d5cf7a0d18a66e8522def3437238b152256ceb52504cb239b6545be07b3d70ec028104de997f58874335316908aee324a59004c87c0f75b1b78869fe7a7ae715e6ece01d60e26cf895e2d4decc355cd68be818fff5741e5a50fd7f85b0bcdbe03370e5ecf2dfdb1754821cda7bf1a5df16856f5ea7a26f7c9f65979d7619bf0d2d936374aa2c517c9b1efc3af9e78f380a6b70e12495621c5e8772d5c0e1d935e8905f1b7bf6e092ba273feca62b0bd56a0b4e69a7999c3108cc37a8b304910fbcef334d2c1d13f080cae2bd0b29a46b27a539182614209c0683c2d4ee5df651b15b45231a6c83d5f799a0adc7343942fe75074a8c2b4090ae922c35b15bc7c74771ea0b21de83b3dd2226c4c0c2052c7293f541438651b70bdb6f8fd624d47d896aee645a421d96c4b3b7f9b9a8147950c76d277d5969da013a23e2bc162c1a49c24ead32016b7eadb1fc22d7819be710efdfadcba06a23b0f3d4229226ee966db3d212ad4859cd2605b6c927075efc4085a98cbe3bf6d9c1400e8c5ae502a9703562b6ca30937783d63d952f092e1d4ad37140dd64a37dc0e807679996e2135b4e5ec0d3cc20b67966990c03162daa4be44cb6dd50e7174a60e2134fb0506dec56ca68e8930386c54e8b585a5d890da56397060c8ece669016cad5351617f95bf996c61ccd3451309554baaa2a19906664dcb3515dcb4ade214efd5b5b0e2ee182c93aab8d27caed5006fe367d3e65f132a8463c01ce9f7ed6f3b4e3e1becca5f657e32365f08a5312c2b31938e2bcdfb13e6287b0d9c59607d576c63cd062ca9a5bacf0c3dd8b20cc086fb8629b82c799a8d09bddb23595d59ea2ad9d6d93052d030fd3f62bab03f8f81dc1728e8cf0c992c2ab07f738fb5b501bce6e02457bfe1c28d944451b6f12ded75225fd1ec726e90b8ef33fef05ed4f189a4d3111a5ba71fbe013945a93eccd599a9ce557b6e397e620757cec32b1784eb4869bcb810c5393692a2912a17ff26d7611eec910e56da50cd5f60276b7a26c8da9625e2f85fb164aa74773a3421495e73c3b046153619dc082c6cc72dd183fc7dfa53cbb262f0985ce9327381c28074cf416f8ecff8b38d0099929bf6d6f4ebb711a1f72b8348e1d01d93d2f708777706211eaad5e1cb92f8f938b4f5fe20ff05a25393394f6e0afd77731d80074634ec82f08806222d05c0d1e03f14f737ac0cf40169d7036498f952e5dd3a3bfac30e191705722b783d1b2a5f53c4640b57104612dd942313e33ce5864e6db6413d05b44d7503a3446530c0383b42f013648cccaa11ef3b8c48cd1d3b67c8295b26bcfaeb306d05ec5dd5859a7c93a63e207d03e158ac53638d782b9ec62f403785b3e3ac3030ec4e71dc801e0175eab363c00044b310aafa6a10595f36b9b994d6be68485b4b2306f162cdb323139b8cb1f7e181d1dba58a45cc85ee9129547056648af7be20611b2c9afd04b098b4c98005cf7c27c2121a30858772cf0bb8ed8aaa04b04023a7d11b7d4ba07578feb27f162fa3b50cc3debe2c06c28d62b49ff8d0d74afa10d9d01c1716cfdfdeb15386cb814f2152e602bf7ddc4f109a496fbfbe271102476850b7b02581519a174bd45325cc15d3723d1ac72a34eb627071cfaf2001698cd5aa0757ee991302fd6e07d2dd062a0cf88d14bf02c7f21d889b9ffa4175b99252191faf15aa99b00f8c9f54b94c116cb4b350d323000bea7369194168247bfec1a852d10923d24d2f9bc89054541451fcb908aa336190ce7bd8a9ce25473f8c0d7e8e742c24e0540fc67ab9b24e6d64e5b5057d6a8e526c2903a43e7cb5de71261c8d4291b169f104f1f80de573d54faa8f5e89d8cc9a3be9cf767e46bd68e3dc3acecc3ea22a5d0030e6432e6b413badd9593a5f1cd0e832478e18a4f951aa8c82895cb09151657fb4aa0627da9074369ae58fcc2216029a71da386a9b33e1d752f506d394e92912ca10962d6524b24e4188440000f574b0c60df63fd3e04c4df3b106bf52b200c33212776955fb4c9de4662ec087c0159144944f39e8ee8444058ddaee52b71d8005ed5e7aa5b3bfc61fc978dd28562d060cf60438641d51499efd2f3aff10e63760feba1658ec070b606244787ab56c7303aac898022f814445486c6b38a0b51c519504ebd743ca5c7d5b0aeb6d125af1f2c41541a61978cfbdbabf131bbb15a28580a60e8b13d2f16f00318b322ddadb9fede6eced1fd9213c0726d4ec55e3399e5ae8f312006c34787da3150a667193e7754fcbec3af72a6e3bbfcf6209e0afc3ca2bfb3e8bbea7e05bcd7b49d238581465699f1e539ef3ea0edf0dd0795baec1f37b71e1afcc6bfdca1c7590304a22ecce25d63ffdc5e8a338280dd8bff78c24ed2bb39796f20f89562703f44aa6e352ae26226f50ce1aa580500ab7750bba283744af15e22978e7e5d4fd31ed4ec3531609eb9b40d350d6141902e44b1dac1757ef9c8f2e772a8a74e13c84650432a4316c0a08c637ef7112f838f65dabbe06aee6c27a68bb664acdff0b9118c72a168ea50477c7c68f434626e6d4cada0bad669a6b8deb1e22afb490b2052dc26e4ead92a1071c8b7d7dfb301426cd72b1610f2096c259d427f8b412d01e0ff42ef58960e3b6f3567d366475483e25d2524bff73e98bb6aef2e6bea9b80376a255c1334a072ad899195da1e4374e61c8d40d6a3608e582a2a85d07026b8333498d41c2f05ee0bf2d6c6bc5aae46ffe2f9375199cfcff1055f4ed04fefad545c16db3aeb4554eb7c75f560a2b445a6e9888644cdbbda1a8968383ee0a1aad63463e26c73e9b2b290511a0283e900976ea9d01cd6ccadd6e3383e67c708aac3281bc527aebf4e9f9dbca3fe0a2cd13dd9990311d94df7dcb75bf1087a73ffc6802d50c8ca9facf086eaae27ccd27ea8fb906d3f5590be76496fd81f4b2327c5e41ffa93b5750e117b689689984c11f2a30c86bc29b46492b47632d2d69829dcfe9d8a49548de500219ceed44d2397bfea2a8d2e532f86e4b4dfd6da7f7a3d4f4f8e068796539e0060a5bddeb81c1392ea1c6a9e2ee208a694819016cb282e91409fefccdf3c53e94141847a04b4496737580fbaa950e6ff3206cae60b260d2b36df2b1065562e5993f0f7c682c48130728adfd31e3d77c13ba5585dd280c4d1f7a6938bf3756e097367508c9a1f5dafeb08d1f06fda525fef8496c0ccc6762e0fcba3de1597ae523352f95973e9dff2e9c493702f17462a7bdc4862138b1819dd0f17f431d547e0d045d2caa6136f78e0a9a980c23c7606264594b88b300cd224eb11c6918d1030757fcf1c2607463895e9d45040a6532e9e92eed24bc63886cc543c3c3d20457e044d7b6dec46d74b528ff237ffe8135db369874e0aa4188c21d9c888a4b16db77c45ab546df995c4d6745f304274ea0a8d26bf4d04a31265e7e15d79a891e275910de616929e34c5e6dcbb7e77ab069c8454399e93fe2623d1aa074572421ba43b1a17ee1e51536961a6b5d7e26fcadcc533d3e88faff54dcee8d7771a1484b8a58bb93e854ce9a6bb6dbb9751f3fd6b504f1fc6c665e2023de6fc125e1bcb0edcb1db771c8d8476f420613b83afc327301777c5608c5c93c8fd3e5a984bdadc830fd75dd2e70ced58aa204b18e22fd3c10eb0ba6d0e06a050225c88198fe094f9e9a9c3e4564f5ba8585d255b057f8c43348ffff3bb11f09301a26d8bca4e829f510b9434e1d3ee83e1c44bc6907369ecda31fbea787d70862f55182f059daa1e6e1df436e11e20d3b9dc7db59bcd6f1357cf68418765778c6335173f0d415c7cd4cb471a65059bad706129bb8e5fe212d8002bf31acec01ce201dbc8bb82f8111de5e658cc37980f449ab66d3bd9657a8f4dcf18cd0ac8f916b855a66102b106c5de9d8ba0838aa9994a92241d706d06de4ba14048ccc9730adec36d736a6b431d70ac156e04377348b4cd885603df3c649f039dbea47ecb4158666731109f365cbec226fcaad68d65834f6357d79e1f9cf4ea9ff4cbc04a4e1f9c78ff5c41550c35165a225cc8a325eff7b425e8f23ed9f30b7ca212b3cb8c8b75ae1bbd72bd7141ae5b9961a6346992d8b0b06fa104245c51d558247dac9e9cde372357b975bd577a739d684b85148d645ac1281f30522a3e04682578949a48c375bf2dc85b503d9b6335bf19b657cd92a1a2cce954dea9d7e92b1cb461dd0989e9160a7a485771f1cd853aab39239121b7260eeeb33fec02002091eb65e08b5fb2fde50bd55054939f6ae59c4108c411fc68522027b1d268f2fc1a057d9fba8c7fee32a1e865bfd8837d9c99f7a6d7b402c6f9a16b4b850399b10eb52b7977147f14c642c296f97bbf44448d075d3ada99569ce3f8ce846355836bff69a887ada638694895f1620d75d180c9201e48ee81b7959f9b8ab55e321a7c0758b184e6dd8f8e9fb73553d259b03855896901138526b9ba3e9595109755f4cfe6bd78f487451b608c2d571a6317af4dc349edcef6215477250095cc900366a47c79484aedba4f13d2572588eb8c841e0623d6fec05bad9dda2c4a266a332ad6959f3ec2890242a728ab71f10da2fbd77436578bfba61e626247e379af2ab3130128ed84710518583efa09f04e0c8fc99ba666a237bd8e219cc0de5ecd6e9d94cd1139b0d9cfbd4cb3ebba7be63e861eabed43f7466253bd7c8cb43c86b00e5443debb42ec4172ca590fd8fc7801735c5c496f0e82ca55ba5b0f33edcd21b0c3f5a4b8d32291017c7f0910dcd1d70e2521be3da4444b95cfc8ae8d809866386803082cf7e2df2ab3987948e1bcaf8dc0432aa5bfcab182e192e7457a07a7590fbd359c0cce43d4edd9cd142ec2b815cb916abc561200a93327b5e423b43f2b483575812ecbe50064d31da559a27b448a5c7e427ab8ddc4ee056a86467dd9e09f441ad051e37ff1bcc179eddde7dd459a2b6c14369fcdd0ae3d1e0d7fb4c2adfafb6bbe05a2c8b082baa540fc4705ddf823c0137d014c879548fdf60eb09d1f3de8c872ecf2a1f7e7083e26139fb8a235f5320a2448f3ff57b1876e2b83797f80ce812f21c65e74ddd4d041397e1fce55002dbfc5c263900cdb137a0fcd944b2d8170837c9f27ca7257a86f51def0d1e4d70404e951c3cd68994272025b8cf469693a4a950a9c5d210e9682cf49103d640bf7041d6b5795c0017cbb6bbdec118c483eb1ab31d319b979f25660bd8595875a501f4e96a564ad1977b19ba161815d931365b564ee42789f13c7bd9a6638621f5b4a07fb4ed1b19419a5a55a9e9f4b30415aefa3b02d39e15a2ba18b2e666082b94b8be1267f5451c266f9906c21e29f14ade15be7478f7109fd60003134d052e993db94f111f1ed7f7e13cb37f9ae261515da808d8433e00d1b1a84a96d7a94cf90471e39cc92672776b99f49ccf705146f823285b1f7db4dee25729d87bfa8073393f96d57817eb2441faf556f79788500bb538183ed848a207bb1d0432877f3888133960b831d59d4a8f6ed101309b7fc92612f8ebaf8e89a380fb35948aa58c127750b8b7163fd60178a24ac8e9eb61b096432616acad8bcecdcd20002ea87b570b4281ffef2de59b194386bf115cbac8096d55654b284b5557158405ff394b3fef08d413cb51d59dda406c60b0ccde30d9b6c0377db41781b4c1a4e264718eaee54e460abf7a8881badee3f69b6cfbb5a9ee8821c5d9cb8ff76893e08f9a0a62e0b61fa0eb4f9e0dcf9a39debc970ae6b9c945f1549b14af096b2f9ce4f3fed111a1e8a82565f786138077d2aeb09a05b9a5bddd3e749579dec88828b4ef903a7e19ca44bb492a07079a31fc434269ddbfee7080887264f03d7f3b5f74423b8d4b27795112ce1830727dd83b2d63901118d366c01e935574ffb82c7d07857f1ec1034b76ca2c9d7f35894c18567d3dff71d6204bf8915ec6a6792c3f4cadfb22b36aee649f0d2cc190a9f963c5db7ad5f75780a6693ccca7ed14bcfcd6ed97e708e6d51a1b701ef59fdaacd588ae836f57f590f74dda5e9eed6f798ba69dc49e937b646eae8157bf4d0d6afed3e303c772b737014575785031fbe7ddff73b5b0f7609a7d52b01e4b4ce9188a22db152d1c43c1a6848dc50f494a2595b8c160b9eed200687c1f596d03315bdf229148d54e5041af662597dcdf2916a657ffa03cf0d0c34a4d4be1c7818085f53bf01d6c40f3b8c52a9493df7d393fd3c922d27ceb6b4f450e3e020434fc2aa19ced4576c9297f461b08d15618aee516b0c3366a645a42437f05ab710f32135c34ad26898877f372280c1cf6a2c2f945e578b6443db565a681d745bc466ff744cc08edb97f78c9a524197afaeb146a0e1c2733e4d46bfc0da7e4e8cc564cc6b50bfdc3cbdca72bf448e5f75ee1cfc31e9770d5b7550ebc672a34d5c38ec5748af493ddfb3d200ae1ec78094390ba7d8672be95f47495ec786ca63fe6077a9339d7ff6e37790fde3d3527349c09b0d91ac48757893da24aa71ab71a7be5de166a395079637e03b2848bc38f42f44cb5ec2fdcb5fdb1d283495d4f83bf0f9e2aea15f0b7ad209321ed050f85e7ee65d120d414b512d84df08b4a85241aad7bd6b0ff5201f6c0f122545092dca0c2737a5121f52af88a2ae5246657a9ad07f693c1216f13da98aebbe9f167ec8f8165d488617d0a2dda01eb727b3d970ba0275e2eb2e92e33bd7256f9958fdaa3e408f030e470e0a1e815513ffc3af5867c4d7ad32825ecaf10e5d3a8eb558cc6b8c37bc3d32256a0d6088c0ac722bbd0258ea765ccb2ecded9723c20bbc730763fa37c0fa277f48f4f01d91cab9cd4ab5a3b93a30460f4bf6fa7ca8144f9138c9aab5c3aaacb1d8f4bcf80583947767edeb34fc04ebabb5d0705d8a52b51bbe4e470f99a6dd45cdca2069e64d68ebc130ff94e8a6a359cae279ffd56ee3e35dcf29d9a82e7bc92a1f1953c289dc404b4afe0dcbc8f2755bd627de8dbac2df5903e4d9c8d75b39a0e97bc2a931f787d48bd4e41217a7abfaaa903ae6d1abf95ac34213b80c8a595d96f4a9dc3b45f6009612ba78ac1079c10dffa57528f78d46bdba520804484a7769e55ca16b25a7a8a1b41d28ad2511f950ef0aa677e905150139cdf30a12baeafd1045cd20a54852b3f291634fa75e5049d517ec05926eaf6f65f77a5b6df7e2d3f82032cdfd3c9fd7b17f4fc6fe07c44888c4855b20c9ad1aa45b61b9917aa7689499c48319b9f29325245b3dc987b64d790f4016318012fa1113f7831b149085adf9c5303a7bede9aa199b0b421d43109ce42219f5935d9d8511d670beb467595d9577060aa163b8feccb64d1d792f119e44ad3e5915de9c1fb0ec600395124ec3caf0ba0a461f0677f3a0cda07783769740c4847fd02538efe619c874568dd196ae2f9216740b2fe44a378d46c9046e8d40e474ce9df5b50eb8fca740a46e7a7b824298bdd6e94ba7c5996db179ee71a9ac666e6b775b0f1ad329f563853a98528c9c94ddebd74e8af352fedbeb830df846fd129d03417e2986fe72c220e5100e10c85f16a1f8ec5d7b9d026e5927dcdd047036c0ba7e113038316bf7d2f08c3f22515f13cb232cf994de275905e9859de56d561efb6d6106e13167af98bb2d92da072632fe4352f5324f2c1d2f017290331cbc63218776d91bc92dab18d5b530abc8ad7b81f06d9fc1daa23305069da6962eb1a3f3a31754d71116a5df7a49d9320cf9405e7b7e4fb9526029c7e3947e5803b4a0d7f7b8077e99332069ca13a65283adcc01f296b48fb19e25f5ada8e47af248360a32704134acfc2f216a5cacc0d437bf9285d017fb7fd94005326822b1271d52f26bc3a29e4e906ee3c7a8bc627b9b67a3c42d043e01de6db647f1bb29e9653a4e453b894b4bc62924fa6ea4ecd5ee5ede69bf1afae179178a6b1fd9b37fd15fed4d446a63f7998f4d2738aba8ae101b1fea22cec2695f3839322b5b298892ddaec742e7810b2a5d3f09c599859ac8118521d56dc14bf441d34c41ad3f6436bbed5f1669bc51c5daeace128e896788fd4bca83e09ebbe9501c4e526d2686fc91428ede183784e6fea5c1d983bda43866c1d1e6ed48cbdf9e9abf4a32eb92f54700dcfef8c7b1f6b11dee31d6f07e95ebe13fbeadc4d5b7b6a993c40c3cc3750c7899358c1cc1ce30e6c9fe4f7818b6a03ebe2162c412f956d8f0b6d9136988e9d83a2aaac6d56f1eb1080092b7af94d9fb3e94159ad5e689ac2eb6c165d463b709d551a2a42c69b81df39f5020f8f58f029e3e8c3294b8861e2d2dcff15c5040dff20f7ae71cf4752eb157ebc1835ffe12d00cbbdfef6b8ee743983bc75a10c6361f0a1b99a6c6603add2d1fb722d916afbf7fca8fca39e5bdef8637863b2154c9ed1baae3c725958b045acec8d3e64b783b46654d9478129419e5eeceb3ab67505c2283a8e35b223b87740704cb3f8aa6a9f70e0171c3a7ba24b80609633133a61a59016e2f3d25a93950c6f556bce1978c7ca9fe0c515003e7b03de71a7bb1ce65f2e2640c7f03bcaef018ed5d6d0ee31a1885847cd4ad387896070729b0d6b9637e55bc8c13617dc02fa0e5ee020a3d94f58f1a0c40653d51febceb0a1c5b0edd2d931aea573af0648cff3f8d5362b0f9215a936be8cadbd364ffde21bc538769494eef9d565fe5f155e7d337e36f3e2ef6a07433b349a1a7dd46ec127073af7594f8fc9ccd32013de13b056fea329835e05ddbcecdcd83f7b9574a11dba22a2b6335f117e110a9491880db3b8772e5518c187c31dbc859ad324a6cb6359820508896c4be4c0a2c83fde0af8eb357ca2cfa7778973fa14a361ff91b91a3f9f81818c88394c3790c8e3c5136ae06dbe4b8396784619dbfcdd02df4798b09cd94b18edaf6a3e089fac3e3e6c045e47bbbfbd969af7dffbd72d5e11d265b0043eb4a40369805cf6f2c7c5d8c8f7f428c3ec8c769735aafe9a04fa974f6fa826a9fad8d8c9cf27acd34a13727d9765e8284219933932fab49741fc56de0b66dc5c2aefcff43830dcbae0f9b909d1d964fd548a98af8a4a579c76693f16b438a127d76b9ab24e6208bccec970333eb24976497f2f991b0e5e242ade8d3249bd19daa6e725e643b16a28497242922dc4ab6702afd89aec00d5ad9cb693b80587911518acfa7e3703b9ab1999b9b8a55909bc9ddc34fc8b15bb2487d316517fd04508388e3155e896c43388638b937510fa395d54d75491e4422623ece4bbfeb1e1a7d804eba2f8eaa8b4071b778d19a59304cc62d416ef097beb4c52aa2f15624ddab55c6d13041d1e5c6fffcf536a9c1f78e5987128fe4b5c087c4fce4c8c5253d7493ee3cd73834429b69aed07287f583661ff98a3ad3ae2beb5189a22cb9fe613d1695617eb649096b17c2acdb9fe6412aca4e64aa4e27634cf5f1971360931c296ed05d99b2165f437891198f68e0f91510ce19e9df43f76a67ba472471fae94dd3370ffd534039edf5bd0061154abb2c5c456cf4a8cbed8e5bd8946538932de9394d4f1e213db363b12265807ca84176b17480719f4c11466efe4e229f132d22624f3f5568f7e9e4d07fd14ae400a757f0e81f39e559944440172a8b68a9b7e79bba8e3a9c4742b402a3d0ca373380d5892f5e4abef78466aa5744a45d2b0186a39ed74fd46a8ad79ea24b75eed8ee07ba45f7a9c7f416e654f5739c8deee753fac039272bb9208b791af3ade3c38c47cdedb01b713c76ebd6da50f0f6bf82824093cec0df92b9a6aa579285d65365788ef193c328b4bd0f3257ba6b14555cd7d267e9eb20d9bc5391b2996e7eb788e9244f175aed1b3135508ccacc75e254ccf0e9c542c634277409b4e830ed0c199536ec36b7b0fa0d0f1d57ee5cddb3d234e33bdf079b516f5a3af6c93ac54e8cd5a4be45ee7ae6418987c2a47ead215aaa4e84c9f0668e191f31da41ccec33a5fad91afb57823b702fb86cab1184955f2eee0f4b54cb2e5692d90f613b4125a9c0efc6bf5499e6b0af1094ec1e8c85da97bc01875366390e343fbe15b928f70dc608d1a1df2830dd5c7fc5710e879c2f113694712cbfb97f86de4e97189fb43cf10a30dd5ca93251420d35b3d4b4632e7c039050ffd68885864797740503a2883a53235f6f312b59f04d6e8139df3df7e6f515b017b720810d07a2ae5cccf2ca6f37cdcb61e19046a537c0398e0e1f84fd1440a6079a80585eb88213f104ecaa9673f29275197b55fab3f97b8d6b0699c1ed4db2d671007e0d5633562706d71e1b9ca7fe0f1f0fa848d36d48e9a0581c98b528454170833158f4adca8f34182b5dad76e39f37dba1702ff42977b6a2c9a64c2c4f554173ffe0682df86578ea7be83d2de6f895dbc756430479cc7e0add4688477f0856a62475e0a15b9449404dd4c8f438dc2494569fcbced02e08b579c71f3fa17895ce84d357de32b11da128ea7162cbf8bcd40397c62e87889ff8a17fb9771be4cf85563c397f9b8ad37327eed554ed94775a0331e571171b72a15198ec5cb835482908fb9291c6798cb4c6353b8b4ef07c333a0e79248f85181538fe00b3973571cf83931e8c1c7b2d289b2807f6f09b075728382ffb76dd285bfa74a09d5104c3348748a0797a2edf0264e39d66335fcaa20a6406e6f730506b6c47c452ef7e147e9b979042bcdc01a77fe4a155560547b6b9b22fd5a72c93b925f9023d901aea38364f8a8e33c8bfe8ebd6d4ef13063dacf56c9d9bd8e7f592b81e7006687ee92316f7134f9c41fd4e12a202ebdb3cd4f23771a22921d5eb93282f23d929a5e39471fdfe7ebe4fe2e05d31231daa654627337026f3d2f47689809bde5aba579cf5a72c0281c4e23aa6f1cca3618a7cc7323fcb4d504807d06f403e0284502248c96432bb0bf710d90b834a1c2b90b50c8890a3916dcd392bc29ad8a68b99cb140b916c74afa5610c034d67cf2d344f635a0ccdd0c5adefdce97b15d692ad4cb556416a6ba8d62f6e1fd2d4cd928619f179d2c39d6ea10d701e6370ecccf4d4b3e04d6a212f0726f0fa94af4637ff718de085bc9e732d1cc8e9df6ee479c46782a1175d1f1f6d596b0b1d987e7bd1b55014a8fa1c8d21c2f093c06d1f7c981dc848339984515843fa3f544b265ce4482220f2d76db83979c48f931b6e703f3eeda9010e53d7268eb733477dbea5525410b3e234c4ee12d95f41d4f8876766bac7b9e521f56d95209c04aca2f0f84bd98e5a1291ab5c94e83848226fae1b792df6c3856285d7345f3beb69b4234d6514d5e6a828da75bfc3b4df804fad27355c6a93d804a33e6d50a714682ae160983cf50e009556b8341d630353c5235551d904b331df750a14a78bbe18352d1a6fb21aeadb8e4c1d34b19e351385f388d9a15399d28bf15401b6c7013a3cf8ccf4fc3a65b6fd214d66dd9aab8bb3c9b7f401f94f6177929d476dd9ad71680e4fd5aea99ac9ce92693966da413619e4e30fed0893aaa65fd6cacd6d1231bae368e44e2bf8319de65dfe03b06ec0bba79b2cc6ac185025d40001ebc22e9b6037b51323a3bac1c35d57845e292644a22559c7c4989488b7a7ba28faf967ea3d43c8ea45a1c2617c7ae04b6ef29d3cf503398dc4eccb633b09900e2690f3cd0bdf1ebbc7cea11c221793bd68135356f387d8931c4885c3f918563384d40fa8f8407e9361f9878bde555653bc78fc61194af6a673bf4d6857863277142db025fb2afe49a6565aee702ac3583f4659cab494e9d979897063ca7a9bde7611d9b36614f62da52d3bb381756b7b56090f3b266e978694bd13e9a44be4a4eacd2aa3e2fb6e0994d2b44b9b8aff8c4ad23f875fd2fe69b21f2fa5b177eda55de9f5919d4d52b8b740816eda60c779b57223ef18faefac1d468677f675b3b5fdb9011de681a8aba717390b8ac0d2aeeaff6fa8375bfcc2719391ab91e185340337a5f093cc6907cbbd1e8cdcbec2d7378b14a3a1e304fab7ee48185435d94e0b6396215e74435f88f480401c256b40ac6a7c55aded165731c324ab021011a73c736221c9ae0a0633e5be48e650e2ec55e5e4699dacc2d8582339257d4ce346d6b1d7f851949f7ac55fc41df7ef10e0987916936a23aaf0d168e03ff9e4ff5abe3eed032b487f1a89124db48f161c43430c319c5e0d7b7cad514612880e4c02a6f5f1db833d262bb352797a110c1bf9a8fd74437a8ea3553276041f1258c9102c5b258c21666d93b8c2ac8635c847bf53baaeb91c8fc27dc064762af99b8e2f4c701363f282e28927a01960e034e2f0fd6937f06f198993c49b7cb72a44400cdca801b5adefc112b3fdf134069c3682148341f1c0e932165c345362ca60dbd5e2ae524186465756269da2ce81dbdf86779283f60b7acafe5178817470be13ce2cec33beb4b3d4f7f5b0c51181bfe66ae1176e036632bba7ebb30fbb4d769a1be6902f7c4c53d493f9c36b074dd0832ff5a894a6a028fcf9afe8bf2b97a7a62fc0d8f5733da3c78944a5cd9d7abf1ae4378ed548050c0b50e630c65475f67551eef1c7462fe6cc831eb7473df5d44cf59f55692f7077fe1accc6006f183b17448d1451d8ed654d24fbddf4616b7aa111776e68a0b49f1dc3a5476430139757a99dc258a91e8b470c2932f484ce104e4884ee23c0db337575736a8c2fcf3eb11a97255ffa4fb59a1be86704b1a6a991be910180e91126fc18d1373d1362b28b2dc0befef599e093f4d78d53b6baadbea95704e4e189b23cb66433f8b96680bf073205545d1c8b4e1269de7d048392f7fe16dac2de3fe09f987591ef05652f8211cdeb07f044142b340da027c770d2d2e574b670f6f0e03225b5daf08046f55f07670962197e5d13b0bf6c1a6113880cda33dba21bb0f6c8935965c85d4afabe7bb6489a997d6ba58de760500a14f60882684de97ad00de64e3824d49988ced8c2513a1c03e3670027e398417eea644d7d32d8905730a2567e54c28f0eb1c464ed4c21a5719bede1b24423f78bc8854527bae0c0de7a74115355f5ded96b77b6367ed459805d82664ef4959f8ff13c9e7caa7feb4b05be5ba5ad767a57e3282a25878510abef1ac89ae6953dedbc00de254a737e32b589ce358fef2a616e9856c9a47c1171c3b0ea5ea1389f9cd23a3dc26b6140fed7a931e1345163cefd7369b2c0bec349a7dd862ae216562e3ab9a937948d5cdc721ce18a59e223dc1e9f42517ed5ad1eb8be74b3b352662e986687c28e884da24e67c5923e2f6f3c8f31a2ac6c2436e6e51748f6b73c7f9f5375d4d49412880b9232cb5ddcf39a8085a935b2ae7f2246f4b8b901b129211d4502b28487ec97845036fb4eb9e7a1df0d07a70f70ea48e3ad081d9e19e36edaabc2ced201e2a0795cfb8c7332083361f3008b87f21500999b3fc1915068980452db5aec7fe8c665cb385df95b719e3dbd140fe76d22c5ee69ee7618ff4126a6d7b8e941652db701d9d7c51cf74e630de3d9467802d917a8f0ed1f20d90c46aa41aabf92e2101b0052cbd1b1b84e3d4c8e494357e2715996ec97cd7ac138d9c0d0e1d912054471a8cc53a3ca5d4efc1c151b19507815984f3757d7470f8a7613652c63945b56dc72098c844bc56ee969409b68117cd0c2225c5cc09f395358e93471744553286015837a5a5f855af377fa540bf2525080915668b706e327f5dbb72937caa5604b69a0e78afc4eae70116928e223cb21f837db4436987897a5e2bf02351287e1071fd7fb05e39f07cb83f57de564a77ad664f74e5f91c7bea297247969b6c1e8fcf17b86c79f91cddb1c0bef696127723e60cd3d6ed269aa2273c90a3512c28f236d5ef226ad72958ddf3f42d7828ce26bbff9da97beb2a91061b808d0eecc14d76a5fbac4a4bdea78ef8ad443a9ebcce9a460d6e948db58793e9e029eda51f7b1384a97d50122a12a39ea8203b3a3051a7417e713e16446d17050895e2ef9f358f44dbea8b72f22e1d95699a2236ec68106f7c8caa1dabb01dc4cb103bfd72ce8d09c02741348fbd54ca3ee828eec3e1f4c161b0964fe162adf4f3cea2e79f7b1df8d33ce9718eb5f97436c2b3826275e5e4d035c8e118e261013cc171b6b066952125d9996c11dfaca9e17916081f11122abd6aa14b767cb00aa8cfb2f980a39c955d67565fb1bb2bfbc4bb7ea0151e98d602b86cab5c97038d00601ad7682b1ff1a5358722baedb939c11894c99b2058fa312a410bf26275ab2d7072b7345df89721ac5d778546f01d3cc3703f034c032da1a7f79351a44717a1b268b8f230b88d9f8d04647fe611df0f35bb655c75a7b7823d14689bcd1aa522711542973fb15459ef0d9920203537798a687b53a03340a9ef38fcd45dfec108ceb76c9d45d5fe2992a7dafa43615fcaaeef0fd86969f8e23fb3eb8568023ef879bcd2cbb5d8b30ab8bc0455cc549bd9db43f09a40fb93ff9e2e0aa0ffae6dee65a7423849e762f385294c7fa84174e73fcd9978203ad59a0363d63c9bdae360d6c266696343ec148d7984c9afd03ac8362d06dcf7c838e055eefb245f011a76dcb3b6f48fb0026b4daa970b18023aa2d27a45b5acb551815f90d0f6c9a149e202039d360737c3f803c0cf2610d1d410534a90f55f9873dc1a8090bcfc1c4c50ef8b7b5c554379ecb52abf6a08edafd1dcbc0896d344f8d5cb8877429113a34fbfd610f225ec399b296f17d74f3ea2878c81aed7b487d892b2fbebdabcefa59a87c50e860680d2dd524d5f46a849a1eaaa137db93cd772e7912e8ea42e2d01fd79f6ac0b5836ba3da1ded44d3f4632e9b41b721a9632e788772e7b46e65bdd6fe9b7f5797d4d42a3c68b59f6487edeb4d22fa94c0b7c77386227c3f1d6d5dfdc58dcd1b90dd25cd2ee8d82713fda6411a6cc47f4ac5c6d03d7e9cf51b73227bc006ba12f40c3bf8f0fc8256ca478dd59efa07b356aaae019ef77c2433fe5977eaa6ca6bcd5499a3af50f7771b83cba888f3b2b2a48b0f065d79854c04ca27d2350245c68c83d47ea824c4ab7441f97742f1b0c5d3323b5f093d4fd6e2b35cf2f0191b7f83e2efc304c02fe9b85b9f3dc09ff9c42f317b2a277372918cb574be0fa2e62b5d170c9e274cc8dd84a6763268dcdcfec692acecf50f4352ddb2c2fd5787e882e7dfb84e47c56bf9fecedadeba20d1e6f08474e686b693a4d08354971d973a0d21086ce1b01b6b39c670ef7decbcf1ac4b324458d048100d5289bdbecd0df52c0f13ace2fd708f9811c35d42680e130c8a4e4f263e6fa6861cba4a644f9e5fad77f5d3981f3590fe6e9478b39579d77160bfca31bbcd0ef4f693d823dd897fef019a81245d04f4eeed5a331712e4be41787f4685446444842d8e4de99355568aecc1124d924cbfc17a48b7b7fc85913c9eb02514ca625dd7e260b0f176bd34b4ff2a3937444bcb0d6471cce912cbab9ef5aaa3b80e742a4df89e56f02b2523b405d1617bbbeec6ca70e0ee491f3d798f0da6f413b2a074250db9e04fcafe9d24077acc808fc1b299bc006d9ef2bccf2c4e30cc3a8117f9b489c2773420173971e390a19176786e908a083b01e6975b8beead5beec6a6cfc4aae16856cb770abcba096db08b7bcd902dae3432261273d5d57aded0c065977a85788aecf6a88d888391cb15f24a580bb52147889814bb87c0fe54e7cefa4b6383521ba7cf5e50d23acc23d51f91cfedc4a83ced1c365e58a87c37db9a21e854d30050e06fc72056f5951208f02ea6018d02ab6409bfc40cd52af4559cbc2f9c1c8af3efebd2bc0c508d96727726b17e59f95930b9cce8b87aa89e8fd24c2177f46a3f9244fb0dfeaa5225636acc2e548bea63a21e496cc4999c8aa3a5ef863ce71f895aa392e11ea6e6896f3478fc6b645931845f912ac330ac591bfc4cbca0846a414423c7302b99c02841b7f8c326332f7a112e3ea6e651e55136651077703736c2a8b9322b85a0d599c84a6ff6909f86bf2c897e53b1f15fe674e4c0f42c4e4dda7868553a9f0a198d52b3bb40090931f137f238e3e981fa53b13b63632416e62467ed4a91bfd5e750b0103d5ad537463febc943a2ea2c332094629c7bae69bcecdf19495a23e64529e6a49fbee6fa3eae7b5bb5e5806bf755ba14d6d7dad30188f868442b6811e71644dcb52f9a53b8ace29dcdfca4a9f257967f5d2ed435a6a2d023fe50451588aea52a8f6a8da475e39efb396d4cf5699581da2127c3633e58ff9db7492a24025b1bf7c354222d80141ec0e4be75ff59e966e0aa883e136f4941685db6209791d134a70215502850e5c2cefd14b451968e8845cb23afb4c2cb3c9e68148f53990868ecf23faa72249b6deb4ca24a7b218fceab206354f5f6a4f806527a9990c24bdb6ea3d9322853a5c32a3a8da2b6ef88d86692618dc25d1e30d0e4ff8383c496e2677fe2c2f9080cc872d490034a1356abc1a3e1339949ad01f0bffbe26a450edb794f4ff04a95b49f681af9998c1dccaebc4a06e63d71a40be89bed24555fe0f41a9581e9f04be70612011c967023eef6e8b1a329740c1e22b7ce3f3fba7f83f975af57e6c5bb0256f57d80e0008376274fe3a1acaa51f758b678baff32780a8e129b17f3c2e5a49202a86012214b53efd97af3c6c88a972c35c1f75e7cc540051dbd760ce7621ac5383033841968773e488e8b3e0faa7d0f90fadca083040c2e2f57e24262547a04e566dda583de75b056dea4127fbb89b6960d43848cc493d1b119d09daf45e854d172bdbe1cfff1ad0613fe6d03c4a6adbc87424ab7626e622625963b47f12ef5459f9b9dcdb84b64b6480315b1c226357fa572420dad71346686310a3e604f59794604d649d052dd3317070a9958839590cac23cabe1d899acd3f65ab502e5fb74dd12edc6408e08273392354c991c4983fb1c0cdb6d7811fe7bbb32c7fa2829e026cc72f7b90107aab1502c585c29586d4e011ae1fdda9dd144cecf6741f6b6d51806bb5aa5446f2f317918734adf367a6d9a4586da6cbecc54c90f862088a8d2bd1fc230554c82a51072d3811e96f10f0a8834ae4c32cd49fb004cec4b44d3f00f8acfe63f73b2c96b4ba7c168f1dd5e4e2c85e671eb452132c853e5bfba1811a83a445ae484d7eaaea0c54f20ecb4fb554afd083f744af27417b6b2fa5c00e74b24160a6abd2872a02e7996f5888992444e646704096486740d7c76678ace2c45ce2ad077c39449722163305d43fba0aec33cde89abb216ff8467839f66c1c008541ce4db46ca7466478c6c3d3e47640b77637e1e00c7ce6c5a1f73fa70447bfa3b8ffb1d95d5190343699b2e0ec19f0dc438087bea9a3aa374c79ee95155099a70b828193212f1204f209c308dd472a58b6ca496beebac5eae9ebfa5192613472888e27d98125a6087c16e63a65d33b46e4a037aaabeaefee1b97f2baba77319cbfcec434eef76200f2ce51b06ea6113e814b19cb8d83fccd0e5b7e12769c15a2b3c89e928a6fce055174f4e884b934b9c50ff7a563872a20f12e49379d2540b88db6b950337f779027e703129a9b9cb2af003440d5f2ce031ccb83fe96847e94023ecd960e4f93e546c722d238afb446818c3f6306db0518d7e6f1df5d1cf5f5aa9b244d167661e8ca3a8831306068d4ffe8108da4df13c534d5ebfb7c04bf851706e60ad2df1b638b13305b7f26dd0e3ce9cab8299a6a442b61c88b3a254a37a81e99aec1af164f3bfb7bb078b284153269b8ce89238e413f68512b2298767e6af9d2ca3f39a48eae1ef4cc1b0882d763d1df41cec8edfc869589f7657832b9e4dd4be90cd66ea4c9a1806c3cb9577f9c0de08722878333cf9f26dbb5b20574474a7ead91c4bb3e915e718e8c628cf71c5656c0883a28ee29b474d59073b9f5fbbb26fc496532cee4ee0e17a4e8faed1b5569e5d4097b11a180d5e101b496df9b39dfd59019678b1b58e561f8542d230069837ffdbbaf97559ad2a58ef20e2068de50686aa852ebff1b9cba21658c4c6166e89776aada548586ec31beedb36ba3b64c28bdf5632f51aead81784cc551941710c691c24e15a33515b4b90dc17f0346fbbae998750ea32ad0318d9132c6aea5f464fccfab771b74d4d186725250fd0f6335b8df570bc5d079712380c1ce9598a35f36900b742cedc90e6f5ba60db5b58b732da4c2c2f5c472e5354dc0fd354f94c3ed62562f9df7e76252454cb0313984ab6aa07062242124f21ac1b4bb139efa5b3422521db65ce8a84a90761e55826720dbcdfc852f710066f004a7e05d394407087a70094b84261f8c242e6fc4ebcd6a9b5c0b22f57928a2c2e224b2f1c85b68a9d70f554acf5e30183cb86a5209189596a253fe83afd0e6ddc7fb0c8b32a5d92e4b1ce6193a4085905a235ce05002e4f4f4551bc6af915c05a761b30c110956c8ff334e6ad6f99de040e6de3f6a3ed6f4d045afce31f72da9e6c27cc40b6e92836df5d489dd9d678e88137099cc8355d5096898388332b3979f256df5f10f4ef166e1580867bf4bec251e7d049a0d7cd2bd635ae533cf4e727cbdf05534bf29b7d410516c8af62b4a880a65321c6c4f63ab04334e33ccb82ffa08537f60cbd57b66911c68c422188a064e6d6d941e5184251c12e8f081bdb13422cce27bff60c335fabbf4908eb031f942c91882475e2af604424f916110785adb154d7155de53defaa7e9d2eb871a096395f20bef874ba19c9f66dcfe801f942eef29bda9dfa3cd23696ef0bd7e7d15139858455e5b0d971e7f790f157f0350585146a15e655393583b44ee05b9690e826e9f50dad65f329367c50b34d89ae27dc50c682188e773c2121ec547325e82ef42e99bd2d75a1a5de62ebc7fae5d1e5f15ee4392b23f11f904bc410d2873a87918a8bab77716b8616aec2634a0306d00fdb7190dba2f348d2731756b47f2950c78f649e856ffc5491648ca143936f49e14e3f2d737c6e31e68ebc4fd4fdb45b69234ed5234c254201f80926e4efe0dd3fd76806e119dd96a58b56401c4651b2d8b769e39c2fa808ba69577cf922f5745b146e72d56050f6f142dd0776f31e82608302146f90ab7f6b4e86b1fe23e3620dcdab5a231e8c986006495de57ca9e47969b9081cf87e08bcc41ad95bb0baa9621cc41216ccda378253d3f4114ff1158a04b4d0977fa23633bb88f132cc300832f5b793535b67ba5acfc0551838e1cc853bde9fc6f2ca988e3b13eb0f6222fce53922d02ba3d8a1e47fb95c84058dc5be3d88dc8e9d09dfcfd716c8de3a082bae58768636caaf30552ab15c4b350dadb58028b03b166a60b11ca841f6fb3c165a091901163a5ed1d0ffead5dd6fd2199a7a0a4df9142ee8980bab2197914c345600181bb4145f74eed289e9c7f6a07c572607d0998a36e6be6491be2cd4d71f9975142d60fd0e87d6b4825e1481477ebc3394e7f1d8af8da859308374232c80259a6c2b197ea2e4031915a867347a497c96958b67f717136653c9fcf260c1a191e27bf3747f181d10893e58e9b5aaad1e2b92657ed0ea9f215794a364345711b29eea59253d52e05f5c10df23a73b4ad64371cc062eb13a9c015c0550a72ce54ba2a991320ae2e211d42e1c7e0fb77a951191a678577110d4a9be2a02b7098ecabe8a1e88a50e0a1191a4c0a9f221a909676b062704366477c42db3531a09ab9ec93d770207c8d18a052c106b37fb239772d12bbe17dd9928cc326259f11355daba29e181a09356aaeae7521e822824ece9fcab7495a90ccebb66c4964da63d383b1cbfbfe21ffb17ea1a93fd546ed5ccebb02d29a3ef73e8323f5007cdd3f450f77936da79fa0b15cb485348d104ee3ea2996f066735d1b4c1a8b39bbdc8aef383a2f8a2df0cc115d1b2d5e7c208fcefe794a466e7083f93f8c245c3f1075398dad01986bb868f690c91f4fe25c64f9e195434eb07e19f7297168e3beb5e36db3764831c84068363426af908ffefe9599d0ae81fa925fc99a671e385f79df4bba02a4e25bf2fc25b571eb3f4676a488272bed646498de1af819251ae0a7ac05e8a19817f6de720efffbd2056f119e9b4017b5f874524e6bd93396a24fe5df87888ee69f677f40fe800807c2811defa0e77007122ec40536811a9d31f2da1144d8ac9d77ea82984ccb25516c4bb64dcdac5f4099a4dbdeba185d6b5d333d8a08244292e7f5f5d033c8ea0291fef1f052d43a0acf5a967bac7b87015533f410c259bcf35218f9c4b1c65555e6e6e88bdc8ce1bf7a4ce6e28bf89facfadd9d13b8cd4b655c9be0aa551486283b3a9ce12d57ca0aad76c08d4ff27753d739e8c2b1a33c6125c656c96b39db9ca2dde0e1a7aa5b6fb7273fa89e22a26ad109fc187f16ffd4f7d0dabfa7deb6c3f6bf057cb0a513e25428540029ed266fae9da2cc5c6c1c65d05234ad5f3d24ccdc24f1ace1ed21fcdf0831683a52d261d9ca9c61f4f7226a7e2e75d5aa59dff38d221a33debc34c3bf760ca5d49fb67acca52e3b75ff4d48cb577d031370bd7557a1107e2a74288d29d296f6974f3ba05bf52bb3f2dc49679db452e7e66642d7085e47716ad73371ea6122c9f2aab5db8c3912e8a4438495a300aca40553e26e80b7cd3eb6d7621171dd842694ed9f3a1af8610dee4a40e6f210b06e41d1dab84e5ff4ab2687b936b7ae940b16be42213c66e2b2aab3af31e5f459a581cefe3aaf5267cff27d496218fa242c53a92ad986f2e7e0b135171b8be1e7756b1eec8c71d1e6b6af97d6accee2b2c132f5ebd81fcad0d182b62b524685904f57906afd43457</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="re" scheme="https://wd-2711.tech/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>react-study</title>
    <link href="https://wd-2711.tech/2024/02/09/react-study/"/>
    <id>https://wd-2711.tech/2024/02/09/react-study/</id>
    <published>2024-02-09T04:27:43.000Z</published>
    <updated>2024-02-25T06:15:06.729Z</updated>
    
    <content type="html"><![CDATA[<h1 id="react-study-notes"><a href="#react-study-notes" class="headerlink" title="react-study-notes"></a>react-study-notes</h1><p>I will learn about react since i am develop a image caption demo and deploy it using react. Study reference link is <a href="https://zh-hans.legacy.reactjs.org/tutorial/tutorial.html">link</a>. This link is learn how to develop a tic-tac-toe.</p><span id="more"></span><p>React is a declarative, efficient and flexible JavaScript library for building user interfaces. We can use short code segment (called component) to build complex UI. React has many different types component. For example, look at following code:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ShoppingList</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;shopping-list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Shopping List for &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>Instagram<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>WhatsApp<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>“shopping-list” is a React component class, this component receive argument called <code>props</code>, and show structure to screen using <code>render</code> method. <code>render</code> method uses special grammar called <code>JSX</code>, we can use <code>JSX</code> to build complex UI. </p><p>Finally, the code will be: (pls look details in <a href="https://zh-hans.legacy.reactjs.org/tutorial/tutorial.html">link</a>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Square</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;square&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;props.onClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;props.value&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Board</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">renderSquare</span>(<span class="params">i</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">Square</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">value</span>=<span class="string">&#123;this.props.squares[i]&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.props.onClick(i)&#125; /&gt;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;board-row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;this.renderSquare(0)&#125;</span></span><br><span class="line"><span class="language-xml">          &#123;this.renderSquare(1)&#125;</span></span><br><span class="line"><span class="language-xml">          &#123;this.renderSquare(2)&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;board-row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;this.renderSquare(3)&#125;</span></span><br><span class="line"><span class="language-xml">          &#123;this.renderSquare(4)&#125;</span></span><br><span class="line"><span class="language-xml">          &#123;this.renderSquare(5)&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;board-row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;this.renderSquare(6)&#125;</span></span><br><span class="line"><span class="language-xml">          &#123;this.renderSquare(7)&#125;</span></span><br><span class="line"><span class="language-xml">          &#123;this.renderSquare(8)&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Game</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">history</span>: [&#123;</span><br><span class="line">        squares : <span class="title class_">Array</span>(<span class="number">9</span>).<span class="title function_">fill</span>(<span class="literal">null</span>),</span><br><span class="line">      &#125;],</span><br><span class="line">      <span class="attr">stepNumber</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">xIsNext</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">jumpTo</span>(<span class="params">step</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">stepNumber</span>: step,</span><br><span class="line">      <span class="attr">xIsNext</span>: (step % <span class="number">2</span>) === <span class="number">0</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> history = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">history</span>;</span><br><span class="line">    <span class="keyword">const</span> current = history[<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">stepNumber</span>];</span><br><span class="line">    <span class="keyword">const</span> winner = <span class="title function_">calculateWinner</span>(current.<span class="property">squares</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> moves = history.<span class="title function_">map</span>(<span class="function">(<span class="params">step, move</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> desc = move ? </span><br><span class="line">        <span class="string">&#x27;Go to move #&#x27;</span> + move :</span><br><span class="line">        <span class="string">&#x27;Go to game start&#x27;</span>;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;move&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.jumpTo(move)&#125;&gt;&#123;desc&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> status;</span><br><span class="line">    <span class="keyword">if</span> (winner) &#123;</span><br><span class="line">      status = <span class="string">&#x27;Winner: &#x27;</span> + winner;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      status = <span class="string">&#x27;Next Player: &#x27;</span> + (<span class="variable language_">this</span>.<span class="property">setState</span>.<span class="property">xIsNext</span> ? <span class="string">&#x27;X&#x27;</span> : <span class="string">&#x27;O&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-board&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Board</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">squares</span>=<span class="string">&#123;current.squares&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onClick</span>=<span class="string">&#123;(i)</span> =&gt;</span> this.handleClick(i)&#125;</span></span><br><span class="line"><span class="language-xml">          /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;status&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">ol</span>&gt;</span>&#123;moves&#125;<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleClick</span>(<span class="params">i</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> history = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">history</span>.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">stepNumber</span> + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">const</span> current = history[history.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">const</span> squares = current.<span class="property">squares</span>.<span class="title function_">slice</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">calculateWinner</span>(squares) || squares[i]) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    squares[i] = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">xIsNext</span> ? <span class="string">&#x27;X&#x27;</span> : <span class="string">&#x27;O&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">history</span>: history.<span class="title function_">concat</span>([&#123;</span><br><span class="line">        <span class="attr">squares</span>: squares,</span><br><span class="line">      &#125;]),</span><br><span class="line">      <span class="attr">stepNumber</span>: history.<span class="property">length</span>,</span><br><span class="line">      <span class="attr">xIsNext</span>: !<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">xIsNext</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculateWinner</span>(<span class="params">squares</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> lines = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>],</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lines.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> [a, b, c] = lines[i];</span><br><span class="line">    <span class="keyword">if</span>(squares[a] &amp;&amp; squares[a] === squares[b] &amp;&amp; squares[a] === squares[c]) &#123;</span><br><span class="line">      <span class="keyword">return</span> squares[a];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ========================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Game</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure><p>Note that if we need get many child components’ data, or two components need communicate to each other, one father component will solve it by save child components’ data.</p><h2 id="Image-upload-demo"><a href="#Image-upload-demo" class="headerlink" title="Image upload demo"></a>Image upload demo</h2><p>I have develop a image upload demo using react, which frontend and backend are all developed by <code>js</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// frontend</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Define save image variables</span></span><br><span class="line">  <span class="keyword">const</span> [image, setImage] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set image data</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getFileInfo</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;File info working!&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>(); </span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&#x27;image_file&#x27;</span>, e.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>], e.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>].<span class="property">name</span>);</span><br><span class="line">    <span class="title function_">setImage</span>(formData);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Post image to server</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleUpload</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    axios.<span class="title function_">post</span>(<span class="string">&#x27;http://localhost:4000/image-upload&#x27;</span>, image).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Axios response: &#x27;</span>, res)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Display window</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Image Upload<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* Upload button */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleUpload&#125;</span>&gt;</span>Upload!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* Choose Image to upload */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;getFileInfo&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// backend</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&quot;cors&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define image process and storage</span></span><br><span class="line"><span class="keyword">const</span> imageUploadPath = <span class="string">&#x27;D:\\code\\js\\react\\image_caption_frontend\\server\\images&#x27;</span></span><br><span class="line"><span class="keyword">const</span> storage = multer.<span class="title function_">diskStorage</span>(&#123;</span><br><span class="line">    <span class="attr">destination</span>: <span class="keyword">function</span>(<span class="params">req, file, cb</span>) &#123;</span><br><span class="line">        <span class="title function_">cb</span>(<span class="literal">null</span>, imageUploadPath)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">filename</span>: <span class="keyword">function</span>(<span class="params">req, file, cb</span>) &#123;</span><br><span class="line">        <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="string">`<span class="subst">$&#123;file.fieldname&#125;</span>_dateVal_<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>_<span class="subst">$&#123;file.originalname&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> imageUpload = <span class="title function_">multer</span>(&#123;</span><br><span class="line">    <span class="attr">storage</span>: storage,</span><br><span class="line">    <span class="comment">// Only allow image</span></span><br><span class="line">    <span class="attr">fileFilter</span>: <span class="keyword">function</span>(<span class="params">req, file, cb</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> filetypes = <span class="regexp">/jpeg|jpg|png/</span></span><br><span class="line">        <span class="keyword">const</span> extname = filetypes.<span class="title function_">test</span>(path.<span class="title function_">extname</span>(file.<span class="property">originalname</span>).<span class="title function_">toLowerCase</span>())</span><br><span class="line">        <span class="keyword">const</span> mimetype = filetypes.<span class="title function_">test</span>(file.<span class="property">mimetype</span>)</span><br><span class="line">        <span class="keyword">if</span>(mimetype &amp;&amp; extname) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="literal">true</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            req.<span class="property">fileValidationError</span> = <span class="string">&quot;File format is invalid.&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="literal">false</span>, req.<span class="property">fileValidationError</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define parser</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// Allow access from &quot;localhost:3000&quot;</span></span><br><span class="line"><span class="keyword">const</span> corsOrigin = <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>(&#123;</span><br><span class="line">    <span class="attr">origin</span>:[corsOrigin],</span><br><span class="line">    <span class="attr">methods</span>:[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>],</span><br><span class="line">    <span class="attr">credentials</span>: <span class="literal">true</span></span><br><span class="line">&#125;)); </span><br><span class="line"></span><br><span class="line"><span class="comment">// Process POST request to image-upload</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/image-upload&#x27;</span>, imageUpload.<span class="title function_">array</span>(<span class="string">&quot;image_file&quot;</span>), <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">fileValidationError</span>) &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&#x27;File format is invalid.&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&#x27;POST request received on server to /image-upload.&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start backend APP</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">4000</span>;</span><br><span class="line">app.<span class="title function_">listen</span>(port, process.<span class="property">env</span>.<span class="property">IP</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on port <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;react-study-notes&quot;&gt;&lt;a href=&quot;#react-study-notes&quot; class=&quot;headerlink&quot; title=&quot;react-study-notes&quot;&gt;&lt;/a&gt;react-study-notes&lt;/h1&gt;&lt;p&gt;I will learn about react since i am develop a image caption demo and deploy it using react. Study reference link is &lt;a href=&quot;https://zh-hans.legacy.reactjs.org/tutorial/tutorial.html&quot;&gt;link&lt;/a&gt;. This link is learn how to develop a tic-tac-toe.&lt;/p&gt;</summary>
    
    
    
    <category term="funny thing" scheme="https://wd-2711.tech/categories/funny-thing/"/>
    
    
  </entry>
  
  <entry>
    <title>tai_e-static-analysis-with-homework-2</title>
    <link href="https://wd-2711.tech/2024/01/29/tai-e-static-analysis-with-homework-2/"/>
    <id>https://wd-2711.tech/2024/01/29/tai-e-static-analysis-with-homework-2/</id>
    <published>2024-01-29T12:36:06.000Z</published>
    <updated>2024-02-08T08:00:18.761Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Software-analysis-foundation-amp-homework-2"><a href="#Software-analysis-foundation-amp-homework-2" class="headerlink" title="Software analysis foundation &amp; homework-2"></a>Software analysis foundation &amp; homework-2</h1><h2 id="0x00-context-insensitive-pointer-analysis"><a href="#0x00-context-insensitive-pointer-analysis" class="headerlink" title="0x00 context-insensitive pointer analysis"></a>0x00 context-insensitive pointer analysis</h2><p>This homework will accomplish a context-insensitive pointer analysis, and build a call graph. This call graph will be more precise than call graph build by CHA. This pointer analysis algorithm handles 4 type pointers (local variables[Assign]/instance field[Store and Load]/instance call[]/static field/array index) and static method call.</p><span id="more"></span><h3 id="basic-knowledge"><a href="#basic-knowledge" class="headerlink" title="basic knowledge"></a>basic knowledge</h3><p>Pointer analysis will affect many types of statements, look at this table.</p><div class="table-container"><table><thead><tr><th>statement type</th><th>instance</th></tr></thead><tbody><tr><td>New</td><td>x = new T()</td></tr><tr><td>Assign</td><td>x = y</td></tr><tr><td>Store</td><td>x.f = y</td></tr><tr><td>Load</td><td>y = x.f</td></tr><tr><td>Call</td><td>r = x.k(a, …)</td></tr></tbody></table></div><p>Some domain and Notation characteristics are filled in below table:</p><div class="table-container"><table><thead><tr><th>domain name</th><th>notations</th><th>explanation</th></tr></thead><tbody><tr><td>variables</td><td>$x,y \in V$</td><td>nop</td></tr><tr><td>fields</td><td>$f,g\in F$</td><td>nop</td></tr><tr><td>objects</td><td>$o_i,o_j \in O$</td><td>nop</td></tr><tr><td>instance field</td><td>$o_i.f,o_j.g \in O \times F$</td><td>nop</td></tr><tr><td>pointers</td><td>$Pointer = V \cup (O \times F)$</td><td>nop</td></tr><tr><td>pointers-to relations</td><td>$pt: Pointer \rightarrow P(O)$</td><td>P(O) denotes powerset of O. If we have pt(x), it denotes: many objects have been give to x (x may points to many objects), such as x=k;x=o.l();…, so many objects denotes k,o.l(),…. These objects is pt(x).</td></tr></tbody></table></div><p>After above introduction, we can build rules for different statement types:</p><p><img src="/images/tai-e-static-analysis-with-homework-2/image-20240130182513865.png" alt="image-20240130182513865" style="zoom:67%;" /></p><p>Pointer analysis is to propagate points-to information among pointers (variables &amp; fields). For example, in Load scenario, $o_j \in pt(o_i.f)$ will changed to $o_j \in pt(y)$. So the key to implementation is determined: when $pt(x)$ is changed, propagate the changed part to related pointers of $x$.</p><p>Pointer flow graph (PFG) of a program is a directed graph that express <code>how objects flow among the pointers in the program</code>. PFG’s nodes is $pointer$, and edges is $pointer \times pointer$. Edge $x \rightarrow y$ represents that the objects pointed by x may flow to y. Look at below table, we can know better:</p><p><img src="/images/tai-e-static-analysis-with-homework-2/image-20240130184316878.png" alt="image-20240130184316878" style="zoom:67%;" /></p><p>For example, we can build a call graph for the following program:</p><p><img src="/images/tai-e-static-analysis-with-homework-2/image-20240130185239374.png" alt="image-20240130185239374" style="zoom:67%;" /></p><p>With PFG, pointer analysis can be solved by computing transitive closure of the PFG, which means: if $e$ is reachable from $b$ on the PFG, then the objects pointed by $b$ may flow to and also be pointed by $e$.</p><p>Then, we may conclude method to implement pointer analysis. (1) Build pointer flow graph (PFG). (2) Propagate points-to information on PFG. But these two steps are not separated, but mutually dependent. The example above seems like do step (2), but it also dependent to $o_i \in pt(c), o_i \in pt(d)$. In conclusion, PFG is dynamically updated during pointer analysis.</p><p>The pointer analysis algorithm is displayed below:</p><p><img src="/images/tai-e-static-analysis-with-homework-2/image-20240130191654851.png" alt="image-20240130191654851" style="zoom:67%;" /></p><p>I think we may feel confused when we first see this algorithm. Let’s understand it. Worklist contains the point-to information to be processed, each worklist entry $[n,pts]$ is a pair of pointer $n$ and points-to set $pts$, <code>which means that pts should be propagated to pt(n)</code>. AddEdge (red box) is build edge between two pointers, and if $s \rightarrow t$, we will know that $s$’s pointer-to should passed to $t$.</p><p>And as we get an item from worklist, we want to calculate what we need to pass (differential propagation), that means $\Delta=pts-pt(n)$. Then, we will call Propagate (green box). In this function, we need do: (1) rich $pt(n)$ using $\delta$. (2) for $n$’s successors, we need add successors and $\Delta$ into worklist. We know that it has 4 types of statements, black box will handle <code>New</code> and <code>Assign</code> type, while other code will handle <code>Store</code> and <code>Load</code> types.</p><p>In the above pages, we discuss local variables/instance field’s pointer analysis. Then, we discuss pointer analysis in the presence of method invocation. We know that if we want to do pointer analysis, we need call graph. Even in inter-procedural pointer analysis, we also need call graph. There are two ways to build call graph, for example, we have code <code>b = a.bar()</code>.</p><p>(1) CHA. It resolves call targets based on declared type $a$, this way is not imprecise, introduce spurious call graph edges and points-to relations.</p><p>(2) Pointer analysis. It resolves call targets based on $pt(a)$, this way is more precise than CHA, this call graph is also dynamic build.</p><p>The graph below shows <code>Call</code> rule:</p><p><img src="/images/tai-e-static-analysis-with-homework-2/image-20240130221520243.png" alt="image-20240130221520243" style="zoom:67%;" /></p><p>As shown above, dotted line ($x\rightarrow m_{this}$) is not added to edges. Why? Assume $pt(x)={new\quad A, new\quad B, new\quad C}; x.foo()$. If we add edges, we need to add 3 edge (for A/B/C), which will introduce spurious points-to relations. If we combine above algorithm with inter-procedural pointer analysis, we need build call graph to do pointer analysis, algorithm will change to:</p><p><img src="/images/tai-e-static-analysis-with-homework-2/image-20240201184026425.png" alt="image-20240201184026425" style="zoom:67%;" /></p><p>In this homework, we may need to analysis more types statement: static related, array index and static method call. For static related, the rule is:</p><p><img src="/images/tai-e-static-analysis-with-homework-2/image-20240201192709926.png" alt="image-20240201192709926" style="zoom:67%;" /></p><p>For array index, we don’t distinguish array index (location). If $o_i$ represents an array object, then we use $o_i[*]$ to represent a pointer that points to all objects in array. The rule is:</p><p><img src="/images/tai-e-static-analysis-with-homework-2/image-20240201193341092.png" alt="image-20240201193341092" style="zoom:67%;" /></p><p>Static method handling is similar to instance method, except: (1) we needn’t to do $dispatch$ to resolve callee method. (2) we needn’t to pass receiver object. The rule is:</p><p><img src="/images/tai-e-static-analysis-with-homework-2/image-20240201193803565.png" alt="image-20240201193803565" style="zoom:67%;" /></p><h3 id="related-class"><a href="#related-class" class="headerlink" title="related class"></a>related class</h3><p>I pass this section because we can see in <a href="http://tai-e.pascal-lab.net/pa5.html#_2-2%E6%96%B0%E5%88%86%E6%9E%90%E8%A7%84%E5%88%99">link1</a>.</p><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solver</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addReachable</span><span class="params">(JMethod method)</span> &#123;</span><br><span class="line">        <span class="comment">// TODO - finish me</span></span><br><span class="line">        <span class="keyword">if</span> (!callGraph.contains(method)) &#123;</span><br><span class="line">            <span class="comment">// add m to RM, S = S merges with S_m</span></span><br><span class="line">            callGraph.addReachableMethod(method);</span><br><span class="line"></span><br><span class="line">            List&lt;Stmt&gt; methodStmt = method.getIR().getStmts();</span><br><span class="line">            <span class="keyword">for</span> (Stmt s: methodStmt) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s <span class="keyword">instanceof</span> New) &#123;</span><br><span class="line">                    ((New)s).accept(stmtProcessor);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s <span class="keyword">instanceof</span> Copy) &#123;</span><br><span class="line">                    ((Copy)s).accept(stmtProcessor);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s <span class="keyword">instanceof</span> LoadField) &#123;</span><br><span class="line">                    ((LoadField)s).accept(stmtProcessor);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s <span class="keyword">instanceof</span> StoreField) &#123;</span><br><span class="line">                    ((StoreField)s).accept(stmtProcessor);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s <span class="keyword">instanceof</span> Invoke) &#123;</span><br><span class="line">                    ((Invoke)s).accept(stmtProcessor);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">StmtProcessor</span> <span class="keyword">implements</span> <span class="title class_">StmtVisitor</span>&lt;Void&gt; &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Void <span class="title function_">visit</span><span class="params">(New stmt)</span> &#123;</span><br><span class="line">            <span class="comment">// x = new T();</span></span><br><span class="line">            Optional&lt;LValue&gt; tmp1 = stmt.getDef();</span><br><span class="line">            <span class="keyword">if</span> (tmp1.isPresent()) &#123;</span><br><span class="line">                <span class="type">LValue</span> <span class="variable">tmp2</span> <span class="operator">=</span> tmp1.get();</span><br><span class="line">                <span class="keyword">if</span> (tmp2 <span class="keyword">instanceof</span> Var) &#123;</span><br><span class="line">                    workList.addEntry(pointerFlowGraph.getVarPtr((Var)tmp2), <span class="keyword">new</span> <span class="title class_">PointsToSet</span>(heapModel.getObj((New)stmt)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Void <span class="title function_">visit</span><span class="params">(Copy stmt)</span> &#123;</span><br><span class="line">            <span class="comment">// x = y;</span></span><br><span class="line">            <span class="type">Var</span> <span class="variable">tmp1</span> <span class="operator">=</span> stmt.getLValue();</span><br><span class="line">            <span class="type">Var</span> <span class="variable">tmp2</span> <span class="operator">=</span> stmt.getRValue();</span><br><span class="line">            addPFGEdge(pointerFlowGraph.getVarPtr(tmp2), pointerFlowGraph.getVarPtr(tmp1));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Void <span class="title function_">visit</span><span class="params">(LoadField stmt)</span> &#123;</span><br><span class="line">            <span class="comment">// x = T.a;</span></span><br><span class="line">            <span class="type">FieldRef</span> <span class="variable">tmp1</span> <span class="operator">=</span> stmt.getFieldRef();</span><br><span class="line">            <span class="keyword">if</span> (tmp1.isStatic()) &#123;</span><br><span class="line">                <span class="type">JField</span> <span class="variable">tmp2</span> <span class="operator">=</span> tmp1.resolve();</span><br><span class="line">                <span class="type">Var</span> <span class="variable">tmp3</span> <span class="operator">=</span> stmt.getLValue();</span><br><span class="line">                addPFGEdge(pointerFlowGraph.getStaticField(tmp2), pointerFlowGraph.getVarPtr(tmp3));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Void <span class="title function_">visit</span><span class="params">(StoreField stmt)</span> &#123;</span><br><span class="line">            <span class="comment">// T.a = x;</span></span><br><span class="line">            <span class="type">FieldRef</span> <span class="variable">tmp1</span> <span class="operator">=</span> stmt.getFieldRef();</span><br><span class="line">            <span class="keyword">if</span> (tmp1.isStatic()) &#123;</span><br><span class="line">                <span class="type">JField</span> <span class="variable">tmp2</span> <span class="operator">=</span> tmp1.resolve();</span><br><span class="line">                <span class="type">Var</span> <span class="variable">tmp3</span> <span class="operator">=</span> stmt.getRValue();</span><br><span class="line">                addPFGEdge(pointerFlowGraph.getVarPtr(tmp3), pointerFlowGraph.getStaticField(tmp2));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Void <span class="title function_">visit</span><span class="params">(Invoke stmt)</span> &#123;</span><br><span class="line">            <span class="comment">// x = T.b(b1, b2, ...);</span></span><br><span class="line">            <span class="keyword">if</span> (stmt.isStatic()) &#123;</span><br><span class="line">                <span class="type">JMethod</span> <span class="variable">m</span> <span class="operator">=</span> resolveCallee(<span class="literal">null</span>, stmt);</span><br><span class="line">                <span class="keyword">if</span> (!callGraph.getCalleesOf(stmt).contains(m)) &#123;</span><br><span class="line">                    Edge&lt;Invoke, JMethod&gt; e = <span class="keyword">new</span> <span class="title class_">Edge</span>&lt;&gt;(getCallKind((stmt).getInvokeExp()), stmt, m);</span><br><span class="line">                    callGraph.addEdge(e);</span><br><span class="line">                    addReachable(m);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// argument</span></span><br><span class="line">                    List&lt;Var&gt; args_source = stmt.getInvokeExp().getArgs();</span><br><span class="line">                    List&lt;Var&gt; args_target = m.getIR().getParams();</span><br><span class="line">                    <span class="keyword">assert</span> args_source.size() == args_target.size();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">ii</span> <span class="operator">=</span> <span class="number">0</span>; ii &lt; args_source.size(); ii++) &#123;</span><br><span class="line">                        <span class="type">Var</span> <span class="variable">source</span> <span class="operator">=</span> args_source.get(ii);</span><br><span class="line">                        <span class="type">Var</span> <span class="variable">target</span> <span class="operator">=</span> args_target.get(ii);</span><br><span class="line">                        addPFGEdge(pointerFlowGraph.getVarPtr(source), pointerFlowGraph.getVarPtr(target));</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// return</span></span><br><span class="line">                    <span class="keyword">if</span> (stmt.getLValue() != <span class="literal">null</span>) &#123;</span><br><span class="line">                        List&lt;Var&gt; ret_vars = m.getIR().getReturnVars();</span><br><span class="line">                        <span class="keyword">for</span> (Var v: ret_vars) &#123;</span><br><span class="line">                            addPFGEdge(pointerFlowGraph.getVarPtr(v), pointerFlowGraph.getVarPtr(stmt.getLValue()));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addPFGEdge</span><span class="params">(Pointer source, Pointer target)</span> &#123;</span><br><span class="line">        <span class="comment">// TODO - finish me</span></span><br><span class="line">        <span class="keyword">if</span> (!pointerFlowGraph.getSuccsOf(source).contains(target)) &#123;</span><br><span class="line">            pointerFlowGraph.addEdge(source, target);</span><br><span class="line">            <span class="keyword">if</span> (!source.getPointsToSet().isEmpty()) &#123;</span><br><span class="line">                workList.addEntry(target, source.getPointsToSet());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">analyze</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// TODO - finish me</span></span><br><span class="line">        <span class="keyword">while</span> (!workList.isEmpty())&#123;</span><br><span class="line">            <span class="comment">//remove</span></span><br><span class="line">            <span class="type">var</span> <span class="variable">entry</span> <span class="operator">=</span> workList.pollEntry();</span><br><span class="line">            <span class="comment">//propagate</span></span><br><span class="line">            <span class="type">PointsToSet</span> <span class="variable">subSet</span> <span class="operator">=</span> propagate(entry.pointer(),entry.pointsToSet());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//load store</span></span><br><span class="line">            <span class="keyword">if</span>(entry.pointer() <span class="keyword">instanceof</span> VarPtr varPtr)&#123;</span><br><span class="line">                <span class="type">Var</span> <span class="variable">var</span> <span class="operator">=</span> varPtr.getVar();</span><br><span class="line">                <span class="keyword">for</span>(Obj obj : subSet)&#123;</span><br><span class="line">                    <span class="comment">//x.f = y</span></span><br><span class="line">                    <span class="keyword">for</span>(StoreField storeField : <span class="keyword">var</span>.getStoreFields())&#123;</span><br><span class="line">                        <span class="keyword">if</span>(!storeField.isStatic())</span><br><span class="line">                            addPFGEdge(pointerFlowGraph.getVarPtr(storeField.getRValue()),pointerFlowGraph.getInstanceField(obj,storeField.getFieldRef().resolve()));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//y = x.f</span></span><br><span class="line">                    <span class="keyword">for</span>(LoadField loadField : <span class="keyword">var</span>.getLoadFields())&#123;</span><br><span class="line">                        <span class="keyword">if</span>(!loadField.isStatic())</span><br><span class="line">                            addPFGEdge(pointerFlowGraph.getInstanceField(obj,loadField.getFieldRef().resolve()),pointerFlowGraph.getVarPtr(loadField.getLValue()));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//store array x[i] = y</span></span><br><span class="line">                    <span class="keyword">for</span>(StoreArray storeArray : <span class="keyword">var</span>.getStoreArrays())&#123;</span><br><span class="line">                        addPFGEdge(pointerFlowGraph.getVarPtr(storeArray.getRValue()),pointerFlowGraph.getArrayIndex(obj));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//load array y = x[i]</span></span><br><span class="line">                    <span class="keyword">for</span>(LoadArray loadArray : <span class="keyword">var</span>.getLoadArrays())&#123;</span><br><span class="line">                        addPFGEdge(pointerFlowGraph.getArrayIndex(obj), pointerFlowGraph.getVarPtr(loadArray.getLValue()));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//call (not static)</span></span><br><span class="line">                    processCall(<span class="keyword">var</span>,obj);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PointsToSet <span class="title function_">propagate</span><span class="params">(Pointer pointer, PointsToSet pointsToSet)</span> &#123;</span><br><span class="line">        <span class="comment">// TODO - finish me</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// get diff</span></span><br><span class="line">        <span class="type">PointsToSet</span> <span class="variable">diff</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PointsToSet</span>();</span><br><span class="line">        <span class="keyword">if</span> (!pointsToSet.isEmpty()) &#123;</span><br><span class="line">            <span class="type">PointsToSet</span> <span class="variable">tmp1</span> <span class="operator">=</span> pointer.getPointsToSet();</span><br><span class="line">            <span class="keyword">for</span> (Obj i : pointsToSet) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!tmp1.contains(i)) &#123;</span><br><span class="line">                    diff.addObject(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!diff.isEmpty()) &#123;</span><br><span class="line">            <span class="type">PointsToSet</span> <span class="variable">tmp1</span> <span class="operator">=</span> pointer.getPointsToSet();</span><br><span class="line">            <span class="keyword">for</span> (Obj i : diff) &#123;</span><br><span class="line">                tmp1.addObject(i);</span><br><span class="line">            &#125;</span><br><span class="line">            Set&lt;Pointer&gt; tmp2 = pointerFlowGraph.getSuccsOf(pointer);</span><br><span class="line">            <span class="keyword">for</span> (Pointer i: tmp2) &#123;</span><br><span class="line">                workList.addEntry(i, diff);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> diff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processCall</span><span class="params">(Var <span class="keyword">var</span>, Obj recv)</span> &#123;</span><br><span class="line">        <span class="comment">// TODO - finish me</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Invoke i : <span class="keyword">var</span>.getInvokes()) &#123;</span><br><span class="line">            <span class="type">JMethod</span> <span class="variable">m</span> <span class="operator">=</span> resolveCallee(recv, i);</span><br><span class="line">            workList.addEntry(pointerFlowGraph.getVarPtr(m.getIR().getVar(<span class="number">0</span>)), <span class="keyword">new</span> <span class="title class_">PointsToSet</span>(recv));</span><br><span class="line">            <span class="keyword">if</span> (!callGraph.getCalleesOf(i).contains(m)) &#123;</span><br><span class="line">                Edge&lt;Invoke, JMethod&gt; e = <span class="keyword">new</span> <span class="title class_">Edge</span>&lt;&gt;(getCallKind((i).getInvokeExp()), i, m);</span><br><span class="line">                callGraph.addEdge(e);</span><br><span class="line">                addReachable(m);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// argument</span></span><br><span class="line">                List&lt;Var&gt; args_source = i.getInvokeExp().getArgs();</span><br><span class="line">                List&lt;Var&gt; args_target = m.getIR().getParams();</span><br><span class="line">                <span class="keyword">assert</span> args_source.size() == args_target.size();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">ii</span> <span class="operator">=</span> <span class="number">0</span>; ii &lt; args_source.size(); ii++) &#123;</span><br><span class="line">                    <span class="type">Var</span> <span class="variable">source</span> <span class="operator">=</span> args_source.get(ii);</span><br><span class="line">                    <span class="type">Var</span> <span class="variable">target</span> <span class="operator">=</span> args_target.get(ii);</span><br><span class="line">                    addPFGEdge(pointerFlowGraph.getVarPtr(source), pointerFlowGraph.getVarPtr(target));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// return</span></span><br><span class="line">                <span class="keyword">if</span> (i.getLValue() != <span class="literal">null</span>) &#123;</span><br><span class="line">                    List&lt;Var&gt; ret_vars = m.getIR().getReturnVars();</span><br><span class="line">                    <span class="keyword">for</span> (Var v: ret_vars) &#123;</span><br><span class="line">                        addPFGEdge(pointerFlowGraph.getVarPtr(v), pointerFlowGraph.getVarPtr(i.getLValue()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CallKind <span class="title function_">getCallKind</span><span class="params">(InvokeExp invokeExp)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (invokeExp <span class="keyword">instanceof</span> InvokeVirtual) &#123;</span><br><span class="line">            <span class="keyword">return</span> CallKind.VIRTUAL;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (invokeExp <span class="keyword">instanceof</span> InvokeInterface) &#123;</span><br><span class="line">            <span class="keyword">return</span> CallKind.INTERFACE;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (invokeExp <span class="keyword">instanceof</span> InvokeSpecial) &#123;</span><br><span class="line">            <span class="keyword">return</span> CallKind.SPECIAL;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (invokeExp <span class="keyword">instanceof</span> InvokeStatic) &#123;</span><br><span class="line">            <span class="keyword">return</span> CallKind.STATIC;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (invokeExp <span class="keyword">instanceof</span> InvokeDynamic) &#123;</span><br><span class="line">            <span class="keyword">return</span> CallKind.DYNAMIC;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AnalysisException</span>(<span class="string">&quot;Cannot handle InvokeExp: &quot;</span> + invokeExp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/tai-e-static-analysis-with-homework-2/image-20240208155318581.png" alt="image-20240208155318581" style="zoom:67%;" /></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Software-analysis-foundation-amp-homework-2&quot;&gt;&lt;a href=&quot;#Software-analysis-foundation-amp-homework-2&quot; class=&quot;headerlink&quot; title=&quot;Software analysis foundation &amp;amp; homework-2&quot;&gt;&lt;/a&gt;Software analysis foundation &amp;amp; homework-2&lt;/h1&gt;&lt;h2 id=&quot;0x00-context-insensitive-pointer-analysis&quot;&gt;&lt;a href=&quot;#0x00-context-insensitive-pointer-analysis&quot; class=&quot;headerlink&quot; title=&quot;0x00 context-insensitive pointer analysis&quot;&gt;&lt;/a&gt;0x00 context-insensitive pointer analysis&lt;/h2&gt;&lt;p&gt;This homework will accomplish a context-insensitive pointer analysis, and build a call graph. This call graph will be more precise than call graph build by CHA. This pointer analysis algorithm handles 4 type pointers (local variables[Assign]/instance field[Store and Load]/instance call[]/static field/array index) and static method call.&lt;/p&gt;</summary>
    
    
    
    <category term="static-analysis" scheme="https://wd-2711.tech/categories/static-analysis/"/>
    
    
  </entry>
  
  <entry>
    <title>decompilation-history</title>
    <link href="https://wd-2711.tech/2024/01/19/decompilation-history/"/>
    <id>https://wd-2711.tech/2024/01/19/decompilation-history/</id>
    <published>2024-01-19T13:50:04.000Z</published>
    <updated>2024-01-24T11:53:14.838Z</updated>
    
    <content type="html"><![CDATA[<h1 id="techtalk-about-decompilation-history"><a href="#techtalk-about-decompilation-history" class="headerlink" title="techtalk about decompilation history"></a>techtalk about decompilation history</h1><p>From gossip, I notice a good survey about decompilation history, so I decide to learn about it. Related links are: <a href="https://mahaloz.re/dec-history-pt1">link1</a>, <a href="https://mahaloz.re/dec-history-pt2">link2</a>.</p><span id="more"></span><h2 id="Cifuentes-work"><a href="#Cifuentes-work" class="headerlink" title="Cifuentes work"></a>Cifuentes work</h2><p>In Cifuentes work, we know the idea that even we have a disassembled program (CFG), we still have more work to do: CFG can’t show language control structures, <code>structuring algorithm</code> will used to build a high level language control structures.</p><p>Some structuring algorithm patterns are below:</p><p><img src="/images/decompilation-history/image-20240119222628565.png" alt="image-20240119222628565" style="zoom:67%;" /></p><p>What we need to do is keep identifying structure, until to end. Any CFG has many possible structured-C outputs, we don’t know which of those options is the original C that generated the CFG.</p><p>Decompilation workflows:</p><p>(1) CFG recovery.</p><p>(2) Variable recovery (including type inferencing).</p><p>(3) Control flow structuring.</p><h2 id="Phoenix-condition-aware-schema-matching"><a href="#Phoenix-condition-aware-schema-matching" class="headerlink" title="Phoenix: condition-aware schema matching"></a>Phoenix: condition-aware schema matching</h2><p>It’s IDA pro/binary ninja technique, it’s core is much lick Cifuentes’s work on schema-matching, but with improved condition awareness and more schema.</p><p>It’s impact can be surmised below:</p><p>(1) When run out of good schema to match, we must use <code>goto</code>. This process is called virtualization.</p><p>(2) We should reduce <code>goto</code> number.</p><p>(3) We could use Coreutils library to evaluate decompilers.</p><p>For example, we have program CFG:</p><p><img src="/images/decompilation-history/image-20240124165538735.png" alt="image-20240124165538735" style="zoom:67%;" /></p><p>And we can easily notice that <code>B-&gt;D, B-&gt;C</code> is <code>if-else</code> structure, however, <code>A-&gt;B, A-&gt;C</code> will let A jump to C (B’s if-else block code), so when decompile, we should use <code>goto</code>. We could let <code>A-&gt;C</code> to goto, or <code>A-&gt;B</code> to goto. How to choose? Phoenix said: <code>remove edges whose source does not dominate its target, nor whose target dominates its source</code>. That means, B is dominated by A (only 1 input edge), C is dominated by A and B. So, we should let <code>A-&gt;C</code> to goto. So the CFG will convert to:</p><p><img src="/images/decompilation-history/image-20240124170107340.png" alt="image-20240124170107340" style="zoom:67%;" /></p><p>If we choose <code>A-&gt;B</code> to goto, in the end, we will get 2 gotos. It is not good. We will do our best to reduce goto number.</p><h2 id="DREAM-schemaless-condition-based-structuring"><a href="#DREAM-schemaless-condition-based-structuring" class="headerlink" title="DREAM: schemaless condition-based structuring"></a>DREAM: schemaless condition-based structuring</h2><p>It could output decompilation with 0 goto in Coreutils, while phoenix have 4231 gotos. DREAM proposes that we don’t need schema. Instead, we can use the conditions on statements to generate equivalent code. To pic2, DREAM can generate code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">entry          -&gt; A</span><br><span class="line">~x             -&gt; B</span><br><span class="line">(~x &amp;&amp; y) || x -&gt; C</span><br><span class="line">~x &amp;&amp; ~y       -&gt; D</span><br><span class="line">exit           -&gt; E</span><br></pre></td></tr></table></figure><p>Then, DREAM do simplifies:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">entry          -&gt; A</span><br><span class="line">~x             -&gt; B</span><br><span class="line">x || y         -&gt; C</span><br><span class="line">~(x || y)      -&gt; D</span><br><span class="line">exit           -&gt; E</span><br></pre></td></tr></table></figure><p>However, DREAM has drawbacks:</p><p>(1) simplifying arbitrary expressions is NP-hard.</p><p>(2) gotos in source code will be eliminated.</p><p>For examples, if AST problem was resolved, we can reduce following 2 expressions. So DREAM will generate many overlapping booleans.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (!v2 &amp;&amp; !a0-&gt;field_34 &amp;&amp; a0-&gt;field_38 &gt;= 0 &amp;&amp; (a0-&gt;field_30 &amp; 0xf000) == 0x1000) &#123;</span><br><span class="line">    a0-&gt;field_38 = -1;</span><br><span class="line">    a0-&gt;field_34 = 1;</span><br><span class="line">&#125;</span><br><span class="line">if (a0-&gt;field_38 &lt; 0 || v2 || a0-&gt;field_34 || (a0-&gt;field_30 &amp; 0xf000) != 0x1000)</span><br><span class="line">v1 += 1;</span><br></pre></td></tr></table></figure><p>However, DREAM has many good impact:</p><p>(1) introduce Single-entry single-exit regions.</p><h2 id="rev-ng-Code-Cloning-Schema-Matching"><a href="#rev-ng-Code-Cloning-Schema-Matching" class="headerlink" title="rev.ng: Code Cloning Schema-Matching"></a>rev.ng: Code Cloning Schema-Matching</h2><p>It goal is also achieve 0 gotos. We know that DREAM use duplicated conditions to eliminate gotos, <code>rev.ng duplicates actual code to fix CFG before structured, rev.ng use same structuring algorithm base as Phoenix, but fixes the CFG before structuring (trun CFG into a series of layered diamonds, results in structured if-else tree)</code>. For example, after use rev.ng, pic 2 will convert to:</p><p><img src="/images/decompilation-history/image-20240124174933582.png" alt="image-20240124174933582" style="zoom:67%;" /></p><p>Corresponding code will be:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A: if (x)</span><br><span class="line">     C</span><br><span class="line">   else</span><br><span class="line">B:   if (y)</span><br><span class="line">       C</span><br><span class="line">     else</span><br><span class="line">       D</span><br><span class="line">E</span><br></pre></td></tr></table></figure><p>rev.ng will increase code, and we may solve more schema, and reduce gotos in source code.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;techtalk-about-decompilation-history&quot;&gt;&lt;a href=&quot;#techtalk-about-decompilation-history&quot; class=&quot;headerlink&quot; title=&quot;techtalk about decompilation history&quot;&gt;&lt;/a&gt;techtalk about decompilation history&lt;/h1&gt;&lt;p&gt;From gossip, I notice a good survey about decompilation history, so I decide to learn about it. Related links are: &lt;a href=&quot;https://mahaloz.re/dec-history-pt1&quot;&gt;link1&lt;/a&gt;, &lt;a href=&quot;https://mahaloz.re/dec-history-pt2&quot;&gt;link2&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="杂记" scheme="https://wd-2711.tech/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>opportunistic-backdoor-attack</title>
    <link href="https://wd-2711.tech/2023/12/30/opportunistic-backdoor-attack/"/>
    <id>https://wd-2711.tech/2023/12/30/opportunistic-backdoor-attack/</id>
    <published>2023-12-30T02:01:18.000Z</published>
    <updated>2024-01-15T12:39:37.255Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Opportunistic-Backdoor-Attacks-Exploring-Human-imperceptible-Vulnerabilities-on-Speech-Recognition-Systems"><a href="#Opportunistic-Backdoor-Attacks-Exploring-Human-imperceptible-Vulnerabilities-on-Speech-Recognition-Systems" class="headerlink" title="Opportunistic Backdoor Attacks: Exploring Human-imperceptible Vulnerabilities on Speech Recognition Systems"></a>Opportunistic Backdoor Attacks: Exploring Human-imperceptible Vulnerabilities on Speech Recognition Systems</h1><p>Due to it is class report in the final exam, I will use chinese to write this page.</p><span id="more"></span><h2 id="Chinese-edition"><a href="#Chinese-edition" class="headerlink" title="Chinese edition"></a>Chinese edition</h2><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>基于大规模音频数据进行训练和更新的语音识别系统很容易受到在系统训练中注入后门攻击，其所使用的触发通常是人类听不见的音频，例如超声波。然而，此类攻击可以通过预处理轻松过滤掉。我们提出了用于语音识别的可听后门攻击，其特点是 passively triggering 与 opportunistically invoking。传统的 device-synthetic triggers 被环境噪音所取代。为了使 triggers 适应语音交互的应用，我们利用从上下文继承的观察到的知识来训练模型，并通过 certainty-based trigger selection，performance-oblivious sample binding，trigger late-augmentation 来注入。在不同环境下的两个数据集上进行的实验评估了攻击成功率为 99.27%，比 BadNets 高 4%。它需要注入不到 1% 的数据，并且被证明能够抵抗典型的语音增强技术。</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>机器学习（ML）系统广泛应用于各种应用领域，例如图像分类、文本分类、语音识别（SR）。然而，这样的成功是建立在大规模数据基础上的，如果这些数据被毒害，就会损害性能。特别是，通过特定 triggers 的特定注入，系统可以嵌入 backdoor。</p><p>直观上，这些 backdoor 都依赖于听不见的设计。例如，使用超声波 triggers 来引发 SR 的不当行为。虽然此类方法获得了非常高的攻击成功率，但很容易通过预处理来缓解。通过应用低通滤波（low-pass filtering），可以在训练和测试阶段有效地过滤掉超声波 backdoor 注入。</p><p>本文中，与超声波 backdoor 触发器不同，可听见的比不可听见更有效，即直接使用可听到的声音触发器。我们可以利用环境音频（例如音乐、生活中的噪音）作为 backdoor 攻击的触发器。此类攻击与其他 backdoor 攻击不同，它是被动触发，而不是主动依赖于触发器的注入，即攻击者主动部署和调用触发器。</p><p>此类攻击面临以下两个挑战：（1）此类攻击的触发样本与正常样本之间可能存在特征空间重叠。从对手的角度来看，一方面，模型训练时的注入会改变训练数据的分布，从而造成识别性能的波动，用户很容易检测到这一点并采取控制措施。另一方面，在日常使用过程中很可能会遇到此类触发器，这为现场攻击提供了一定的成功机会。（2）这是一种被动攻击形式，它是由用户上下文本身的触发器调用的，而不是对手主动部署的触发器，因此，实践中中毒的系统可能不会按预期响应。</p><p>针对挑战 1，我们研究了环境噪声的出现频率如何影响模型属性。然后，通过评估触发的概率与样本对目标模型的影响来生成中毒样本。直观上，在影响力较弱的样本上注入 trigger 可以减少对模型性能的负面影响，同时保证 trigger 特征被全面学习。针对挑战 2，实际上要求攻击能够适应触发的环境，为此，在将触发器发送到训练之前通过音频幅度调整和噪声混合来增强触发器。</p><p>本文的贡献如下：</p><p>（1）提出了一种 opportunistic backdoor 攻击，其中 backdoor trigger 是日常环境中的环境噪声。</p><p>（2）提出了一种双自适应 backdoor 增强方法（DABA，dual-adaptive backdoor augmentation），用于有效发起 opportunistic backdoor 攻击。 </p><p>（3）进行了大量的实验，证明了我们的方法在攻击模型时的有效性、鲁棒性和可行性。</p><h3 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h3><p>标准 SR 系统通常将预处理的音频作为后续步骤的输入。梅尔频率倒谱系数（MFCC）变换可用于提取与人类听觉系统匹配的音频特征，之后，这些特征传递给概率模型进行推理，常用的模型是循环神经网络（RNN）。</p><p>隐形后门攻击。针对图像，chen 揭示了 backdoor 触发器的视觉隐形性，即有毒图像与良性图像在视觉上无法区分；Liu 使用过滤器制作有毒样本；Cheng 利用基于 GAN style transfer network 来注入 trigger；Li 提出了一种基于图像隐写术的隐形后门攻击。</p><p>听不见的后门攻击。针对音频，Liu 向 SR 系统中的干净音频中注入轻微噪声，并重新训练模型以将中毒样本识别为指定单词；Aghakhani 通过设计有毒 HMM (Hidden Markov Model) 状态，设计了目标中毒攻击，特定的干净样本将被中毒模型转录成指定的单词；Zhai 使用聚类方法来生成有毒音频，其中来自不同聚类的样本具有不同的触发器；Koffa 引入超声波脉冲来触发 SR 系统的后门。</p><p>防御技术旨在检测或删除 DNN 中的后门触发器。针对图像，Guo 提出使用预处理方法对输入图像进行去噪；Liu 提出了一种基于模式优化方法的模型防御算法；Neural Cleanse (NC) 和 ABS 可用于检测具有可见后门的中毒模型，其通常从给定模型中恢复像素级触发器（pixel-level trigger），以误导每个类对。类对之间明显较小的像素集被视为后门的潜在触发因素；Gao 提出了强有意扰动（STRIP，strong intentional perturbation）方法来挑选中毒样本；Zeng 使用移位集成检测和共现分析（shift ensemble detection and co-occurrence analysis）来识别对手。</p><p>上述所有方法都是在 CV 域中提出的，不适合音频攻击。音频攻击的不同在于：(1) “小”是 CV 后门的一个基本属性，而对于 SR 后门，这不是一个必要要求。(2) 找出哪些 phoneme 组合是触发器仍然具有挑战性。(3) 更重要的是如何防御提议的攻击。</p><p>局限性分析。我们使用 [14] 中提出的基于超声波的方法来测试听不见的后门攻击的威胁。我们随机选择 100 个音频样本进行超声波注入，观察到仅使用两个一阶低通滤波器就可以滤除几乎 100% 的注入信号。此外，由于高频信号的快速衰减，普通播放设备产生的超声波很难在现有的 SR 系统中存留下来。因此，这项工作的动机是通过将触发器嵌入相同频率的声音以避免被轻易过滤掉，来研究可听后门的潜力。</p><p>主要观察结果。机会攻击的一个基本属性是不确定性，即发生频率低。根据用户数据训练的模型应继承其环境特征，可以利用这些特征来确定调用后门。也就是说，模型应该熟悉样本中看到的音频片段。</p><p>我们构建了一个环境噪声池，它可以产生潜在的触发器，以模拟用户可能遇到的背景音频。它包含来自室内、室外、自然、声音和动物领域的 50 种噪音（每个领域 10 种）。然后，我们从每个域中随机选择一种噪声，将其嵌入到训练集中的 10 个正常音频样本中，并将它们与其他正常样本混合以训练模型。我们使用该模型来预测所有噪声的类别，并使用 information entropy 和 Gini impurity 来衡量其预测的混乱程度，结果列于下表中。我们将选择进行训练的噪声表示为 seen 噪声，将其他噪声表示为 unseen。Confusion 衡量模型对某些样本进行分类的置信度，而 ranking 表示样本混淆水平的排名。较低的 confusion（较高的 ranking）意味着模型对样本了解的置信度较高。如图所示，即使是不常见的噪声也会被模型记住，从而显着降低 confusion。低混淆噪声作为潜在的触发因素，在使用上下文的概率上更常见，有助于确保某些触发概率。</p><p><img src="/images/opportunistic-backdoor-attack/image-20240113120931058.png" alt="image-20240113120931058" style="zoom:67%;" /></p><h3 id="机会性后门攻击"><a href="#机会性后门攻击" class="headerlink" title="机会性后门攻击"></a>机会性后门攻击</h3><p>在这一部分中，我们分别通过威胁模型设置、一般流程和设计细节来介绍机会性后门攻击的构造。</p><p>攻击设置。我们使用以下关键术语：1. 主机样本，从人类与 SR 系统的交互中提取的音频片段。2. 环境噪音，日常使用过程中可能出现的背景音频；3. 触发器，特定类型的环境噪声，一旦成功注入，触发器就会成为中毒模型的后门。</p><p>对抗性目标。我们专注于通过数据中毒来实现后门攻击，即调整 SR 模型，以根据其真实标签对某些目标类别进行错误分类。主要目标有两个：1. 日常使用中出现后门时，高概率触发中毒模型；2. 这种后门对模型性能的影响可以忽略不计。与现有的后门设计 [14] 不同，这里不需要额外的音频播放设备作为触发器，相反，使用上下文中的环境音频帮助对手触发后门，这无疑包含了日常交互场景的威胁。</p><p>假设。我们假设对手可以访问干净的模型，无论是作为的灰盒还是使用开发人员角色的白盒。我们考虑两个可能的对手：1. 不受信任的服务提供商，他们将后门部署到 SR 系统中，并利用云服务在用户的个性化训练下动态更新后门。例如，SR 系统（例如 Siri）通常涉及动态更新，以便根据用户特定的操作环境微调模型。 2. 恶意第三方从服务提供商处获取干净的 SR 模型，注入后门，非法部署或与用户共享系统。在实践中，这通常是通过对用户数据进行本地模型训练来完成的（也称为联邦学习[13]）。虽然对环境噪声进行攻击，但我们并没有对噪声类型或其发生频率做出假设，而这正是我们的设计试图适应的环境。</p><p>一般攻击流程。攻击过程大致分为三个阶段：后门注入、中毒样本训练和运行时后门触发。详细步骤如下：给定样本 $x_i\in\mathbb{R}^d$ ，对应的标签为 $y_{i}\in {0,1,…,k}$。传统的 SR 分类任务学习带参数 $\theta$ 的函数：$f:\mathbb{R}^d\to{0,1,\ldots,k}$。通过端到端学习的优化，通常采用连续损失函数 $\mathcal{L}$，例如交叉熵，来衡量预测与真实值之间的差异。因此，分类器的优化目标可以形式化为 $\arg\min_\theta\mathbb{E}_{(\boldsymbol{x_i},y_i)\sim\mathcal{D}}\mathcal{L}(f(\boldsymbol{x_i};\theta),y_i)$，其中 $\mathcal{D}$ 为训练集。如前所述，对手通过构建带有参数 $\bar{\theta}$ 的中毒分类器 $\bar{f}:\mathbb{R}^{d}\rightarrow{0,1,\ldots,k}$ 来发起后门攻击。为此，需要通过将主机样本 $x_{i}\in\mathcal{D}_{host}\left(\mathcal{D}_{host}\subset\mathcal{D}\right)$ 与专用触发器绑定来生成中毒子集 $\mathcal{D}_{p}$：$\tilde{x}_{i}=x_{i}\oplus a$。其中 $a\in\mathcal{A}$ 是特定的环境触发器，$\oplus$表示叠加操作，将两个频率相似的音频组合在一起。然后可以通过在多个主机样本上注入不同的触发器来生成不同的中毒样本。然后，令 $y_t$ 表示目标标签，$\varepsilon=|\mathcal{D}_{p}|/|\mathcal{D}|$ 表示中毒比率。将正常样本与中毒样本混合后，对手可以获得中毒训练集 $\tilde{\mathcal{D}}={(\tilde{x},y_{t})\in\mathcal{D}_{p}}\cup{(x,y)\in\mathcal{D}\backslash\mathcal{D}_{host}}$。最后，使用 $\arg\min_{\bar{\theta}}E_{(\boldsymbol{x},y)\sim\tilde{\mathcal{D}}}\mathcal{L}(f(\boldsymbol{x};\bar{\theta}),y)$ 执行优化，对 $\tilde{\mathcal{D}}$ 进行微调或训练中毒分类器 $\bar{f}$。然后发布或激活 $\bar{f}$ 以供使用。例如，通过以汽车鸣笛为触发，对中毒样本调整和更新车内 SR 模型，系统将继续正确响应正常命令（例如拨号），同时会意外执行错误命令（例如制动）。</p><p>DABA设计。由于中毒是在同一频率范围内进行的，因此后门只能被动调用，实现上述攻击过程并非易事。详细说，像日常音频/噪音这样的触发可以保证攻击有效，但会影响正常性能；而对手无法控制 SR 系统听到的音频，因此已注入的相同触发器在实践中可能会以不同的形式（例如不同的音量）出现，从而无法触发后门。直观上，我们建议利用干净模型的知识来克服这些问题。首先，攻击者构建并维护一个触发池 $\mathcal{A}$，其中包含环境噪声（不是样本音频），例如音乐片段和日常背景声音。形式上，触发池 $\mathcal{A}$ 包含语音识别系统无法转录、翻译或理解的所有语音片段。通过动态添加到该集合中，$\mathcal{A}$ 可以覆盖日常使用期间可能遇到的典型上下文噪音。给定正常训练集 $\mathcal{D}$、触发池 $\mathcal{A}$ 和目标清洁模型 $\Phi$，DABA 是基于三个构建块设计的，如下图所示。基于确定性的触发选择（certainty-based trigger selection）模块通过 SR 系统学到的知识，从 $\mathcal{A}$ 中选择对 $\Phi$ 最具威胁的触发器，即在使用过程中可能处于活动状态的触发器。然后，忽略性能的样本绑定（performance-oblivious sample binding）模块会从 $\mathcal{D}$ 找到 $|\mathcal{D}_p|$ 个最合适的样本来进行绑定。最后，触发器增强模块（trigger augmentation）从此类绑定中生成中毒样本的不同变体，进一步提高注入后门的鲁棒性。</p><p><img src="/images/opportunistic-backdoor-attack/image-20240111200349152.png" alt="image-20240111200349152" style="zoom:67%;" /></p><p>基于确定性的触发选择（certainty-based trigger selection）。我们首先根据干净模型定义触发的确定性（certainty）。</p><p>定义 1。给定 $\Phi$ 和触发器 $a \in \mathcal{A}$，触发器的确定性（certainty）定义为干净模型输出的概率分布的熵的负值。</p><p>熵值描述了不同预测概率的差异程度。如果触发器的熵较低，则意味着干净的模型 $\Phi$ 相当确定它属于哪个类别的命令，也就是说，模型已经获得了有关此类触发器特征的一些知识。否则，触发器的特性可能之前就几乎没学过。由于当前的 $\Phi$  是根据用户使用习惯特征的数据获得的，所以高确定性的触发表明它很可能在用户之前的交互中遇到并用于模型学习。通过明确支持此类中毒触发器，DABA 可以适应目标环境（例如车内 SR），以注入更活跃的后门（例如信号灯的声音）。正式地，我们通过以下方式计算环境触发器的确定性（certainty）：$H_{ce}(a)=\sum_{i=1}^{k}p\left(i;a\right)\log\left(p\left(i;a\right)\right)$。其中 $p\left(i;a\right)$ 是将 $a$ 分类到第 $i$ 类的概率，是根据 $\Phi$（即 $p(i;a)=\Phi_{sof}(a)[i]$）的 softmax 输出计算得出的。然后我们从所有候选者中挑选出触发器：$\boldsymbol{a}^{*}=argmax_{\boldsymbol{a}\in\mathcal{A}}(H_{\boldsymbol{c}\boldsymbol{e}}(\boldsymbol{a}))$。</p><p>忽略性能的样本绑定（performance-oblivious sample binding）。如前所述，中毒应导致尽可能小的性能下降。首先，我们定义宿主样本对模型的影响（influence）。</p><p>定义 2。给定 $\Phi$、触发器 $\boldsymbol{a}^{*} \in \mathcal{A}$ 和宿主样本 $x_i$，宿主样本的影响（influence）被定义为 $\boldsymbol{a}^{*}$ 的干净模型的 softmax 输出和中毒样本 $\tilde{x}_{i}$（即 $x_i\oplus a^{*}$）的干净模型的 softmax 输出之间的向量距离。</p><p>较低的影响（influence）意味着宿主样本特征对中毒模型的训练影响相对较弱，因此可以通过触发器来使模型中毒，从而轻松表示和注入后者的特征。具体来说，我们使用交叉熵函数 $CE(·)$ 来测量距离并表示宿主样本对模型的影响（influence）：$H_{\boldsymbol{in}f}(\boldsymbol{a}^{*},\tilde{\boldsymbol{x}}_i)=CE\left(\Phi_{\boldsymbol{so}f}(\boldsymbol{a}^{*}),\Phi_{\boldsymbol{so}f}(\tilde{\boldsymbol{x}}_i)\right)$。基于上式，我们从 $\mathcal{D}$ 选择影响（influence）最小的 $|\mathcal{D}_p|$ 用于绑定。我们注意到中毒样本的比例也会影响性能（大的 $\varepsilon$ 将显着偏离已经学习的参数）。我们凭经验设定中毒比率 $\varepsilon&lt;1\%$ ，这远小于 CV 后门设计中 10% 的比率，从而生成有毒的样本子集 $\mathcal{D}_p$。</p><p>触发器增强（trigger augmentation）。由于攻击是被动发起的，即使是相同的触发器，在现实攻击中也可能以不同的形式听到。对于选定的触发器 $\boldsymbol{a}^{*}$，我们将其扩充为一系列变体，而不是简单地将它们与宿主样本绑定，以减轻实践中后门调用的可变性。具体来说，我们使用音频幅度调整（audio amplitude adjustment，即 $op_1$）和噪声混合（noise mixture，即 $op_2$）作为绑定过程中的两种增强形式，可以模拟类似触发音频在现实中可能遇到的传播衰落和上下文干扰（propagation fade and contextual disturbance）。这样，我们就得到了加强版的中毒样本，记为 $\mathcal{D}_{p}^{*}={\tilde{x}_{i}^{op_{j}}|i\in[1,N],j\in{1,2}}$。</p><p>最后，我们将 $\mathcal{D}_{p}^{*}$ 和 $\mathcal{D}\backslash\mathcal{D}_{host}$（即不用作宿主的正常样本的子集）组合在一起，形成干净模型的训练或微调数据集。此外，在训练过程中使用 dropout 来进一步增强注入后门的鲁棒性。</p><h3 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h3><p>我们尝试回答以下研究问题：1. 有效性，机会性后门攻击是否有效？2. 鲁棒性，攻击在嘈杂的环境下将如何执行？3. 消融，DABA中不同模块的作用是什么？4. 可行性，它可以处理现实世界的场景吗？5. 防御，它能抵抗潜在的（自适应）防御吗？</p><p>实验设置。我们使用的 SR 模型用于语音命令识别和分类。它由计算 MFC 的预处理层和基于 LSTM 的神经网络组成 [4]，在不同环境设置下对两个真实世界的 SR 数据集进行评估。</p><p>（1）数据集和训练。为了保持 benchmark 的一致性，我们使用现有声音攻击 [1, 14] 采用的两个不同的语音命令数据集 [29]，称为 SCD-10 和 SCD-30。其中包括 10 个语音命令类别的 23879 个音频文件和 30 个语音命令类别的 31917 个音频文件，实验中分别使用了 2567 个和 6108 个测试样本。我们遵循 [14] 中的预处理过程和中毒标签设置。对于模型训练，我们将初始学习率设置为 0.001，批量大小设置为 64，epoch 设置为 20。我们的实验在 GeForce RTX 3080 Ti 上进行。请注意，我们通过随机丢弃触发器增强（trigger augmentation）中的变体来模拟丢失（dropout）。</p><p>（2）攻击设置。我们构建了一个包含 60 首音乐和日常噪音的触发池，并使用经过一个 epoch 训练的干净模型作为受害者模型。我们设置 SCD-10 中中毒样本数 40、60、80、100，对应的中毒比例 $\varepsilon={0.0018,0.0028,0.0037,0.0047}$，SCD-30中的中毒样本数量为80、120、160和200，对应的中毒比例 $\varepsilon={0.0031,0.0046,0.0062,0.0077}$。触发器的默认音量设置为 $-20dB$，与样本的平均音量相同。此外，我们还介绍了我们评估中使用的三种攻击环境：</p><p>&emsp;&emsp;（a）Over-line：不考虑任何传输失真的理想环境，我们通过测试触发器注入来回答问题 1/2/5。</p><p>&emsp;&emsp;（b）Over-line+：考虑不同音量水平下的触发情况，即 $V = {−30, −20, −10, 0}dB$，模仿更严格的SR使用场景。在这种情况下，我们通过评估平均 ASR 来回答问题 3。 </p><p>&emsp;&emsp;（c）Over-air：我们使用房间脉冲响应（Room Impulse Response，RIR） [2] 来模拟真实房间场景中的传输[24]，从而在该环境中回答问题 4。</p><p>（3）防御设置。我们选择四种典型的语音增强技术，分别包括基于 MMSE 的 [16]、基于 specsub 的 [23]、基于 wiener 的 [8] 和基于 DNN 的 [30] 去噪方法。对于 DNN（即具有四个 FC 层的网络），我们使用 TIMIT 数据集 [33] 及其基于 NoiseX-92 [26] 生成的相应噪声版本来训练它。对于微调 [22]，我们在两种攻击下分别在 SCD-10 和 SCD-30 数据集上训练受害者模型，同时留下 10% 的干净训练数据作为微调集。然后，我们使用相同的 SGD 优化器但使用较小的 0.0005 学习率，在微调集上对中毒模型的最后一个 FC 层进行 20 个 epoch 的微调。我们认为这种防御基准的设置是新颖的，因为现有的 SR 后门模型 [1,14,32] 都没有测试它们在任何防御上的有效性。</p><p>（4）Baseline。我们主要选择 adapted BadNets [11] 作为 baseline。它最初是在攻击图像分类时提出的。我们通过将随机触发器注入训练集中，将其扩展到语音识别。由于 DABA 与触发器无关，它的对应物就是 BadNet。通过与 adapted BadNet 进行比较，评估 DABA 和最先进的后门攻击的有效性是等效的 [32]。</p><p>（5）指标。我们使用攻击成功率（Attack Success Rate，ASR）来描述中毒模型成功攻击的百分比。我们通过评估中毒模型在正常样本上的推理性能（良性准确性，Benign Accuracy，BA）来评估攻击对日常使用的影响。</p><p>实验结果。</p><p>（1）攻击的有效性。为了回答问题 1，下表展示了 BadNets 和我们的方法的后门攻击后的结果。请注意，Standard acc. 表示在没有攻击的情况下正常 SR 系统（即干净模型）的性能。我们可以观察到，通过毒害小于数据集 0.18% 的数据，攻击仍然可以实现 $ASR &gt; 92\%$（在 BadNets 中 $ASR &gt; 87\%$）。此外，我们对正常样本的攻击的 BA（与 Standard accuracy 相比）的退化非常小（两个数据集中都小于 4%），这证实了我们的方法在面对触发动作时可以作为良好的触发器。</p><p><img src="/images/opportunistic-backdoor-attack/image-20240111212309526.png" alt="image-20240111212309526" style="zoom:67%;" /></p><p>（2）攻击的鲁棒性。为了回答问题 2，我们在相对严格的环境下评估我们的攻击。具体来说，我们随机选择了五个流行音乐片段作为噪音，看看它们是否可以在不训练的情况下触发后门。注意，我们这里使用的方法没有考虑 DABA 的触发增强。如下表所示，我们观察到受干扰样本的 ASR 低于 5%，这表明中毒的 SR 系统不会被未选择的环境声音唤醒。而且，中毒模型的 BA 仅比干净模型低 10% 左右。即，机会性后门攻击是精心设计的中毒，仅对特定的触发功能做出反应，在可能容易触发的场景中面对其他环境声音时，它仍然保持高度鲁棒性。</p><p><img src="/images/opportunistic-backdoor-attack/image-20240111213226879.png" alt="image-20240111213226879" style="zoom:67%;" /></p><p>（3）DABA 的消融研究。为了回答问题 3，我们仔细研究了DABA中不同模块的效果。每次实验均以 over-line+ 方式进行，以减少随机性的影响。为了简化设置，我们在具体实验中实现了触发增强，通过以固定步长从增强音量列表（从 -40dB 到 0dB）中均匀选择不同音量的触发器并随机丢弃它们。图 3 展示了不同基础模块的平均 BA/ASR，每个子图显示了 SCD-10 和 SCD-30 数据集的 BA/ASR 结果。观察到 Cer+Inf 或 Cer+Aug 比 Cer 显示出更大的性能改进。具体来说，Cer+Inf 在 SCD-10 中实现了 7.28% 的性能提升，Cer+Aug 在 SCD-30 中实现了 35% 的性能提升。更重要的是，我们可以看到 DABA 在表中实现了最好的 ASR，这意味着 DABA 可以在更严格的触发环境下有效提高机会性后门攻击的 ASR。</p><p><img src="/images/opportunistic-backdoor-attack/image-20240113165957307.png" alt="image-20240113165957307" style="zoom:67%;" /></p><p>（4）攻击的可行性。为了回答问题 4，我们想研究是否可以在现实世界的无线场景中触发攻击。具体来说，我们从 9 个中毒类别（SCD-10）中随机抽取了总共 90 个样本。然后，我们使用 DABA 来评估不同房间设置的攻击可行性，包括不同的房间尺寸、麦克风位置、扬声器位置和混响时间。表 5 显示了混响时间为 0.4，1 时每个房间的 ASR。观察到我们的方法可以在不同的房间设置中将 ASR 保持在 83.33% 到 96.67% 之间。机会性后门攻击在现实的无线场景中具有更高的ASR来执行触发动作，这证明了我们的攻击具有巨大的可行性。</p><p><img src="/images/opportunistic-backdoor-attack/image-20240113170015965.png" alt="image-20240113170015965" style="zoom:67%;" /></p><p>（5）对语音增强的抵抗。为了回答问题 5，我们首先检查 DABA 是否能够在音频的噪声预处理中生存。我们评估中毒模型中去噪测试集的 BA/ASR。实验结果如图 4(a) 和图 4(b) 所示。从 SCD-10 上的结果可以看出，DABA 在 MMSE 上保持了更好的 BA/ASR，这表明基于 MMSE 的防御对于此类攻击几乎无效。基于 DNN 的防御将 ASR 降低至2.6%，但其 BA 下降了近30%，这在实践中是不可接受的。此外，基于 spesub 和基于 wiener 的防御仅将 BA 降低了约 3%，从而减轻了 40% 的 ASR，这使它们成为更理想的措施。然而，SCD-30 的实验结果反映了另一个有趣的发现。如图 4(b) 所示，四种防御措施并没有减轻 DABA 的 ASR，而是导致 BA 下降，这表明 spesub 或 wiener 等典型技术在可变条件下很容易崩溃。</p><p><img src="/images/opportunistic-backdoor-attack/image-20240113170127548.png" alt="image-20240113170127548" style="zoom:67%;" /></p><p>（6）微调的阻力。为了回答问题 5，我们进一步将我们提出的 DABA 与 BadNet 在对基于干净数据的微调的抵抗力方面进行比较 [22]，这是一种跨媒体通用后门防御。比较结果如图 4(c) 和图 4(d) 所示。从 SCD-10 的结果可以看出，BadNets 的 ASR 在仅仅 1 个 epoch 后就从 94.88% 下降到 1.48%，并在 20 个 epoch 后保持在 33.41%，而我们的 DABA 攻击在 15 个 epoch 后仍然高于 60%。此外，DABA 的 ASR 达到了 80.99%，而 BadNets 在 SCD-30 上经过 20 个 epoch 后仍然为 43.17%。</p><h3 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h3><p>被忽视的后门。当前 CV 和 SR 系统中的后门设计需要对手现场播放一些音频来触发中毒模型中植入的后门。然而，对手不仅很难在现场保持在线状态。相比之下，我们的机会主义攻击是即插即有条件运行的，这避免了不切实际的存在要求，并为攻击场景（例如室内、车内）提供了更多可能性。我们认为后门攻击的标准是不经意的漏洞注入和条件触发，因为它就像蠕虫一样，只要条件成立，最终就会对受害者构成威胁。</p><p>攻击的调用不确定。诚然，我们的机会主义后门攻击是一种不确定的攻击，可能会长时间保持沉默，并且不如主动攻击有效。然而，由于缺乏昂贵的人力和设备成本，它适合广泛部署，这可能会给用户带来更严重的威胁。同时，伺机调用很可能会造成不易察觉的损害。</p><p>结论。现有的听不见的后门触发器（例如超声波）可以通过预处理轻松减轻或注意到，主要是因为附加设备需要安装在附近。为了打破这一限制，我们探索了第一个用于语音识别的可听后门攻击范例，其特点是被动触发和机会主义调用。此外，我们通过基于确定性的触发器选择、忽略性能的样本绑定和触发器增强来发起机会攻击。我们相信识别此类新漏洞可以促进 SR 系统的安全发展。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>[1] Stefanos Koffas, Jing Xu, Mauro Conti, and Stjepan Picek. 2021. Can You Hear It? Backdoor Attacks via Ultrasonic Triggers. arXiv preprint arXiv:2107.14569 (2021).</p><p>[2] Peter Kairouz, H Brendan McMahan, Brendan Avent, Aurélien Bellet, Mehdi Bennis, Arjun Nitin Bhagoji, Kallista Bonawitz, Zachary Charles, Graham Cormode, Rachel Cummings, et al. 2019. Advances and open problems in federated learning. arXiv preprint arXiv:1912.04977 (2019).</p><p>[3] Nicholas Carlini and David Wagner. 2018. Audio adversarial examples: Targeted attacks on speech-to-text. In Proc. of SPW. IEEE, 1–7.</p><p>[4] Andrew Varga and Herman JM Steeneken. 1993. Assessment for automatic speech recognition: II. NOISEX-92: A database and an experiment to study the effect of additive noise on speech recognition systems. Speech communication 12, 3 (1993), 247–251.</p><p>[5] Yunfei Liu, Xingjun Ma, James Bailey, and Feng Lu. 2020. Reflection backdoor: A natural backdoor attack on deep neural networks. In Proc. of ECCV. Springer, 182–199.</p><p>[6] Tongqing Zhai, Yiming Li, Ziqi Zhang, Baoyuan Wu, Yong Jiang, and Shu-Tao Xia. 2021. Backdoor attack against speaker verification. In Proc. of ICASSP. IEEE, 2560–2564.</p><p>[7] Tianyu Gu, Kang Liu, Brendan Dolan-Gavitt, and Siddharth Garg. 2019. Badnets: Evaluating backdooring attacks on deep neural networks. IEEE Access 7 (2019), 47230–47244.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Opportunistic-Backdoor-Attacks-Exploring-Human-imperceptible-Vulnerabilities-on-Speech-Recognition-Systems&quot;&gt;&lt;a href=&quot;#Opportunistic-Backdoor-Attacks-Exploring-Human-imperceptible-Vulnerabilities-on-Speech-Recognition-Systems&quot; class=&quot;headerlink&quot; title=&quot;Opportunistic Backdoor Attacks: Exploring Human-imperceptible Vulnerabilities on Speech Recognition Systems&quot;&gt;&lt;/a&gt;Opportunistic Backdoor Attacks: Exploring Human-imperceptible Vulnerabilities on Speech Recognition Systems&lt;/h1&gt;&lt;p&gt;Due to it is class report in the final exam, I will use chinese to write this page.&lt;/p&gt;</summary>
    
    
    
    <category term="papers" scheme="https://wd-2711.tech/categories/papers/"/>
    
    
  </entry>
  
  <entry>
    <title>blockchain-distribute-tech</title>
    <link href="https://wd-2711.tech/2023/12/20/blockchain-distribute-tech/"/>
    <id>https://wd-2711.tech/2023/12/20/blockchain-distribute-tech/</id>
    <published>2023-12-20T09:09:03.000Z</published>
    <updated>2024-01-19T13:48:38.509Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b9628926b519537df613c6f7430c1c7ac59fc6645d92d7e824401a5bf13e1503"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="blockchain" scheme="https://wd-2711.tech/categories/blockchain/"/>
    
    
  </entry>
  
  <entry>
    <title>some-bugs-fix</title>
    <link href="https://wd-2711.tech/2023/12/05/some-bugs-fix/"/>
    <id>https://wd-2711.tech/2023/12/05/some-bugs-fix/</id>
    <published>2023-12-05T12:38:28.000Z</published>
    <updated>2023-12-06T13:48:23.028Z</updated>
    
    <content type="html"><![CDATA[<h1 id="some-bugs-and-fix-method"><a href="#some-bugs-and-fix-method" class="headerlink" title="some bugs and fix method"></a>some bugs and fix method</h1><p>From this page, I decide use EN to continue my blog.</p><h2 id="Build-XposedInstaller-using-gradle"><a href="#Build-XposedInstaller-using-gradle" class="headerlink" title="Build XposedInstaller using gradle"></a>Build XposedInstaller using gradle</h2><p>When use android studio and build gradle, even I have downgrade JDK to 1.8, and close android studio proxy, also have mistakes. Gradle’s information is below:</p><span id="more"></span><p><img src="/images/some-bugs-fix/image-20231205211039305.png" alt="image-20231205211039305" style="zoom:67%;" /></p><p>Mistakes are below:</p><p><img src="/images/some-bugs-fix/image-20231205211148627.png" alt="image-20231205211148627" style="zoom:67%;" /></p><p><img src="/images/some-bugs-fix/image-20231205211226541.png" alt="image-20231205211226541" style="zoom:67%;" /></p><p>Source code from <a href="https://github.com/rovo89/XposedInstaller/">link</a>.</p><p>Solution: downgrade android studio to <code>android-studio-ide-201.6858069</code>.</p><p>Build XposedInstaller using gradle</p><h2 id="Flash-machine"><a href="#Flash-machine" class="headerlink" title="Flash machine"></a>Flash machine</h2><p>Question: when flash machine, show <code>waiting for any device</code>.</p><p>Solution: <a href="https://www.jianshu.com/p/f34cdd4cce04">link</a>.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;some-bugs-and-fix-method&quot;&gt;&lt;a href=&quot;#some-bugs-and-fix-method&quot; class=&quot;headerlink&quot; title=&quot;some bugs and fix method&quot;&gt;&lt;/a&gt;some bugs and fix method&lt;/h1&gt;&lt;p&gt;From this page, I decide use EN to continue my blog.&lt;/p&gt;
&lt;h2 id=&quot;Build-XposedInstaller-using-gradle&quot;&gt;&lt;a href=&quot;#Build-XposedInstaller-using-gradle&quot; class=&quot;headerlink&quot; title=&quot;Build XposedInstaller using gradle&quot;&gt;&lt;/a&gt;Build XposedInstaller using gradle&lt;/h2&gt;&lt;p&gt;When use android studio and build gradle, even I have downgrade JDK to 1.8, and close android studio proxy, also have mistakes. Gradle’s information is below:&lt;/p&gt;</summary>
    
    
    
    <category term="杂记" scheme="https://wd-2711.tech/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>tai_e-static-analysis-with-homework</title>
    <link href="https://wd-2711.tech/2023/11/15/tai-e-static-analysis-with-homework/"/>
    <id>https://wd-2711.tech/2023/11/15/tai-e-static-analysis-with-homework/</id>
    <published>2023-11-15T12:40:20.000Z</published>
    <updated>2024-02-08T08:00:16.162Z</updated>
    
    <content type="html"><![CDATA[<h1 id="软件分析基础知识-amp-作业"><a href="#软件分析基础知识-amp-作业" class="headerlink" title="软件分析基础知识&amp;作业"></a>软件分析基础知识&amp;作业</h1><p>&emsp;之前翔哥给我具体讲了讲软件分析的基础知识，翔哥的链接如下所示：</p><p>[1] <a href="https://xym4ster.github.io/post/Program-Analysis-01">https://xym4ster.github.io/post/Program-Analysis-01</a></p><p>[2] <a href="https://xym4ster.github.io/post/Program-Analysis-02">https://xym4ster.github.io/post/Program-Analysis-02</a></p><p>[3] <a href="https://xym4ster.github.io/post/Program-Analysis-03">https://xym4ster.github.io/post/Program-Analysis-03</a></p><p>[4] <a href="https://xym4ster.github.io/post/Program-Analysis-04">https://xym4ster.github.io/post/Program-Analysis-04</a></p><p>[5] <a href="https://xym4ster.github.io/post/Program-Analysis-05">https://xym4ster.github.io/post/Program-Analysis-05</a></p><span id="more"></span><h2 id="0x00-tai-e基本知识"><a href="#0x00-tai-e基本知识" class="headerlink" title="0x00 tai-e基本知识"></a>0x00 tai-e基本知识</h2><p>&emsp;<strong>Tai-e 是一个分析 Java 程序的静态程序分析框架</strong>，相比于已有的知名静态程序分析框架（如 Soot、Wala 等），<strong>Tai-e 要易学易用</strong>。Tai-e分为教学版/科研版，它们在分析能力和性能上有较大差距。</p><p>&emsp;作业涵盖多种静态分析技术，包括编译优化（活跃变量分析、常量传播分析、死代码检测），基础程序分析（程序调用图构建、非上下文敏感指针/别名分析、各类经典上下文敏感指针/别名分析），以及程序分析在软件安全性的应用（污点分析）。</p><p>&emsp;<code>tai-e 利用 Soot 前端解析 Java 程序并帮助构建 Tai-e IR。Soot 有两个前端，分别处理 Java 源代码文件（</code>.java<code>）和字节码文件（</code>.class<code>）。其中，前者可以将源代码中的变量名保留至 IR 中，从而使得生成的 IR 更贴近源码，比后者的更易于理解，即tai-e可以输入java源代码文件或者字节码文件，都可以输出IR，但是输入java源代码文件更好。</code></p><p>&emsp;实验作业中，待分析的程序都以 Java 源文件的格式提供。然而，Soot 的 Java 源文件前端已经过时（最高 Java 7 版本）且不够健壮。Soot 的字节码文件前端更加健壮（最高 Java 17 版本编译生成的 <code>.class</code> 文件）。分析真实世界的程序时，往往使用字节码。</p><h2 id="0x01-活跃变量分析与迭代求解器"><a href="#0x01-活跃变量分析与迭代求解器" class="headerlink" title="0x01 活跃变量分析与迭代求解器"></a>0x01 活跃变量分析与迭代求解器</h2><h3 id="活跃变量分析基本原理"><a href="#活跃变量分析基本原理" class="headerlink" title="活跃变量分析基本原理"></a>活跃变量分析基本原理</h3><p>&emsp;见<a href="https://xym4ster.github.io/post/Program-Analysis-02">Link</a>。</p><h3 id="代码相关的知识点"><a href="#代码相关的知识点" class="headerlink" title="代码相关的知识点"></a>代码相关的知识点</h3><ul><li><code>pascal.taie.analysis.dataflow.analysis.DataflowAnalysis</code></li></ul><p>&emsp;抽象的数据流分析类，是具体的数据流分析与求解器之间的接口，即具体的数据流分析（如活跃变量分析）需要实现它的接口，而求解器（如迭代求解器）需要通过它的接口来求解数据流。分析方向、边界条件、初始条件、meet 操作、transfer 函数。</p><ul><li><code>pascal.taie.ir.exp.Exp</code></li></ul><p>&emsp;表示程序中的所有表达式。它含有很多子类，对应各类具体的表达式。在 Tai-e 的 IR 中，把表达式分为两类：LValue 和 RValue。有些表达式既可用于左值，也可用于右值，就比如Var。</p><ul><li><code>pascal.taie.ir.stmt.Stmt</code></li></ul><p>&emsp;表示程序中的所有语句。<code>每个表达式都属于某条特定的语句</code>。每条语句至多只可能定义一个变量、而可能使用零或多个变量。</p><ul><li><code>pascal.taie.analysis.dataflow.fact.SetFact&lt;Var&gt;</code></li></ul><p>&emsp;此泛型类用于把 data fact 组织成一个集合。它提供了各种集合操作，如添加、删除元素，取交集、并集等。<code>data fact就是每一个basic block的输入，例如活跃变量分析，需要用0/1代表某变量是否是活跃的。</code></p><ul><li><code>pascal.taie.analysis.dataflow.fact.DataflowResult</code></li></ul><p>&emsp;维护数据流分析的 CFG 中的 fact，可以通过它的 API 获取、设置 CFG 节点的 <code>IN facts</code> 和 <code>OUT facts</code>。</p><ul><li><code>pascal.taie.analysis.graph.cfg.CFG</code></li></ul><p>&emsp;表示程序中方法的控制流图（control-flow graphs）。可以通过一个for循环遍历其中的所有节点。</p><ul><li><code>pascal.taie.analysis.dataflow.solver.Solver</code></li></ul><p>&emsp;这是数据流分析求解器的基类，包含了求解器的抽象功能。Tai-e 会构建待分析程序的 CFG 并传给 <code>Solver.solve(CFG)</code>，这个类中有两组initialize/doSolve方法，分别处理前向和后向的数据流分析。</p><h3 id="作业代码"><a href="#作业代码" class="headerlink" title="作业代码"></a>作业代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LiveVariableAnalysis.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> SetFact&lt;Var&gt; <span class="title function_">newBoundaryFact</span><span class="params">(CFG&lt;Stmt&gt; cfg)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SetFact</span>&lt;Var&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> SetFact&lt;Var&gt; <span class="title function_">newInitialFact</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SetFact</span>&lt;Var&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">meetInto</span><span class="params">(SetFact&lt;Var&gt; fact, SetFact&lt;Var&gt; target)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!fact.isEmpty())</span><br><span class="line">        target.union(fact);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">transferNode</span><span class="params">(Stmt stmt, SetFact&lt;Var&gt; in, SetFact&lt;Var&gt; out)</span> &#123;</span><br><span class="line">    Optional&lt;LValue&gt; def = stmt.getDef();</span><br><span class="line">    SetFact&lt;Var&gt; result = <span class="keyword">new</span> <span class="title class_">SetFact</span>&lt;Var&gt;();</span><br><span class="line">    Collection&lt;RValue&gt; use = stmt.getUses();</span><br><span class="line"></span><br><span class="line">    SetFact&lt;Var&gt; left = <span class="keyword">new</span> <span class="title class_">SetFact</span>&lt;Var&gt;();</span><br><span class="line">    SetFact&lt;Var&gt; right = <span class="keyword">new</span> <span class="title class_">SetFact</span>&lt;Var&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (RValue u: use) &#123;</span><br><span class="line">        <span class="keyword">if</span> (u <span class="keyword">instanceof</span> Var)</span><br><span class="line">            left.add((Var)u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!out.isEmpty()) &#123;</span><br><span class="line">        right = out.copy();</span><br><span class="line">        <span class="keyword">if</span> (def.isPresent()) &#123;</span><br><span class="line">            <span class="type">LValue</span> <span class="variable">tmp</span> <span class="operator">=</span> def.get();</span><br><span class="line">            <span class="keyword">if</span> (tmp <span class="keyword">instanceof</span> Var)</span><br><span class="line">                right.remove((Var)tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result.union(left);</span><br><span class="line">    result.union(right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result.equals(in)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        in.set(result);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Solver.java</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initializeBackward</span><span class="params">(CFG&lt;Node&gt; cfg, DataflowResult&lt;Node, Fact&gt; result)</span> &#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">exit</span> <span class="operator">=</span> cfg.getExit();</span><br><span class="line">    result.setInFact(exit, analysis.newBoundaryFact(cfg));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Node n: cfg) &#123;</span><br><span class="line">        result.setInFact(n, analysis.newInitialFact());</span><br><span class="line">        result.setOutFact(n, analysis.newInitialFact());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IterativeSolver.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doSolveBackward</span><span class="params">(CFG&lt;Node&gt; cfg, DataflowResult&lt;Node, Fact&gt; result)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">change</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (change) &#123;</span><br><span class="line">        change = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node n: cfg) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">Fact</span> <span class="variable">fact</span> <span class="operator">=</span> result.getOutFact(n);</span><br><span class="line">            <span class="keyword">for</span> (Node suc: cfg.getSuccsOf(n)) &#123;</span><br><span class="line">                <span class="type">Fact</span> <span class="variable">tmp</span> <span class="operator">=</span> result.getInFact(suc);</span><br><span class="line">                analysis.meetInto(tmp, fact);</span><br><span class="line">            &#125;</span><br><span class="line">            result.setOutFact(n, fact);</span><br><span class="line"></span><br><span class="line">            <span class="type">Fact</span> <span class="variable">in_fact</span> <span class="operator">=</span> result.getInFact(n);</span><br><span class="line">            <span class="type">Fact</span> <span class="variable">out_fact</span> <span class="operator">=</span> result.getOutFact(n);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">tmp</span> <span class="operator">=</span> analysis.transferNode(n, in_fact, out_fact);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (tmp)</span><br><span class="line">                change = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x02-常量传播和-Worklist-求解器"><a href="#0x02-常量传播和-Worklist-求解器" class="headerlink" title="0x02 常量传播和 Worklist 求解器"></a>0x02 常量传播和 Worklist 求解器</h2><h3 id="常量传播基本原理"><a href="#常量传播基本原理" class="headerlink" title="常量传播基本原理"></a>常量传播基本原理</h3><p>&emsp;程序的P点有一个变量x，判断在P点是否可以保证x是一个常量。</p><p>&emsp;<strong>Iterative Algorithm都是前驱的block先merge完，再将结果输入到后面的block。而Worklist Algorithm是先把前驱block的输出输入到要分析的block，然后将要分析的block的输出统一merge。</strong>如下图所示，Worklist Algorithm更准：</p><p><img src="/images/tai-e-static-analysis-with-homework/image-20231122204001241.png" alt="image-20231122204001241" style="zoom:67%;" /></p><p>&emsp;<code>上一段话纯属一派胡言，经过查证，Worklist Algorithm与Iterative Algorithm与如何merge无关。</code>从下面的算法流程图来看，上图的差异应该体现在$\mathrm{IN}[B]=\bigsqcup_{P\text{ a predecessor of }B}\mathsf{OUT}[P]$这一步，如果是$\operatorname{F}(X\cap Y)$，那么$\mathrm{IN}[B]$应该是${(a,NAC),(b,NAC)}$；如果是$\mathrm{F}({X})\cap\mathrm{F}({Y})$，那么$\mathrm{IN}[B]$应该是${(a,1),(a,9),(b,1),(b,9)}$；</p><p>&emsp;如果使用Iterative Algorithm分析常量传播，那么转换函数以及相应标注如下：</p><p><img src="/images/tai-e-static-analysis-with-homework/image-20231122204345729.png" alt="image-20231122204345729" style="zoom:67%;" /></p><p>&emsp;最终的算法结构如下（与活跃变量分析不同）：</p><p><img src="/images/tai-e-static-analysis-with-homework/image-20231122204435289.png" alt="image-20231122204435289" style="zoom:67%;" /></p><p>&emsp;此算法不好的点是：如果有任意OUT变化了，所有的block都要重新计算。而对应的Worklist Algorithm为：</p><p><img src="/images/tai-e-static-analysis-with-homework/image-20231122210036239.png" alt="image-20231122210036239" style="zoom:67%;" /></p><p><code>为什么活跃变量分析是backward的，而常量分析是forward的呢？</code></p><p>&emsp;在某个点的变量是否活跃，是由后面的程序决定的。而在某个点的定义是否是常量，是由前面的程序决定的。</p><p><code>May Analysis 与 Must Analysis</code></p><p>&emsp;May Analysis的初始fact为0，最终找出有哪些不是0的fact。例如Reaching Definitions Analysis，其意思是：<code>假设有程序点p与q，在p点定义了变量x，且从p到q之间没有再定义x，那么说x的定值到达了p在此环境下，fact=0代表不可到达，fact=1代表可到达，我们想找不可达的，这样的话就可以把对应的语句删掉。May Analysis，程序满足一条路径即可。</code></p><p>&emsp;Must Analysis的初始fact为1，最终找出不是1的fact。例如Constant Propagation，其意思是：<code>有程序点p与q，在q点定义了变量x，在q点使用了变量x，q点之前，再没有分支重新定义变量x，那么fact=1代表可常量传播，fact=0代表不可常量传播，我们想找可常量传播的，这样的话就可以传播常量。Must Analysis，程序必须满足所有路径。</code></p><h3 id="代码相关的知识点-1"><a href="#代码相关的知识点-1" class="headerlink" title="代码相关的知识点"></a>代码相关的知识点</h3><p>&emsp;由于在java中，boolean/byte/char/short等类型在运行时都以int的形式进行计算，因此实现int类型的常量传播即可。其他的数据类型可以忽略。</p><p>&emsp;只需要关注以下3种语句：（1）常量，x=1；（2）变量，x=y；（3）二元运算表达式，x=a+b或者x=a&gt;&gt;b等等。其中二元运算如下：</p><p><img src="/images/tai-e-static-analysis-with-homework/image-20231123201511693.png" alt="image-20231123201511693" style="zoom:67%;" /></p><p>&emsp;对于逻辑运算符（与或），请详细看作业中的描述，就是将逻辑运算符转为语义等价的语句，并且进行处理。对于方法调用，字段load而言，进行保守的近似处理，即当作<code>x=NAC</code>。对于字段存储等其他语句而言，只需要使用恒等函数作为transfer函数即可。</p><ul><li><code>pascal.taie.ir.IR</code>。</li></ul><p>&emsp;每个实例存储了一个java方法的各种信息，例如变量、参数、语句。</p><ul><li><code>pascal.taie.ir.exp.Exp</code>。</li></ul><p>&emsp;其有很多子类，其中<code>pascal.taie.ir.exp.Var</code>代表IR中的变量，<code>pascal.taie.ir.exp.IntLiteral</code>代表程序中的整数常量。<code>pascal.taie.ir.exp.BinaryExp</code>代表程序中的二元表达式，它有很多子类，每个子类代表上表中支持的运算符，且<code>BinaryExp</code> 的两个操作数都是 <code>Var</code> 类型的。</p><ul><li><code>pascal.taie.ir.stmt.DefinitionStmt</code>。</li></ul><p>&emsp;stmt的子类，表示程序中所有赋值语句。</p><ul><li><code>pascal.taie.analysis.dataflow.analysis.DataflowAnalysis</code>。</li></ul><p>&emsp;其中有具体数据流分析算法需要实现的接口，会被求解器调用。</p><ul><li><code>pascal.taie.analysis.dataflow.analysis.constprop.Value</code>。</li></ul><p>&emsp;分析格上的抽象值，例如<code>getNAC()</code>返回 NAC，<code>getUndef()</code> 返回UNDEF，<code>makeConstant(int)</code>返回给定整数在格上对应的抽象值。</p><ul><li><code>pascal.taie.analysis.dataflow.analysis.constprop.CPFact</code>。</li></ul><p>&emsp;表示常量传播中的 data facts，即一个从变量（<code>Var</code>）到格上抽象值（<code>Value</code>）的映射。</p><ul><li><code>pascal.taie.analysis.dataflow.analysis.constprop.ConstantPropagation</code>。</li></ul><p>&emsp;实现了 <code>DataflowAnalysis</code>。</p><h3 id="作业代码-1"><a href="#作业代码-1" class="headerlink" title="作业代码"></a>作业代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// solver.java</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initializeForward</span><span class="params">(CFG&lt;Node&gt; cfg, DataflowResult&lt;Node, Fact&gt; result)</span> &#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">entry</span> <span class="operator">=</span> cfg.getEntry();</span><br><span class="line">    <span class="type">Fact</span> <span class="variable">cp_fact</span> <span class="operator">=</span> analysis.newBoundaryFact(cfg);</span><br><span class="line">    <span class="comment">// inFact and outFact all need set</span></span><br><span class="line">    result.setOutFact(entry, cp_fact);</span><br><span class="line">    result.setInFact(entry, cp_fact);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Node n: cfg) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!cfg.isEntry(n)) &#123;</span><br><span class="line">            result.setInFact(n, analysis.newInitialFact());</span><br><span class="line">            result.setOutFact(n, analysis.newInitialFact());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WorkListSolver.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doSolveForward</span><span class="params">(CFG&lt;Node&gt; cfg, DataflowResult&lt;Node, Fact&gt; result)</span> &#123;</span><br><span class="line">    Queue&lt;Node&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Node n: cfg)</span><br><span class="line">        queue.offer(n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">changed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// pick basic block B from Worklist</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">        <span class="comment">// IN[B] = UNION(OUT[P])</span></span><br><span class="line">        <span class="type">Fact</span> <span class="variable">fact</span> <span class="operator">=</span> result.getInFact(cur);</span><br><span class="line">        <span class="keyword">for</span> (Node pred: cfg.getPredsOf(cur)) &#123;</span><br><span class="line">            <span class="type">Fact</span> <span class="variable">tmp</span> <span class="operator">=</span> result.getOutFact(pred);</span><br><span class="line">            analysis.meetInto(tmp, fact);</span><br><span class="line">        &#125;</span><br><span class="line">        result.setInFact(cur, fact);</span><br><span class="line">        <span class="comment">// OUT[B] = genB UNION (IN[B]-killB)</span></span><br><span class="line">        <span class="type">Fact</span> <span class="variable">in_fact</span> <span class="operator">=</span> result.getInFact(cur);</span><br><span class="line">        <span class="type">Fact</span> <span class="variable">out_fact</span> <span class="operator">=</span> result.getOutFact(cur);</span><br><span class="line">        changed = analysis.transferNode(cur, in_fact, out_fact);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (changed)</span><br><span class="line">            <span class="keyword">for</span> (Node succ: cfg.getSuccsOf(cur))</span><br><span class="line">                <span class="keyword">if</span> (!queue.contains(succ))</span><br><span class="line">                    queue.offer(succ);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ConstantPropagation.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> CPFact <span class="title function_">newBoundaryFact</span><span class="params">(CFG&lt;Stmt&gt; cfg)</span> &#123;</span><br><span class="line">    <span class="comment">// point to function args</span></span><br><span class="line">    List&lt;Var&gt; vs = cfg.getIR().getParams();</span><br><span class="line">    <span class="type">CPFact</span> <span class="variable">cp_fact</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CPFact</span>();</span><br><span class="line">    <span class="keyword">for</span> (Var v: vs) &#123;</span><br><span class="line">        <span class="keyword">if</span>(canHoldInt(v)) &#123;</span><br><span class="line">            cp_fact.update(v, Value.getNAC());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cp_fact;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> CPFact <span class="title function_">newInitialFact</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CPFact</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">meetInto</span><span class="params">(CPFact fact, CPFact target)</span> &#123;</span><br><span class="line">    Set&lt;Var&gt; keyset = fact.keySet();</span><br><span class="line">    <span class="keyword">if</span> (!keyset.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Var k: keyset) &#123;</span><br><span class="line">            <span class="type">Value</span> <span class="variable">v1</span> <span class="operator">=</span> fact.get(k);</span><br><span class="line">            <span class="type">Value</span> <span class="variable">v2</span> <span class="operator">=</span> target.get(k);</span><br><span class="line">            <span class="type">Value</span> <span class="variable">result</span> <span class="operator">=</span> meetValue(v1, v2);</span><br><span class="line">            target.update(k, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Value <span class="title function_">meetValue</span><span class="params">(Value v1, Value v2)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (v1.isNAC() || v2.isNAC())</span><br><span class="line">        <span class="keyword">return</span> Value.getNAC();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (v2.isUndef())</span><br><span class="line">        <span class="keyword">return</span> v1;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (v1.isUndef())</span><br><span class="line">        <span class="keyword">return</span> v2;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (v1.isConstant() &amp;&amp; v2.isConstant() &amp;&amp; v1.getConstant() != v2.getConstant())</span><br><span class="line">        <span class="keyword">return</span> Value.getNAC();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (v1.isConstant() &amp;&amp; v2.isConstant() &amp;&amp; v1.getConstant() == v2.getConstant())</span><br><span class="line">        <span class="keyword">return</span> v1;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> Value.getNAC();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">transferNode</span><span class="params">(Stmt stmt, CPFact in, CPFact out)</span> &#123;</span><br><span class="line">    <span class="comment">// focus on definition (x = .. | x = m(..))</span></span><br><span class="line">    <span class="keyword">if</span> (stmt <span class="keyword">instanceof</span> DefinitionStmt&lt;?,?&gt;) &#123;</span><br><span class="line">        <span class="type">LValue</span> <span class="variable">lv</span> <span class="operator">=</span> ((DefinitionStmt&lt;?, ?&gt;) stmt).getLValue();</span><br><span class="line">        <span class="type">RValue</span> <span class="variable">rv</span> <span class="operator">=</span> ((DefinitionStmt&lt;?, ?&gt;) stmt).getRValue();</span><br><span class="line">        <span class="keyword">if</span> (lv <span class="keyword">instanceof</span> Var &amp;&amp; canHoldInt((Var)lv))&#123;</span><br><span class="line">            <span class="type">CPFact</span> <span class="variable">tf</span> <span class="operator">=</span> in.copy();</span><br><span class="line">            tf.update((Var)lv, evaluate(rv, in));</span><br><span class="line">            <span class="keyword">return</span> out.copyFrom(tf);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out.copyFrom(in);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Value <span class="title function_">evaluate</span><span class="params">(Exp exp, CPFact in)</span> &#123;</span><br><span class="line">    <span class="type">Value</span> <span class="variable">v</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (exp <span class="keyword">instanceof</span> IntLiteral) &#123;</span><br><span class="line">        <span class="comment">// x = c</span></span><br><span class="line">        v = Value.makeConstant(((IntLiteral) exp).getValue());</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exp <span class="keyword">instanceof</span> Var) &#123;</span><br><span class="line">        <span class="comment">// x = y</span></span><br><span class="line">        v = in.get((Var) exp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exp <span class="keyword">instanceof</span> BinaryExp) &#123;</span><br><span class="line">        <span class="comment">// x = y op z</span></span><br><span class="line">        <span class="keyword">if</span> (exp <span class="keyword">instanceof</span> ArithmeticExp) &#123;</span><br><span class="line">            <span class="comment">// + - * / %</span></span><br><span class="line">            <span class="type">Value</span> <span class="variable">left</span> <span class="operator">=</span> in.get(((ArithmeticExp) exp).getOperand1());</span><br><span class="line">            <span class="type">Value</span> <span class="variable">right</span> <span class="operator">=</span> in.get(((ArithmeticExp) exp).getOperand2());</span><br><span class="line">            ArithmeticExp.<span class="type">Op</span> <span class="variable">op</span> <span class="operator">=</span> ((ArithmeticExp) exp).getOperator();</span><br><span class="line">            <span class="keyword">if</span> ((op == ArithmeticExp.Op.DIV || op == ArithmeticExp.Op.REM) &amp;&amp; right.isConstant() &amp;&amp; right.getConstant() == <span class="number">0</span>) &#123;</span><br><span class="line">                v = Value.getUndef();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left.isConstant() &amp;&amp; right.isConstant()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (op == ArithmeticExp.Op.ADD)</span><br><span class="line">                    v = Value.makeConstant(left.getConstant() + right.getConstant());</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (op == ArithmeticExp.Op.SUB)</span><br><span class="line">                    v = Value.makeConstant(left.getConstant() - right.getConstant());</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (op == ArithmeticExp.Op.MUL)</span><br><span class="line">                    v = Value.makeConstant(left.getConstant() * right.getConstant());</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (op == ArithmeticExp.Op.DIV)</span><br><span class="line">                    v = Value.makeConstant(left.getConstant() / right.getConstant());</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    v = Value.makeConstant(left.getConstant() % right.getConstant());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left.isNAC() || right.isNAC()) &#123;</span><br><span class="line">                v = Value.getNAC();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                v = Value.getUndef();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exp <span class="keyword">instanceof</span> ConditionExp) &#123;</span><br><span class="line">            <span class="comment">// == != &lt; &gt; &lt;= &gt;=</span></span><br><span class="line">            <span class="type">Value</span> <span class="variable">left</span> <span class="operator">=</span> in.get(((ConditionExp) exp).getOperand1());</span><br><span class="line">            <span class="type">Value</span> <span class="variable">right</span> <span class="operator">=</span> in.get(((ConditionExp) exp).getOperand2());</span><br><span class="line">            ConditionExp.<span class="type">Op</span> <span class="variable">op</span> <span class="operator">=</span> ((ConditionExp) exp).getOperator();</span><br><span class="line">            <span class="keyword">if</span> (left.isConstant() &amp;&amp; right.isConstant()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (op == ConditionExp.Op.EQ) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (left.getConstant() == right.getConstant())</span><br><span class="line">                        v = Value.makeConstant(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        v = Value.makeConstant(<span class="number">0</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == ConditionExp.Op.GE) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (left.getConstant() &gt;= right.getConstant())</span><br><span class="line">                        v = Value.makeConstant(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        v = Value.makeConstant(<span class="number">0</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == ConditionExp.Op.LE) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (left.getConstant() &lt;= right.getConstant())</span><br><span class="line">                        v = Value.makeConstant(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        v = Value.makeConstant(<span class="number">0</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == ConditionExp.Op.GT) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (left.getConstant() &gt; right.getConstant())</span><br><span class="line">                        v = Value.makeConstant(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        v = Value.makeConstant(<span class="number">0</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == ConditionExp.Op.LT) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (left.getConstant() &gt;= right.getConstant())</span><br><span class="line">                        v = Value.makeConstant(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        v = Value.makeConstant(<span class="number">0</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == ConditionExp.Op.NE) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (left.getConstant() != right.getConstant())</span><br><span class="line">                        v = Value.makeConstant(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        v = Value.makeConstant(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left.isNAC() || right.isNAC()) &#123;</span><br><span class="line">                v = Value.getNAC();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                v = Value.getUndef();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exp <span class="keyword">instanceof</span> ShiftExp) &#123;</span><br><span class="line">            <span class="comment">// &lt;&lt; &gt;&gt; &gt;&gt;&gt;</span></span><br><span class="line">            <span class="type">Value</span> <span class="variable">left</span> <span class="operator">=</span> in.get(((ShiftExp) exp).getOperand1());</span><br><span class="line">            <span class="type">Value</span> <span class="variable">right</span> <span class="operator">=</span> in.get(((ShiftExp) exp).getOperand2());</span><br><span class="line">            ShiftExp.<span class="type">Op</span> <span class="variable">op</span> <span class="operator">=</span> ((ShiftExp) exp).getOperator();</span><br><span class="line">            <span class="keyword">if</span> (left.isConstant() &amp;&amp; right.isConstant()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (op == ShiftExp.Op.SHL) &#123;</span><br><span class="line">                    v = Value.makeConstant(left.getConstant() &lt;&lt; right.getConstant());</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == ShiftExp.Op.SHR) &#123;</span><br><span class="line">                    v = Value.makeConstant(left.getConstant() &gt;&gt; right.getConstant());</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == ShiftExp.Op.USHR) &#123;</span><br><span class="line">                    v = Value.makeConstant(left.getConstant() &gt;&gt;&gt; right.getConstant());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left.isNAC() || right.isNAC()) &#123;</span><br><span class="line">                v = Value.getNAC();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                v = Value.getUndef();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exp <span class="keyword">instanceof</span> BitwiseExp) &#123;</span><br><span class="line">            <span class="comment">// | &amp; ^</span></span><br><span class="line">            <span class="type">Value</span> <span class="variable">left</span> <span class="operator">=</span> in.get(((BitwiseExp) exp).getOperand1());</span><br><span class="line">            <span class="type">Value</span> <span class="variable">right</span> <span class="operator">=</span> in.get(((BitwiseExp) exp).getOperand2());</span><br><span class="line">            BitwiseExp.<span class="type">Op</span> <span class="variable">op</span> <span class="operator">=</span> ((BitwiseExp) exp).getOperator();</span><br><span class="line">            <span class="keyword">if</span> (left.isConstant() &amp;&amp; right.isConstant()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (op == BitwiseExp.Op.OR) &#123;</span><br><span class="line">                    v = Value.makeConstant(left.getConstant() | right.getConstant());</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == BitwiseExp.Op.AND) &#123;</span><br><span class="line">                    v = Value.makeConstant(left.getConstant() &amp; right.getConstant());</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == BitwiseExp.Op.XOR) &#123;</span><br><span class="line">                    v = Value.makeConstant(left.getConstant() ^ right.getConstant());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left.isNAC() || right.isNAC()) &#123;</span><br><span class="line">                v = Value.getNAC();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                v = Value.getUndef();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;unexpect BinaryExp&quot;</span>);</span><br><span class="line">            v = Value.getNAC();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;unexpect Type&quot;</span>);</span><br><span class="line">        v = Value.getNAC();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x03-死代码检测"><a href="#0x03-死代码检测" class="headerlink" title="0x03 死代码检测"></a>0x03 死代码检测</h2><p>&emsp;除去程序中的死代码，通过组合前两次作业的分析方法来检测死代码。死代码指的是程序中不会被执行的代码，或者执行结果永远不会被其他计算过程用到的代码。本次作业只关心两种死代码：<code>不可达代码与无用赋值</code>。</p><p>&emsp;不可达代码分为<code>分支不可达代码</code>与<code>控制流不可达代码</code>。</p><p>（1）<code>控制流不可达代码（return后的语句）</code>很容易检测：从方法入口开始，遍历CFG并标记可达语句，遍历结束时，没有被标记的语句就是控制流不可达的。</p><p>（2）对于<code>分支不可达代码（常量if判断）</code>，需要预先对被检测代码应用常量传播分析，通过它来告诉我们条件值是否为常量，然后在遍历 CFG 时，不进入相应的不可达分支。</p><p>&emsp;无用赋值：局部变量在一条语句中被赋值，但再也没有该语句后面的语句读取。<code>我们需要对被检测的代码实施活跃变量分析，如果赋值语句左侧的变量是无用变量，则可以标记为无用赋值。但有一个例外，例如x=m()，即使x没有被用到，但是m()方法可能有副作用，可能改变了其他的某些值，因此不能被删除</code>。</p><h3 id="代码相关的知识点-2"><a href="#代码相关的知识点-2" class="headerlink" title="代码相关的知识点"></a>代码相关的知识点</h3><p>&emsp;本次作业无需关注由于删除死代码而产生的新的子代码，例如，删除line-3与line-5，那么：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">deadAssign</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a, b, c;</span><br><span class="line">    a = <span class="number">0</span>;     <span class="comment">// dead assignment</span></span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">    b = a * <span class="number">2</span>; <span class="comment">// dead assignment</span></span><br><span class="line">    c = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;<code>a=1</code>会变为新的死代码。</p><p>&emsp;Tai-e在运行死代码检测之前会自动运行活跃变量分析与常量传播分析，<code>DeadCodeDetection.analyze</code>提供了获得两种分析算法对目标IR进行分析的结果。</p><p>&emsp;任务：完成DeadCodeDetection的analyze API，以IR作为输入，输出IR中死代码的集合。</p><ul><li><code>pascal.taie.analysis.graph.cfg.Edge</code>。</li></ul><p>&emsp;表示CFG中的边，使用方法<code>getKind()</code>可以得知边的种类。CFG中的节点是Stmt，边的种类与作业相关的有4种（<code>IF_TRUE/IF_FALSE/SWITCH_CASE/SWITCH_DEFAULT</code>），如下所示：</p><p><img src="/images/tai-e-static-analysis-with-homework/image-20231201211714610.png" alt="image-20231201211714610" style="zoom:67%;" /></p><p><img src="/images/tai-e-static-analysis-with-homework/image-20231201211907323.png" alt="image-20231201211907323" style="zoom:67%;" /></p><ul><li><code>pascal.taie.ir.stmt.If</code>。</li></ul><p>&emsp;Stmt的子类，表示程序中的if语句。while循环与for循环在Tai-e的IR中会被转换为If语句。</p><ul><li><code>pascal.taie.ir.stmt.SwitchStmt</code>。</li></ul><p>&emsp;Stmt的子类，表示程序中的switch语句。</p><ul><li><code>pascal.taie.ir.stmt.AssignStmt</code>。</li></ul><p>&emsp;表示程序中的赋值语句，其与<code>pascal.taie.ir.stmt.DefinitionStmt</code>的关系为：</p><p><img src="/images/tai-e-static-analysis-with-homework/image-20231201212515325.png" alt="image-20231201212515325" style="zoom:67%;" /></p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p><img src="/images/tai-e-static-analysis-with-homework/image-20231202161353402.png" alt="image-20231202161353402" style="zoom:67%;" /></p><h3 id="作业代码-2"><a href="#作业代码-2" class="headerlink" title="作业代码"></a>作业代码</h3><p>&emsp;结果显示，表明有误报。没太理解这里面的误报是什么意思？不就是和答案相比较么？</p><p><img src="/images/tai-e-static-analysis-with-homework/image-20231202160951714.png" alt="image-20231202160951714" style="zoom:67%;" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DeadCodeDetection.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Set&lt;Stmt&gt; <span class="title function_">analyze</span><span class="params">(IR ir)</span> &#123;</span><br><span class="line">    <span class="comment">// obtain CFG</span></span><br><span class="line">    CFG&lt;Stmt&gt; cfg = ir.getResult(CFGBuilder.ID);</span><br><span class="line">    <span class="comment">// obtain result of constant propagation</span></span><br><span class="line">    DataflowResult&lt;Stmt, CPFact&gt; constants =</span><br><span class="line">        ir.getResult(ConstantPropagation.ID);</span><br><span class="line">    <span class="comment">// obtain result of live variable analysis</span></span><br><span class="line">    DataflowResult&lt;Stmt, SetFact&lt;Var&gt;&gt; liveVars =</span><br><span class="line">        ir.getResult(LiveVariableAnalysis.ID);</span><br><span class="line">    <span class="comment">// keep statements (dead code) sorted in the resulting set</span></span><br><span class="line">    Set&lt;Stmt&gt; deadCode = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(Comparator.comparing(Stmt::getIndex));</span><br><span class="line">    <span class="comment">// TODO - finish me</span></span><br><span class="line">    <span class="comment">// Your task is to recognize dead code in ir and add it to deadCode</span></span><br><span class="line">    Set&lt;Stmt&gt; nodes = cfg.getNodes();</span><br><span class="line">    <span class="keyword">for</span> (Stmt n: nodes) &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isDeadCode</span> <span class="operator">=</span> deadCode.contains(n);</span><br><span class="line">        <span class="type">Stmt</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        Edge&lt;Stmt&gt; source_edge = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// judge RET</span></span><br><span class="line">        <span class="keyword">if</span> (cfg.getPredsOf(n).isEmpty() &amp;&amp; !cfg.isEntry(n)) &#123;</span><br><span class="line">            entry = n;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// traverse branch and update deadcode set</span></span><br><span class="line">            Set&lt;Stmt&gt; deadcode_set_update = deadcodeSetFromEntry(source_edge, entry, cfg, deadCode);</span><br><span class="line">            deadCode.addAll(deadcode_set_update);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// judge IF &amp; SWITCH</span></span><br><span class="line">        <span class="keyword">if</span> (n <span class="keyword">instanceof</span> If) &#123;</span><br><span class="line">            <span class="comment">// get condition params</span></span><br><span class="line">            <span class="type">ConditionExp</span> <span class="variable">exp</span> <span class="operator">=</span> ((If) n).getCondition();</span><br><span class="line">            <span class="type">Var</span> <span class="variable">op1</span> <span class="operator">=</span> exp.getOperand1();</span><br><span class="line">            <span class="type">Var</span> <span class="variable">op2</span> <span class="operator">=</span> exp.getOperand2();</span><br><span class="line">            ConditionExp.<span class="type">Op</span> <span class="variable">op</span> <span class="operator">=</span> exp.getOperator();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// get op1/op2 value using constant result</span></span><br><span class="line">            <span class="type">CPFact</span> <span class="variable">fact</span> <span class="operator">=</span> constants.getOutFact(n);</span><br><span class="line">            <span class="type">Value</span> <span class="variable">op1_value</span> <span class="operator">=</span> fact.get(op1);</span><br><span class="line">            <span class="type">Value</span> <span class="variable">op2_value</span> <span class="operator">=</span> fact.get(op2);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// judge condition</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">is_true</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (op1_value.isConstant() &amp;&amp; op2_value.isConstant()) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">op1_constant_value</span> <span class="operator">=</span> op1_value.getConstant();</span><br><span class="line">                <span class="type">int</span> <span class="variable">op2_constant_value</span> <span class="operator">=</span> op2_value.getConstant();</span><br><span class="line">                <span class="keyword">if</span> (op == ConditionExp.Op.EQ) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (op1_constant_value == op2_constant_value)</span><br><span class="line">                        is_true = <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == ConditionExp.Op.GE) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (op1_constant_value &gt;= op2_constant_value)</span><br><span class="line">                        is_true = <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == ConditionExp.Op.GT) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (op1_constant_value &gt; op2_constant_value)</span><br><span class="line">                        is_true = <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == ConditionExp.Op.LE) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (op1_constant_value &lt;= op2_constant_value)</span><br><span class="line">                        is_true = <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == ConditionExp.Op.LT) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (op1_constant_value &lt; op2_constant_value)</span><br><span class="line">                        is_true = <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Condition op error&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (op1_value.isConstant() &amp;&amp; op2_value.isConstant()) &#123;</span><br><span class="line">                <span class="comment">/* update deadcode set */</span></span><br><span class="line">                Set&lt;Edge&lt;Stmt&gt;&gt; edges = cfg.getOutEdgesOf(n);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// ensure deadcode branch entry</span></span><br><span class="line">                <span class="keyword">if</span> (is_true) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Edge&lt;Stmt&gt; e: edges) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (e.getKind() == Edge.Kind.IF_FALSE) &#123;</span><br><span class="line">                            entry = e.getTarget();</span><br><span class="line">                            source_edge = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Edge&lt;Stmt&gt; e: edges) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (e.getKind() == Edge.Kind.IF_TRUE) &#123;</span><br><span class="line">                            entry = e.getTarget();</span><br><span class="line">                            source_edge = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// traverse branch and update deadcode set</span></span><br><span class="line">                Set&lt;Stmt&gt; deadcode_set_update = deadcodeSetFromEntry(source_edge, entry, cfg, deadCode);</span><br><span class="line">                deadCode.addAll(deadcode_set_update);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n <span class="keyword">instanceof</span> SwitchStmt) &#123;</span><br><span class="line">            <span class="comment">// get params p</span></span><br><span class="line">            <span class="type">Var</span> <span class="variable">p</span> <span class="operator">=</span> ((SwitchStmt) n).getVar();</span><br><span class="line">            Set&lt;Edge&lt;Stmt&gt;&gt; case_condition_edges = cfg.getOutEdgesOf(n);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// get p value using constant result</span></span><br><span class="line">            <span class="type">CPFact</span> <span class="variable">fact</span> <span class="operator">=</span> constants.getOutFact(n);</span><br><span class="line">            <span class="type">Value</span> <span class="variable">p_value</span> <span class="operator">=</span> fact.get(p);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* update deadcode set */</span></span><br><span class="line">            <span class="keyword">if</span> (p_value.isConstant()) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">p_constant_value</span> <span class="operator">=</span> p_value.getConstant();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// judge go CASE or DEFAULT</span></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">exec_default</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span> (Edge&lt;Stmt&gt; e: case_condition_edges) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.getKind() == Edge.Kind.SWITCH_CASE) &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">case_value</span> <span class="operator">=</span> e.getCaseValue();</span><br><span class="line">                        <span class="keyword">if</span> (p_constant_value == case_value)</span><br><span class="line">                            exec_default = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// update</span></span><br><span class="line">                <span class="keyword">for</span> (Edge&lt;Stmt&gt; e: case_condition_edges) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.getKind() == Edge.Kind.SWITCH_CASE) &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">case_value</span> <span class="operator">=</span> e.getCaseValue();</span><br><span class="line">                        <span class="comment">// maybe deadcode</span></span><br><span class="line">                        <span class="keyword">if</span> (p_constant_value != case_value) &#123;</span><br><span class="line">                            entry = e.getTarget();</span><br><span class="line">                            source_edge = e;</span><br><span class="line">                            <span class="comment">// traverse branch and update deadcode set</span></span><br><span class="line">                            Set&lt;Stmt&gt; deadcode_set_update = deadcodeSetFromEntry(source_edge, entry, cfg, deadCode);</span><br><span class="line">                            deadCode.addAll(deadcode_set_update);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.getKind() == Edge.Kind.SWITCH_DEFAULT &amp;&amp; !exec_default) &#123;</span><br><span class="line">                        entry = e.getTarget();</span><br><span class="line">                        source_edge = e;</span><br><span class="line">                        <span class="comment">// traverse branch and update deadcode set</span></span><br><span class="line">                        Set&lt;Stmt&gt; deadcode_set_update = deadcodeSetFromEntry(source_edge, entry, cfg, deadCode);</span><br><span class="line">                        deadCode.addAll(deadcode_set_update);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// judge not live and not call</span></span><br><span class="line">        <span class="keyword">if</span> (n <span class="keyword">instanceof</span> AssignStmt&lt;?,?&gt;) &#123;</span><br><span class="line">            Optional&lt;LValue&gt; def = n.getDef();</span><br><span class="line">            SetFact&lt;Var&gt; fact = liveVars.getOutFact(n);</span><br><span class="line">            <span class="keyword">if</span> (def.isPresent()) &#123;</span><br><span class="line">                <span class="type">LValue</span> <span class="variable">tmp</span> <span class="operator">=</span> def.get();</span><br><span class="line">                <span class="keyword">if</span> (tmp <span class="keyword">instanceof</span> Var) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!fact.contains((Var) tmp)) &#123;</span><br><span class="line">                        <span class="comment">// traverse branch and update deadcode set</span></span><br><span class="line">                        deadCode.add(n);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> deadCode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Set&lt;Stmt&gt; <span class="title function_">deadcodeSetFromEntry</span><span class="params">(Edge&lt;Stmt&gt; source_edge, Stmt entry, CFG&lt;Stmt&gt; cfg, Set&lt;Stmt&gt; cur_deadcode)</span> &#123;</span><br><span class="line">    Set&lt;Stmt&gt; deadcode_update = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(Comparator.comparing(Stmt::getIndex));</span><br><span class="line">    Queue&lt;Stmt&gt; wl = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// judge entry is deadcode or not</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">entry_is_deadcode</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (source_edge != <span class="literal">null</span>) &#123;</span><br><span class="line">        Set&lt;Edge&lt;Stmt&gt;&gt; entry_in_edges = cfg.getInEdgesOf(entry);</span><br><span class="line">        <span class="keyword">for</span> (Edge&lt;Stmt&gt; in_e: entry_in_edges) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!in_e.equals(source_edge) &amp;&amp; !cur_deadcode.contains(in_e.getSource()))</span><br><span class="line">                entry_is_deadcode = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!entry_is_deadcode)</span><br><span class="line">        <span class="keyword">return</span> deadcode_update;</span><br><span class="line"></span><br><span class="line">    deadcode_update.add(entry);</span><br><span class="line">    wl.offer(entry);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// deadcode propogation</span></span><br><span class="line">    <span class="keyword">while</span> (!wl.isEmpty()) &#123;</span><br><span class="line">        <span class="type">Stmt</span> <span class="variable">cur</span> <span class="operator">=</span> wl.poll();</span><br><span class="line">        Set&lt;Edge&lt;Stmt&gt;&gt; edges = cfg.getOutEdgesOf(cur);</span><br><span class="line">        <span class="keyword">for</span> (Edge&lt;Stmt&gt; e: edges) &#123;</span><br><span class="line">            <span class="type">Stmt</span> <span class="variable">targ</span> <span class="operator">=</span> e.getTarget();</span><br><span class="line">            <span class="comment">// judge target is deadcode or not</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">targ_is_deadcode</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            Set&lt;Edge&lt;Stmt&gt;&gt; targ_in_edges = cfg.getInEdgesOf(targ);</span><br><span class="line">            <span class="keyword">for</span> (Edge&lt;Stmt&gt; te: targ_in_edges) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!e.equals(te) &amp;&amp; !cur_deadcode.contains(te.getSource()))</span><br><span class="line">                    targ_is_deadcode = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (targ_is_deadcode &amp;&amp; targ.getIndex() &lt; cfg.getIR().getStmts().size()) &#123;</span><br><span class="line">                deadcode_update.add(targ);</span><br><span class="line">                wl.offer(targ);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> deadcode_update;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x04-类层次结构分析与过程间常量传播"><a href="#0x04-类层次结构分析与过程间常量传播" class="headerlink" title="0x04 类层次结构分析与过程间常量传播"></a>0x04 类层次结构分析与过程间常量传播</h2><p>&emsp;本作业为 java 实现一个类层次分析（class hierarchy analysis，CHA），并实现过程间常量传播与数据流传播的 worklist 求解器。本次作业需要实现一个基于类层次结构（CHA）的调用图，只需关注 int 的常量传播，但是需要更准确的处理方法调用。与保守处理方法调用的过程内常量传播相比，过程间常量传播可以达到更好的精度。</p><h3 id="Java-函数调用的四种类型"><a href="#Java-函数调用的四种类型" class="headerlink" title="Java 函数调用的四种类型"></a>Java 函数调用的四种类型</h3><p>（1）invokestatic，调用静态方法，在编译时确定要调用的目标方法，属于静态绑定。静态方法是属于类而不是实例的，因此可以直接调用类的静态方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a static method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ExampleClass.staticMethod(); <span class="comment">// 使用 invokestatic 调用静态方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）invokespecial：调用实例方法，包括私有方法、构造方法和通过 super 关键字调用的超类方法。在编译时确定要调用的目标方法，属于静态绑定，它主要用于调用与特定对象关联的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">privateMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a private method.&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExampleClass</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a constructor.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExampleClass</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExampleClass</span>(); <span class="comment">// 使用 invokespecial 调用构造方法</span></span><br><span class="line">        obj.privateMethod(); <span class="comment">// 使用 invokespecial 调用私有方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）invokeinterface：调用接口方法，这个指令会在<code>运行时</code>根据对象的实际类型进行动态绑定，并调用实现该接口的对象的对应方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ExampleInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">interfaceMethod</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExampleClass</span> <span class="keyword">implements</span> <span class="title class_">ExampleInterface</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">interfaceMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is an interface method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExampleInterface</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExampleClass</span>();</span><br><span class="line">        obj.interfaceMethod(); <span class="comment">// 使用 invokeinterface 调用接口方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）invokevirtual：调用普通的虚方法，在<code>运行时</code>根据对象的实际类型进行动态绑定，并调用相应的方法，它允许在继承层次结构中进行方法的动态分派。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ParentClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">virtualMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a virtual method from the parent class.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChildClass</span> <span class="keyword">extends</span> <span class="title class_">ParentClass</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">virtualMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a virtual method from the child class.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ParentClass</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChildClass</span>(); </span><br><span class="line">        obj.virtualMethod(); <span class="comment">// 使用 invokevirtual 调用虚方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;Java 中的一些新特性会让方法调用的情形更复杂，比如 Java 8 开始允许接口定义默认方法，在此我们不考虑这些。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ExampleInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">abstractMethod</span><span class="params">()</span>; <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="comment">// 默认方法</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">defaultMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a default method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExampleClass</span> <span class="keyword">implements</span> <span class="title class_">ExampleInterface</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">abstractMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is an implementation of the abstract method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExampleClass</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExampleClass</span>();</span><br><span class="line">        obj.abstractMethod();</span><br><span class="line">        obj.defaultMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类层次分析（CHA）相关的知识点"><a href="#类层次分析（CHA）相关的知识点" class="headerlink" title="类层次分析（CHA）相关的知识点"></a>类层次分析（CHA）相关的知识点</h3><ul><li><code>pascal.taie.analysis.graph.callgraph.DefaultCallGraph</code>。</li></ul><p>&emsp;代表了程序的调用图。它提供了 API 来获取到调用图的信息，它还提供了一些修改调用图的 API。（1）<code>callSitesIn(JMethod)</code>，返回所有调用方法<code>JMethod</code>的调用点；（2）<code>contains(JMethod)</code>，返回当前调用图是否含有<code>JMethod</code>，即<code>JMethod</code>在当前调用图中是否可达；（3）<code>addReachableMethod(JMethod)</code>，向当前调用图中添加方法<code>JMethod</code>并将方法标记成可达的；（4）<code>addEdge(Edge&lt;Invoke, JMethod&gt;)</code>，向当前调用图中添加一条调用边。</p><ul><li><code>pascal.taie.analysis.graph.callgraph.CallKind</code>。</li></ul><p>&emsp;表示调用图中边的种类，包括 INTERFACE、VIRTUAL、SPECIAL 和 STATIC。</p><ul><li><code>pascal.taie.analysis.graph.callgraph.Edge&lt;Invoke,JMethod&gt;</code>。</li></ul><p>&emsp;表示调用图中的边，每一条边从调用点（call site，Invoke 类型）出发，指向被调用方法（callee method，类型为 <code>JMethod</code>）。在创建一条边的时候，你需要向构造方法提供调用类型（边的种类）、调用点和被调用方法的信息。</p><ul><li><code>pascal.taie.ir.stmt.Invoke</code>。</li></ul><p>&emsp;Stmt 的子类，该类表示程序中的方法调用以及调用图中的调用点，它提供了一些 API 来获取调用点的各种信息，例如使用 getMethodRef() 来获取目标方法的签名信息。</p><ul><li><code>pascal.taie.ir.proginfo.MethodRef</code>。</li></ul><p>&emsp;Tai-e 中的目标方法引用，它包含了调用点所调用的目标方法的签名信息。（1）<code>getDeclaringClass()</code>，返回声明该方法的类；（2）<code>getSubsignature()</code>，返回被调用方法的子签名（<code>subsignature</code>）。</p><ul><li><code>pascal.taie.language.classes.JMethod</code>。</li></ul><p>&emsp;表示 Tai-e 中的 Java 方法，每个 JMethod 的实例关联着一个方法并包含该方法的各种信息。（1）<code>isAbstract()</code>，判断该 <code>JMethod</code> 是否是一个没有方法体的抽象方法；</p><ul><li><code>pascal.taie.language.classes.JClass</code>。</li></ul><p>&emsp;表示 Tai-e 中的 Java 类。每个 <code>JClass</code> 的实例关联着一个类并包含该类的各种信息。（1）<code>getSuperClass()</code>，返回该类的父类；（2）<code>getDeclaredMethod(Subsignature)</code>，根据子签名返回该类中声明的对应方法；（3）<code>isInterface()</code>，判断该类是否是一个接口。</p><ul><li><code>pascal.taie.language.classes.Subsignature</code>。</li></ul><p>&emsp;表示 Tai-e 中的子签名。一个方法的子签名只包含它的方法名f和方法签名的描述符，例如，下面方法 foo 的子签名是<code>T foo(P,Q,R)</code>，而它的完整签名是<code>&lt;C: T foo(P,Q,R)&gt;</code>。</p><ul><li><code>pascal.taie.language.classes.ClassHierarchy</code>。</li></ul><p>&emsp;<code>getDirectSubclassesOf(JClass)</code>返回直接继承该类的子类；<code>getDirectSubinterfacesOf(JClass)</code>返回直接继承该接口的子接口；<code>getDirectImplementorsOf(JClass)</code>返回直接实现了该接口的类。</p><ul><li><code>pascal.taie.analysis.graph.callgraph.CHABuilder</code>。</li></ul><p>&emsp;通过 CHA 来建立调用图，这是我们要完成的函数，主要完成 dispatch|resolve|BuildCallGraph 3 个函数。</p><h4 id="Virtual-call-的-dispatch：例如-o-foo"><a href="#Virtual-call-的-dispatch：例如-o-foo" class="headerlink" title="Virtual call 的 dispatch：例如 o.foo()"></a>Virtual call 的 dispatch：例如 o.foo()</h4><p>&emsp;例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">void foo() &#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line">class B extends A &#123;&#125;</span><br><span class="line">A o = new B();</span><br><span class="line">o.foo();</span><br></pre></td></tr></table></figure><p>&emsp;假设此时 o 的类型为 A，foo 函数签名为 m。我们使用 Dispatch(c,m) 来模拟运行时阶段的 method dispatch 过程。如果 A 包括与 m 的签名相同的 m’ 方法，且 m’ 方法是非抽象的，那么 Dispatch(A,m)=m’，否则 Dispatch(A,m)=Dispatch(A’,m)（其中 A’ 是 A 的父类）。</p><h4 id="Call-的-resolve"><a href="#Call-的-resolve" class="headerlink" title="Call 的 resolve"></a>Call 的 resolve</h4><p>&emsp;以如下代码举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class C extends B &#123;</span><br><span class="line">T foo(P p, Q q) &#123;</span><br><span class="line">...</span><br><span class="line">super.foo(p, q)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/tai-e-static-analysis-with-homework/image-20240123163737171.png" alt="image-20240123163737171" style="zoom:67%;" /></p><p>&emsp;对上述代码实施 CHA resolution 的步骤 resolve(super.foo(p,q))：</p><p><img src="/images/tai-e-static-analysis-with-homework/image-20240123163600737.png" alt="image-20240123163600737" style="zoom:67%;" /></p><p>&emsp;<code>super.foo(p,q)</code>的类是 B。</p><p>&emsp;再比如，有代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">T foo(P p, Q q) &#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line">A a = ...</span><br><span class="line">a.foo(x,y)</span><br></pre></td></tr></table></figure><p>&emsp;<code>可以重写的函数，在调用时都是 virtual call</code>。那么经过上述的 resolve 步骤后，receiver variable c 是 A，之后就是遍历 A 的子类，然后做 dispatch(A的子类,m)。</p><p>&emsp;感觉类型之间的赋值都是父类要承接子类的对象。举个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">void foo() &#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line">class B extends A &#123;&#125;</span><br><span class="line">class C extends B &#123;</span><br><span class="line">void foo() &#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line">class D extends B &#123;</span><br><span class="line">void foo() &#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line">C c = ...</span><br><span class="line">c.foo()</span><br><span class="line"></span><br><span class="line">A a = ...</span><br><span class="line">a.foo()</span><br><span class="line"></span><br><span class="line">B b = ...</span><br><span class="line">b.foo()</span><br></pre></td></tr></table></figure><p>&emsp;首先，c.foo()/a.foo()/b.foo() 都是 virtual call，那么 <code>resolve(c.foo()) = &#123;C.foo()&#125;</code>，<code>resolve(a.foo()) = &#123;A.foo(), C.foo(), D.foo()&#125;</code>，<code>resolve(b.foo()) = &#123;A.foo(), C.foo(), D.foo()&#125;</code>。</p><h4 id="Call-Graph-构建"><a href="#Call-Graph-构建" class="headerlink" title="Call Graph 构建"></a>Call Graph 构建</h4><p>&emsp;从入口函数开始，对于每一个可到达的方法 m，对于函数的每一个调用（call site），都执行 resolve，直到没有新的函数加入。</p><p><img src="/images/tai-e-static-analysis-with-homework/image-20240123171509230.png" alt="image-20240123171509230" style="zoom:67%;" /></p><p>&emsp;具体的例子可以看 <a href="https://cs.nju.edu.cn/tiantan/software-analysis/Inter.pdf#page=26">link</a> 的 P57。</p><h4 id="CHA-的特点"><a href="#CHA-的特点" class="headerlink" title="CHA 的特点"></a>CHA 的特点</h4><p>&emsp;快速，只需要考虑 receiver variable 的类型，以及其层次关系，忽略了数据流与控制流。但是不准确，很容易有冗余，例如 <code>resolve(b.foo()) = &#123;A.foo(), C.foo(), D.foo()&#125;</code>，其中 C.foo() 与 D.foo() 是不可能调用的。</p><h3 id="函数间的常量传播知识点"><a href="#函数间的常量传播知识点" class="headerlink" title="函数间的常量传播知识点"></a>函数间的常量传播知识点</h3><h4 id="Edge-transfer"><a href="#Edge-transfer" class="headerlink" title="Edge transfer"></a>Edge transfer</h4><p>&emsp;过程间（函数间）常量传播与过程内常量传播类似，区别是过程间常量传播使用了 edge transfer，因此可以更准确的处理方法调用和返回。过程内数据流分析中，如果想要计算节点的 INfact，需要 meet 该节点前驱的 OUTfact。但是在过程间数据流分析中，INfact 是前驱的 OUTfact 进行 edge transfer 之后再 meet 的结果。</p><p>&emsp;例如，对于过程间调用来说，如下是一个过程间调用的 CFG（ICFG）：</p><p><img src="/images/tai-e-static-analysis-with-homework/image-20240123190149039.png" alt="image-20240123190149039" style="zoom:67%;" /></p><p>&emsp;为了计算第 4 条语句的 IN fact，也就是方法 <code>addOne()</code> 的 entry 节点的 IN fact，我们需要对 2-4 这条边应用 edge transfer，这样使得第 2 条语句的 OUT fact（a=6）转换为 x=6，并最终 meet 结果 x=6 到第四条语句的 IN fact中。我们可以定义相关的 edge transfer 函数，其以 ICFG 的一条边和边的源节点为输入。</p><p>&emsp;过程间的常量传播中，我们需要处理 4 种类型的边：</p><ul><li>Normal edge。与过程间调用无关的边，无需进行处理，即 transferEdge(edge, fact) = fact。</li><li>Call-to-return edge（2-&gt;3）。针对方法调用 x = m(…)，edge transfer 会把等号左侧的变量（x）与其 value 从 fact 中 kill 掉。对于类似于 m(…) 的调用，不做处理。</li><li>Call edge（2-&gt;4）。edge transfer 将实参在调用点中的值传递给被调用函数的形参。Edge transfer 首先从调用点的 OUTfact 中获取实参的值，然后返回新的 fact，这个 fact 把形参映射到值。例如：<code>transferEdge(2-4, &#123;a=6&#125;)=&#123;x=6&#125;</code>。</li><li>Return edge（6-&gt;3）。edge transfer 函数将被调用方法的返回值传递给调用点等号左侧的变量。它从被调用方法的 exit 节点的 OUT fact 中获取返回值（可能有多个），然后返回一个将调用点等号左侧的变量映射到返回值的 fact。例如，transferEdge(6-3, {x=6,y=7}) = {b=7}。如果该调用点等号左侧没有变量，那么 edge transfer 函数仅会返回一个空 fact。</li></ul><h4 id="相关类"><a href="#相关类" class="headerlink" title="相关类"></a>相关类</h4><ul><li><code>pascal.taie.analysis.graph.icfg.ICFGEdge</code>。</li></ul><p>&emsp;抽象类，表示了 ICFG 中的边。而它有四个子类：<code>Normal Edge</code>、<code>CallToReturnEdge</code>、<code>CallEdge</code>、<code>ReturnEdge</code>。</p><ul><li><code>pascal.taie.analysis.dataflow.inter.InterDataflowAnalysis</code>。</li></ul><p>&emsp;过程间数据流分析的接口，共有 6 个 API，前 5 个 API 都与过程内数据流分析相同，最后一个 API 就是 <code>transferEdge()</code>。</p><ul><li><code>pascal.taie.analysis.dataflow.inter.AbstractInterDataflowAnalysis</code>。</li></ul><p>&emsp;该抽象类把 ICFG 中不同的点和边分派给对应 transfer 方法。</p><ul><li><code>pascal.taie.analysis.dataflow.inter.InterConstantPropagation</code>。</li></ul><p>&emsp;需要完成的此类中的函数。</p><ul><li><code>pascal.taie.ir.exp.InvokeExp</code>。</li></ul><p>&emsp;表示程序中的方法调用表达式，它包含了被调用的方法引用和传入的各个参数。</p><h4 id="过程间的-worklist-求解器"><a href="#过程间的-worklist-求解器" class="headerlink" title="过程间的 worklist 求解器"></a>过程间的 worklist 求解器</h4><p>&emsp;与过程内的 worklist 大致相同，不同点是：（1）节点的 INfact 要对前驱的 OUTfact 进行 edge transfer 之后再 meet；（2）需要初始程序中所有的 IN/OUTfact，但是只需要对 ICFG 的 entry 方法设置 boundary fact。</p><h3 id="作业代码-3"><a href="#作业代码-3" class="headerlink" title="作业代码"></a>作业代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CHABuilder.java</span></span><br><span class="line"><span class="keyword">private</span> CallGraph&lt;Invoke, JMethod&gt; <span class="title function_">buildCallGraph</span><span class="params">(JMethod entry)</span> &#123;</span><br><span class="line">    <span class="type">DefaultCallGraph</span> <span class="variable">callGraph</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultCallGraph</span>();</span><br><span class="line">    callGraph.addEntryMethod(entry);</span><br><span class="line">    <span class="comment">// initialize</span></span><br><span class="line">    Queue&lt;JMethod&gt; wl = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    wl.offer(entry);</span><br><span class="line">    <span class="keyword">while</span> (!wl.isEmpty()) &#123;</span><br><span class="line">        <span class="type">JMethod</span> <span class="variable">m</span> <span class="operator">=</span> wl.poll();</span><br><span class="line">        <span class="keyword">if</span> (callGraph.reachableMethods().noneMatch(mm -&gt; mm.equals(m))) &#123;</span><br><span class="line">            callGraph.addReachableMethod(m);</span><br><span class="line">            Set&lt;Invoke&gt; all_cs_m = callGraph.getCallSitesIn(m);</span><br><span class="line">            <span class="keyword">for</span>(Invoke cs_m: all_cs_m) &#123;</span><br><span class="line">                Set&lt;JMethod&gt; T = resolve(cs_m);</span><br><span class="line">                <span class="keyword">for</span> (JMethod mm: T) &#123;</span><br><span class="line">                    <span class="comment">// add cs -&gt; mm to CG</span></span><br><span class="line">                    callGraph.addEdge(<span class="keyword">new</span> <span class="title class_">Edge</span>&lt;&gt;(CallGraphs.getCallKind(cs_m), cs_m, mm));</span><br><span class="line">                    wl.add(mm);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> callGraph;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Set&lt;JMethod&gt; <span class="title function_">resolve</span><span class="params">(Invoke callSite)</span> &#123;</span><br><span class="line">    Set&lt;JMethod&gt; T = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="type">JMethod</span> <span class="variable">m</span> <span class="operator">=</span> callSite.getMethodRef()</span><br><span class="line">        .getDeclaringClass()</span><br><span class="line">        .getDeclaredMethod(callSite.getMethodRef().getSubsignature());</span><br><span class="line">    <span class="keyword">assert</span> m != <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (callSite.isStatic()) &#123;</span><br><span class="line">        <span class="comment">// T = &#123;m&#125;</span></span><br><span class="line">        T.add(m);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (callSite.isSpecial()) &#123;</span><br><span class="line">        <span class="comment">// T = &#123;dispatch(c^m, m)&#125;</span></span><br><span class="line">        <span class="type">JClass</span> <span class="variable">c_m</span> <span class="operator">=</span> callSite.getMethodRef().getDeclaringClass();</span><br><span class="line">        <span class="type">JMethod</span> <span class="variable">dispatch_ret</span> <span class="operator">=</span> dispatch(c_m, callSite.getMethodRef().getSubsignature());</span><br><span class="line">        <span class="keyword">if</span> (dispatch_ret != <span class="literal">null</span>) &#123;</span><br><span class="line">            T.add(dispatch_ret);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (callSite.isVirtual() || callSite.isInterface()) &#123;</span><br><span class="line">        <span class="comment">// isVirtual and isInterface is same process</span></span><br><span class="line">        <span class="comment">// T = &#123;dispatch(c&#x27;, m)&#125;</span></span><br><span class="line">        <span class="type">JClass</span> <span class="variable">c</span> <span class="operator">=</span> callSite.getMethodRef().getDeclaringClass();</span><br><span class="line">        Collection&lt;JClass&gt; c_sub = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();;</span><br><span class="line">        c_sub.add(c);</span><br><span class="line">        <span class="keyword">while</span> (!c_sub.isEmpty()) &#123;</span><br><span class="line">            Collection&lt;JClass&gt; c_sub_new = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (JClass c_sub_single: c_sub) &#123;</span><br><span class="line">                <span class="type">JMethod</span> <span class="variable">dispatch_re</span> <span class="operator">=</span> dispatch(c_sub_single, callSite.getMethodRef().getSubsignature());</span><br><span class="line">                <span class="keyword">if</span> (dispatch_re != <span class="literal">null</span>) &#123;</span><br><span class="line">                    T.add(dispatch_re);</span><br><span class="line">                &#125;</span><br><span class="line">                c_sub_new.addAll(hierarchy.getDirectSubclassesOf(c_sub_single));</span><br><span class="line">                c_sub_new.addAll(hierarchy.getDirectImplementorsOf(c_sub_single));</span><br><span class="line">                c_sub_new.addAll(hierarchy.getDirectSubinterfacesOf(c_sub_single));</span><br><span class="line">            &#125;</span><br><span class="line">            c_sub = c_sub_new;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;call type error.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> JMethod <span class="title function_">dispatch</span><span class="params">(JClass jclass, Subsignature subsignature)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (jclass != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">JMethod</span> <span class="variable">m</span> <span class="operator">=</span> jclass.getDeclaredMethod(subsignature);</span><br><span class="line">        <span class="keyword">if</span> (m != <span class="literal">null</span> &amp;&amp; !m.isAbstract()) &#123;</span><br><span class="line">            <span class="comment">// dispatch(c, m) = m&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// dispatch(c, m) = dispatch(c&#x27;, m)</span></span><br><span class="line">            <span class="type">JClass</span> <span class="variable">super_class</span> <span class="operator">=</span> jclass.getSuperClass();</span><br><span class="line">            <span class="keyword">return</span> dispatch(super_class, subsignature);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// InterConstantPropagation.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">transferCallNode</span><span class="params">(Stmt stmt, CPFact in, CPFact out)</span> &#123;</span><br><span class="line">    <span class="comment">// Refer to https://github.com/MirageLyu/Tai-e-assignments/blob/main/A4/tai-e/src/main/java/pascal/taie/analysis/dataflow/inter/InterConstantPropagation.java</span></span><br><span class="line">    <span class="keyword">if</span> (!out.equals(in)) &#123;</span><br><span class="line">        out.copyFrom(in);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">transferNonCallNode</span><span class="params">(Stmt stmt, CPFact in, CPFact out)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cp.transferNode(stmt, in, out);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> CPFact <span class="title function_">transferNormalEdge</span><span class="params">(NormalEdge&lt;Stmt&gt; edge, CPFact out)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> out.copy();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> CPFact <span class="title function_">transferCallToReturnEdge</span><span class="params">(CallToReturnEdge&lt;Stmt&gt; edge, CPFact out)</span> &#123;</span><br><span class="line">    <span class="type">CPFact</span> <span class="variable">result</span> <span class="operator">=</span> out.copy();</span><br><span class="line">    <span class="type">Stmt</span> <span class="variable">source</span> <span class="operator">=</span> edge.getSource();</span><br><span class="line">    Optional&lt;LValue&gt; v = source.getDef();</span><br><span class="line">    <span class="keyword">if</span> (v.isPresent()) &#123;</span><br><span class="line">        <span class="type">LValue</span> <span class="variable">vv</span> <span class="operator">=</span> v.get();</span><br><span class="line">        <span class="keyword">if</span> (vv <span class="keyword">instanceof</span> Var) &#123;</span><br><span class="line">            result.remove((Var)vv);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> CPFact <span class="title function_">transferCallEdge</span><span class="params">(CallEdge&lt;Stmt&gt; edge, CPFact callSiteOut)</span> &#123;</span><br><span class="line">    <span class="comment">// transferEdge(2-&gt;4, &#123;a=6&#125;) = &#123;x=6&#125;</span></span><br><span class="line">    <span class="type">CPFact</span> <span class="variable">result</span> <span class="operator">=</span> newInitialFact();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// caller args</span></span><br><span class="line">    <span class="type">Stmt</span> <span class="variable">source</span> <span class="operator">=</span> edge.getSource();</span><br><span class="line">    <span class="keyword">assert</span> source <span class="keyword">instanceof</span> Invoke;</span><br><span class="line">    List&lt;Var&gt; args_source = ((Invoke)source).getInvokeExp().getArgs();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// callee args</span></span><br><span class="line">    <span class="type">JMethod</span> <span class="variable">target</span> <span class="operator">=</span> edge.getCallee();</span><br><span class="line">    List&lt;Var&gt; args_target = target.getIR().getParams();</span><br><span class="line">    <span class="keyword">assert</span> args_target.size() == args_source.size();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// pass caller args to callee args</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args_source.size(); i++) &#123;</span><br><span class="line">        <span class="type">Var</span> <span class="variable">v</span> <span class="operator">=</span> args_source.get(i);</span><br><span class="line">        <span class="type">Value</span> <span class="variable">val</span> <span class="operator">=</span> callSiteOut.get(v);</span><br><span class="line">        result.update(args_target.get(i), val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> CPFact <span class="title function_">transferReturnEdge</span><span class="params">(ReturnEdge&lt;Stmt&gt; edge, CPFact returnOut)</span> &#123;</span><br><span class="line">    <span class="comment">// transferEdge(6-&gt;3, &#123;x=6,y=7&#125;) = &#123;b=7&#125;</span></span><br><span class="line">    <span class="type">CPFact</span> <span class="variable">result</span> <span class="operator">=</span> newInitialFact();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get Var to update</span></span><br><span class="line">    <span class="type">Stmt</span> <span class="variable">stmt</span> <span class="operator">=</span> edge.getCallSite();</span><br><span class="line">    <span class="type">Value</span> <span class="variable">val</span> <span class="operator">=</span> Value.getUndef();</span><br><span class="line">    <span class="keyword">for</span> (Var <span class="keyword">var</span> : edge.getReturnVars()) &#123;</span><br><span class="line">        val = cp.meetValue(val, returnOut.get(<span class="keyword">var</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (stmt <span class="keyword">instanceof</span> Invoke &amp;&amp; ((Invoke) stmt).getLValue() != <span class="literal">null</span>) &#123;</span><br><span class="line">        result.update(((Invoke) stmt).getLValue(), val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// InterSolver.java</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// every entry in function should have boundaryfact, which conflict to PPT</span></span><br><span class="line">    icfg.entryMethods().forEach(entry_method -&gt; &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">entry_node</span> <span class="operator">=</span> icfg.getEntryOf(entry_method);</span><br><span class="line">        result.setInFact(entry_node, analysis.newBoundaryFact(entry_node));</span><br><span class="line">        result.setOutFact(entry_node, analysis.newBoundaryFact(entry_node));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    icfg.forEach(node -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (icfg.entryMethods().noneMatch(entry_method -&gt; node.equals(icfg.getEntryOf(entry_method)))) &#123;</span><br><span class="line">            result.setInFact(node, analysis.newInitialFact());</span><br><span class="line">            result.setOutFact(node, analysis.newInitialFact());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doSolve</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (Node n: icfg)</span><br><span class="line">        workList.offer(n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!workList.isEmpty()) &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">changed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// pick basic block B from Worklist</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> workList.poll();</span><br><span class="line">        <span class="comment">// IN[B] = UNION(transferEdge(OUT[P]))</span></span><br><span class="line">        <span class="type">Fact</span> <span class="variable">fact</span> <span class="operator">=</span> result.getInFact(cur);</span><br><span class="line">        <span class="keyword">for</span> (ICFGEdge&lt;Node&gt; pred: icfg.getInEdgesOf(cur)) &#123;</span><br><span class="line">            <span class="type">Fact</span> <span class="variable">tmp</span> <span class="operator">=</span> analysis.transferEdge(pred, result.getOutFact(pred.getSource()));</span><br><span class="line">            analysis.meetInto(tmp, fact);</span><br><span class="line">        &#125;</span><br><span class="line">        result.setInFact(cur, fact);</span><br><span class="line">        <span class="comment">// OUT[B] = genB UNION (IN[B]-killB)</span></span><br><span class="line">        <span class="type">Fact</span> <span class="variable">in_fact</span> <span class="operator">=</span> result.getInFact(cur);</span><br><span class="line">        <span class="type">Fact</span> <span class="variable">out_fact</span> <span class="operator">=</span> result.getOutFact(cur);</span><br><span class="line">        changed = analysis.transferNode(cur, in_fact, out_fact);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (changed)</span><br><span class="line">            <span class="keyword">for</span> (Node suc: icfg.getSuccsOf(cur))</span><br><span class="line">                <span class="keyword">if</span> (!workList.contains(suc))</span><br><span class="line">                    workList.offer(suc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/tai-e-static-analysis-with-homework/image-20240208155720692.png" alt="image-20240208155720692" style="zoom:67%;" /></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;软件分析基础知识-amp-作业&quot;&gt;&lt;a href=&quot;#软件分析基础知识-amp-作业&quot; class=&quot;headerlink&quot; title=&quot;软件分析基础知识&amp;amp;作业&quot;&gt;&lt;/a&gt;软件分析基础知识&amp;amp;作业&lt;/h1&gt;&lt;p&gt;&amp;emsp;之前翔哥给我具体讲了讲软件分析的基础知识，翔哥的链接如下所示：&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&quot;https://xym4ster.github.io/post/Program-Analysis-01&quot;&gt;https://xym4ster.github.io/post/Program-Analysis-01&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] &lt;a href=&quot;https://xym4ster.github.io/post/Program-Analysis-02&quot;&gt;https://xym4ster.github.io/post/Program-Analysis-02&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[3] &lt;a href=&quot;https://xym4ster.github.io/post/Program-Analysis-03&quot;&gt;https://xym4ster.github.io/post/Program-Analysis-03&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[4] &lt;a href=&quot;https://xym4ster.github.io/post/Program-Analysis-04&quot;&gt;https://xym4ster.github.io/post/Program-Analysis-04&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[5] &lt;a href=&quot;https://xym4ster.github.io/post/Program-Analysis-05&quot;&gt;https://xym4ster.github.io/post/Program-Analysis-05&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="static-analysis" scheme="https://wd-2711.tech/categories/static-analysis/"/>
    
    
  </entry>
  
  <entry>
    <title>image-caption</title>
    <link href="https://wd-2711.tech/2023/11/09/image-caption/"/>
    <id>https://wd-2711.tech/2023/11/09/image-caption/</id>
    <published>2023-11-09T12:40:05.000Z</published>
    <updated>2024-02-27T19:23:08.168Z</updated>
    
    <content type="html"><![CDATA[<h1 id="image-caption-图像中文描述"><a href="#image-caption-图像中文描述" class="headerlink" title="image-caption: 图像中文描述"></a>image-caption: 图像中文描述</h1><p>数据集下载：<a href="https://tianchi.aliyun.com/dataset/145781?t=1699533627520">https://tianchi.aliyun.com/dataset/145781?t=1699533627520</a></p><span id="more"></span><h2 id="Show-Attend-and-Tell"><a href="#Show-Attend-and-Tell" class="headerlink" title="Show, Attend, and Tell"></a>Show, Attend, and Tell</h2><p>&emsp;这是一篇2021年的文章，用于生成图像的描述。利用卷积神经网络CNN提取图像特征，使用RNN将特征向量解码成语言序列。本论文在RNN（LSTM）上加入了attention机制，对图像特征的像素点进行概率估计，并加权求和，其思想为：人们在观察图像中倾向于关注有用信息，它创新性的将Attention作用到输入图像的像素点之上。</p><p><img src="/images/image-caption/image-20240207201435248.png" alt="image-20240207201435248" style="zoom:67%;" /></p><p>&emsp;此文的贡献是：（1）提出了基于attention的image caption；（2）可视化了attention在每个时间上关注的点；（3）量化了加入attention机制后性能的提高。</p><h3 id="Encoder"><a href="#Encoder" class="headerlink" title="Encoder"></a>Encoder</h3><p>&emsp;VGGNet、Inception等是在大规模图像数据集（如ImageNet）上进行了预训练的模型，可以很好的提取到图像的特征。通过将最后的flatten与FC去掉，可以得到特征图。</p><h3 id="Decoder"><a href="#Decoder" class="headerlink" title="Decoder"></a>Decoder</h3><p>&emsp;使用LSTM，在每个时间step上生成词语。</p><p>&emsp;复习一下LSTM的知识：</p><p><img src="/images/image-caption/image-20231130205705945.png" alt="image-20231130205705945" style="zoom:67%;" /></p><p>&emsp;LSTM的输入为：$C<em>{t-1},h</em>{t-1},x_{t}$，输出为$C_t,h_t$。</p><p>&emsp;遗忘门：</p><p><img src="/images/image-caption/image-20231130205921504.png" alt="image-20231130205921504" style="zoom:67%;" /></p><p>&emsp;输出门（存储并更新细胞状态）：</p><p><img src="/images/image-caption/image-20231130205950447.png" alt="image-20231130205950447" style="zoom:67%;" /></p><p><img src="/images/image-caption/image-20231130205959664.png" alt="image-20231130205959664" style="zoom:67%;" /></p><p>&emsp;输出门：</p><p><img src="/images/image-caption/image-20231130210149692.png" alt="image-20231130210149692" style="zoom:67%;" /></p><p><img src="/images/image-caption/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6%20(1).png" alt="未命名文件 (1)" style="zoom:67%;" /></p><h3 id="Attention"><a href="#Attention" class="headerlink" title="Attention"></a>Attention</h3><p>&emsp;作用是帮助生成LSTM中的$C<em>t$。利用CNN提取出的特征向量$a$与LSTM输出的$h</em>{t-1}$，通过FC+softmax计算每个像素点的概率值，之后对每个像素点加权求和。模型结构具体看下图。</p><p><img src="/images/image-caption/image-20231130220806283.png" alt="image-20231130220806283" style="zoom:80%;" /></p><h2 id="Backend"><a href="#Backend" class="headerlink" title="Backend"></a>Backend</h2><p>&emsp;我首先将训练好的模型封装成 <code>demo.py</code>，之后打算用 c++ 写的后端封装这个 <code>demo.py</code>。后端主要是借鉴了 <a href="https://github.com/trungams/http-server/tree/master/src">link</a>，吐槽一下，将其转为 Windows 下的服务器真不容易。</p><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><p>[1] <a href="https://github.com/foamliu/Image-Captioning-PyTorch">https://github.com/foamliu/Image-Captioning-PyTorch</a></p><p>[2] <a href="https://blog.csdn.net/qq_43152622/article/details/118755946">https://blog.csdn.net/qq_43152622/article/details/118755946</a></p><p>[3] <a href="https://github.com/dabasajay/Image-Caption-Generator">https://github.com/dabasajay/Image-Caption-Generator</a></p><p>[4] <a href="https://blog.csdn.net/sophicchen/article/details/103306545">https://blog.csdn.net/sophicchen/article/details/103306545</a></p><p>[5] <a href="https://omarshishani.com/how-to-upload-images-to-server-with-react-and-express/">https://omarshishani.com/how-to-upload-images-to-server-with-react-and-express/</a></p><p>[6] <a href="https://github.com/piscisaureus/wepoll">https://github.com/piscisaureus/wepoll</a></p><p>[7] <a href="https://github.com/trungams/http-server/tree/master">https://github.com/trungams/http-server/tree/master</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;image-caption-图像中文描述&quot;&gt;&lt;a href=&quot;#image-caption-图像中文描述&quot; class=&quot;headerlink&quot; title=&quot;image-caption: 图像中文描述&quot;&gt;&lt;/a&gt;image-caption: 图像中文描述&lt;/h1&gt;&lt;p&gt;数据集下载：&lt;a href=&quot;https://tianchi.aliyun.com/dataset/145781?t=1699533627520&quot;&gt;https://tianchi.aliyun.com/dataset/145781?t=1699533627520&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="ML" scheme="https://wd-2711.tech/categories/ML/"/>
    
    
  </entry>
  
  <entry>
    <title>oddfuzz</title>
    <link href="https://wd-2711.tech/2023/11/07/oddfuzz/"/>
    <id>https://wd-2711.tech/2023/11/07/oddfuzz/</id>
    <published>2023-11-07T12:15:44.000Z</published>
    <updated>2023-11-29T14:51:26.937Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ODDFUZZ-Discovering-Java-Deserialization-Vulnerabilities-via-Structure-Aware-Directed-Greybox-Fuzzing"><a href="#ODDFUZZ-Discovering-Java-Deserialization-Vulnerabilities-via-Structure-Aware-Directed-Greybox-Fuzzing" class="headerlink" title="ODDFUZZ: Discovering Java Deserialization Vulnerabilities via Structure-Aware Directed Greybox Fuzzing"></a>ODDFUZZ: Discovering Java Deserialization Vulnerabilities via Structure-Aware Directed Greybox Fuzzing</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>&emsp;可以用静态分析来定位java反序列化漏洞。ODDFUZZ使用轻量级污点分析定位候选的gadget链（避免漏报），之后使用定向灰盒测试生成poc用例来减少误报。ODDFUZZ使用结构感知种子生成方法保证用例有效性，并使用混合反馈与步进策略来指导定向模糊测试。</p><span id="more"></span><p>&emsp;找到ysoserial库34个漏洞中的16个（baseline 为3个），并在其他库中找到6个CVE。</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>&emsp;开放动态反序列化 OOD 具有破坏性（？），通过静态分析查找反序列化漏洞的工具有：（1）GadgetInspector，但是会有精度问题，从而产生漏报与误报；（2）SerHybrid，分析堆访问路径来寻找影响 sink 的 source。</p><p>&emsp;挑战：（1）精确率与召回率之间的权衡。由于java的运行时多态，任何重写的方法都可能变为gadget链，遍历所有可能的gadget链会使得路径爆炸，现有方法是使用污点分析剪枝，但是这种方法要么精度不行，要么计算代价太高。（2）现有fuzz生成的testcase都无法到达sink，生成有效的testcase需要多层级结构、且属性满足特定控制流约束。（3）现有方案以代码覆盖率为导向，而不是以目标为导向，就会浪费很多资源去找无法到达sink的path。</p><p>&emsp;ODDFUZZ贡献：（1）处理运行时多态时，对准确率与召回率之间进行权衡；（2）建模gadget链的数据约束，进行结构感知的fuzz；（3）使用step-forword策略与hybrid feedback，快速找到漏洞。</p><p>&emsp;使用java fuzz框架JQF来写ODDFUZZ。</p><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><h3 id="ODD"><a href="#ODD" class="headerlink" title="ODD"></a>ODD</h3><p>&emsp;开源动态反序列化ODD，又叫做对象注入漏洞OIV，指的是攻击者将序列化对象注入到应用程序的行为。ODD漏洞在js、php、.NET中也会有。open表示任意对象都可以被反序列化，dynamic表示能够调用invoke多态方法或基于反射的行为去找寻路径。由于java是动态的，所以很难预测会invoke哪个方法。攻击者可将应用程序的代码片段链接在一起（并按顺序执行它们）并将数据传递到安全敏感的调用点，攻击就成功。gadget链实例如下所示：</p><p><img src="/images/oddfuzz/image-20231108211644048.png" alt="image-20231108211644048" style="zoom:67%;" /></p><p>&emsp;面向属性的编程POP。精细的定义要反序列化的属性，以链接不同级别的对象，从而进行成功的攻击。下图是对上图的POP编程，通过构造的PriorityQueue，最后可进行代码的远程执行。</p><p><img src="/images/oddfuzz/image-20231108213655198.png" alt="image-20231108213655198" style="zoom:67%;" /></p><h3 id="威胁模型"><a href="#威胁模型" class="headerlink" title="威胁模型"></a>威胁模型</h3><p><img src="/images/oddfuzz/image-20231108213822316.png" alt="image-20231108213822316" style="zoom:67%;" /></p><h3 id="定向灰盒测试-DGF"><a href="#定向灰盒测试-DGF" class="headerlink" title="定向灰盒测试 DGF"></a>定向灰盒测试 DGF</h3><p>&emsp;以代码覆盖率为导向的灰盒测试（CGF）与定向灰盒测试（DGF）。对于某些场景，静态报告验证，漏洞就在那儿了，需要自己探索。DGF引导fuzzer到特定位置，并生成POC testcase。以下是DGF的流程：</p><p><img src="/images/oddfuzz/image-20231108214859002.png" alt="image-20231108214859002" style="zoom:67%;" /></p><p>&emsp;（1）静态分析阶段：提取调用图与控制流图，计算二进制文件与目标之间的距离。（2）fuzzing循环阶段，目标距离、覆盖率、相似性作为反馈信息，以快速引导fuzzer到达目标点。利用反馈信息，fuzzer在seed pool中选择seed，并分配适合的能量进行变异。seed的能量确定生成多少新种子。fuzzer使用多种变异策略来引导种子向目标站点进化。具有更小距离的新种子将被保留，以进行下一次fuzzing循环。</p><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><h3 id="挑战1：运行时多态"><a href="#挑战1：运行时多态" class="headerlink" title="挑战1：运行时多态"></a>挑战1：运行时多态</h3><p>&emsp;现有的工作可以识别代码中gadget的组合，攻击者使用gadget来组合gadget链。由于运行时多态，无法根据声明类型确定虚拟方法调用，因此，无法精确找到运行时的程序路径，从而导致高漏报。解决此问题的方法是进行类层次分析（CHA），综合考虑显式与隐式方法调用，但是盲目的考虑所有可行的gadget会导致路径爆炸问题。</p><p>&emsp;gadgetInspector分别追踪了<code>函数参数</code>到<code>返回值、其他方法调用</code>的数据流，并列举了<code>基于类继承层次结构的所有可用方法</code>与<code>gadget链的相关函数重写</code>。然而，攻击者可控制的属性能够<code>从污点参数传播到其子类的参数</code>，这类情况gadgetInspector没有考虑，即没有考虑<code>过程内污点分析</code>。</p><p>&emsp;FUGIO在其构建的<code>深度有界调用树上追踪了过程内数据流</code>，以对不可行的gadget进行剪枝。然而，进行java ODD（开源动态反序列化）调用链发现时，这种方法不管用，这是因为传统java程序会集成很多个具有各自依赖关系的库，这会导致很多类和方法，使得调用链很深很宽，难以处理。</p><p><img src="/images/oddfuzz/image-20231109214851761.png" alt="image-20231109214851761" style="zoom:67%;" /></p><h3 id="挑战2：结构化的输入构建"><a href="#挑战2：结构化的输入构建" class="headerlink" title="挑战2：结构化的输入构建"></a>挑战2：结构化的输入构建</h3><p>&emsp;注入的对象一般都是由多个子对象构成的，通过POP编程，要求构造的对象在语法上可以反序列化，在语义上要满足一定的控制与数据流约束，从而使得gadget链可以实现有效的fuzz输入。如果没有复杂嵌套形式的对象结构的先验知识，那么很难构造出合适的fuzz case。</p><p><img src="/images/oddfuzz/image-20231111105100799.png" alt="image-20231111105100799" style="zoom:67%;" /></p><p>&emsp;一种方法是generation-based fuzz技术。SerHybrid执行points-to分析，以产生堆访问路径，该路径可以到达安全敏感点。对堆访问路径中未出现的字段属性分配随机值，以生成有效的注入对象，然后执行。然而，随着可用gadget链的增加，fuzzer不知道注入对象的多级类层次结构，因此很难对属性分配正确的值。例如，很难从Comparator的多种实现中选取适合的TransformingComparator。FUGIO基于候选的链生成了属性树，并通过启发式规则突变属性。但是，任意子类的随机组合语义上可能是无效的。</p><h3 id="挑战3：目标定向模糊测试"><a href="#挑战3：目标定向模糊测试" class="headerlink" title="挑战3：目标定向模糊测试"></a>挑战3：目标定向模糊测试</h3><p>&emsp;由于gadget链是由攻击者可控的方法组成的，这些方法在对象反序列化期间自动执行。常规代码覆盖率无法指导fuzzer，因为trigger很多code片段可能也无法到达sink点。</p><p>&emsp;本文没有追求最大的代码覆盖率，而是使用定向灰盒测试DGF来优先考虑接近sink的seed。之前的定向灰盒测试器计算种子执行轨迹上所有基本块距离的算数平均值，来调度种子，以快速达到sink。其问题是，种子距离是可能有偏差的，并且种子执行路径可能没有像想象中那样朝sink运行，对注入对象属性的修改可能会使执行路径发生巨大变化。因此，目标定向fuzz的feedback是很重要的。</p><h2 id="ODDFUZZ-设计"><a href="#ODDFUZZ-设计" class="headerlink" title="ODDFUZZ 设计"></a>ODDFUZZ 设计</h2><p><img src="/images/oddfuzz/image-20231114195459925.png" alt="image-20231114195459925" style="zoom:67%;" /></p><h3 id="A-总览"><a href="#A-总览" class="headerlink" title="A. 总览"></a>A. 总览</h3><p>&emsp;上图的program代表jar、war、class file，将其作为输入，并使用轻量级污点分析自动识别所有潜在的gadget链。之后，基于潜在的gadget链，生成结构感知的seed，以生成语义上有效的fuzz注入对象。在fuzzing loop阶段，oddfuzz结合前向突变策略与混合反馈（seed距离与gadget覆盖率）去引导fuzzer将注入对象突变，并到达sink。</p><h3 id="B-污点分析"><a href="#B-污点分析" class="headerlink" title="B. 污点分析"></a>B. 污点分析</h3><p>&emsp;如果有可利用的gadget链，那么进行污点分析，一定能从source到达sink。可以构建call graph（CG），来寻找可达的路径。然而，由于java运行时多态，虚函数调用无法被确定。因此，我们使用<code>轻量的基于摘要的污点分析，来标记可疑的gadget链</code>。</p><p>&emsp;<code>函数摘要的计算</code>。oddfuzz首先计算所有函数的静态摘要，具体来说，oddfuzz提取<code>函数参数与this作为其摘要</code>。之后，追踪方法中变量的传播，主要针对四种类型，<code>Assigin/Load/Store/Call</code>。<code>数据依赖于方法参数的变量也包含在方法摘要中</code>。这些摘要用于识别可利用的gadgets（gadget链上的点）。</p><p>&emsp;<code>gadget链的识别</code>。oddfuzz指定可利用的方法与敏感调用站点（sink）的列表，并基于上一步的函数摘要来识别可疑的链，在本文中指定了16种可利用的方法与30个sink（附录A）。（1）之后，由于gadgetInspector使用BFS（广度优先搜索），在不可行路径上遍历过的gadget就不会再考虑，从而导致漏报。而本文中，一旦在程序路径中找到前面标记过的可利用方法，那么就会从source gadget开始，基于方法摘要调用DFS，来找可利用的gadget链。（2）为了避免无休止循环，制定门限以规定链的最大深度。（3）为了处理java的运行时多态，使用层次结构分析CHA，仅当调用点被污染时，才会使用CHA，避免由于盲目考虑所有的gadget带来的路径爆炸问题。（4）oddfuzz的工作方式像普通的CG污点分析器。（5）所有来自于source的路径分析完成之后，就开始运行validator。借助轻量污点分析，可以平衡有效性（识别尽可能多的gadget链）与扩展性（可接受的时间开销）。</p><h3 id="C-结构感知的定向灰盒模糊测试"><a href="#C-结构感知的定向灰盒模糊测试" class="headerlink" title="C. 结构感知的定向灰盒模糊测试"></a>C. 结构感知的定向灰盒模糊测试</h3><p>&emsp;给一个java程序与候选gadget链，<code>oddfuzz使用结构感知的定向灰盒测试生成用于validation的可注入对象</code>。fuzzing loop算法在附录B的算法1中。</p><p>&emsp;<code>结构化种子生成</code>。生成语法上有效的注入对象需要：（1）设计反映gadget执行流的嵌套对象结构。（2）分配合适的属性值，方便到达sink。为此，设计了<code>结构感知的种子生成方法</code>，通过使用<code>属性树</code>的分层数据结构处理复杂的嵌套，其中<code>根节点代表一个保存多个gadget的类对象</code>。如下图所示，首先实例化gadget链涉及的类，并利用反射来收集类的可用属性，并构造属性树。</p><p><img src="/images/oddfuzz/image-20231114215527381.png" alt="image-20231114215527381" style="zoom:67%;" /></p><p>&emsp;具体来说，如果<code>属性树中节点的类型是对象，且此对象由另一个属性树表示，且此对象对应的类保存目标链的下一个gadget</code>，则我们通过连接此节点来合并两个属性树。并且，当属性树中某个字段节点的类型是另一个属性树的根节点（类对象）实现的接口时，两个属性树也会合并，如上图的 Comparator comparator 和 TransformingComparator 连接一样。</p><p>&emsp;当oddfuzz识别出可疑的 gadget 链（需要validate）时，它将被送入输入生成器以构造相应的属性树。<code>目标gadget链的多级类层次结构可以使用属性树很好地建模</code>。然后，fuzzer开始遍历属性树的主干，将其转换为用于fuzz的初始注入对象（上图右侧）。其他没有后继的属性节点（例如上图的Object[]）将被设置为null，以进行突变。</p><p>&emsp;<code>使用混合反馈来对种子的优先级进行排序</code>。对注入对象进行随机生成和变异不一定会到达sink，这种没有明确反馈指导的不确定性fuzz会使fuzzer退化为语义盲目的愚蠢模糊器。为了有效地选择和调度种子以到达sink，使用<code>混合反馈驱动的种子优先级排序方式</code>。即，为更接近sink的种子分配更多能量。oddfuzz考虑了两种类型的反馈指标：种子距离和gadget coverage。</p><p>（1）种子距离。计算种子距离以优先排序并安排种子以尽快到达sink是目标灰盒测试 DGF 的核心。种子s与sink所属的目标基本块$T_b$之间的距离计算为：</p><script type="math/tex; mode=display">d(s,T_b)=\frac{\sum_{m\in\xi(s)}d_b(m,T_b)}{|\xi(s)|}</script><p>&emsp;其中$d<em>{\boldsymbol{b}}(m,T</em>{\boldsymbol{b}})$是种子s执行轨迹中的基本块m与目标基本块$T_b$之间的距离。<code>我们不是枚举种子 s 执行路径上的所有基本块</code>，而是收集目标链的 gadget 内执行的基本块$\xi(s)$来计算种子距离，避免fuzzer探索不相关但更接近的路径。</p><p>（2）gadget coverage。使用此指标来优先考虑覆盖更多程序路径的种子。在最初的模糊测试阶段，gadget coverage旨在引导fuzzer选择不同的种子并对其进行优先级排序，避免因偏爱具有特定执行路径的某些种子而陷入局部最优。在power 分配阶段，<code>gadget coverage尝试为种子提供相同的距离，但覆盖更多的分支，从而提高突变的机会</code>。</p><p>&emsp;oddfuzz将所有生成的种子根据距离升序排序，并维护一个两级队列。第一个种子（或距离相同但覆盖范围不同的种子）将被放入优先队列中，其余种子将被放入较不优先队列中。因此，oddfuzz 有更大的机会从优先队列中选择下一个种子进行变异。至于power分配，oddfuzz使用如下方程，以便为所选种子输入分配适当的能量：</p><script type="math/tex; mode=display">p(s,T_b)=\psi(s)\cdot(1-\widetilde{d}(s,T_b))</script><p>&emsp;其中$\psi(s)$表示gadget coverage，并且$\widetilde{d}(s,T_b)=\frac{d(s,T_b)-minD}{maxD-minD}$是归一化种子距离。通过此方程，<code>fuzzer可以确定应用于当前种子的变异机会数量</code>，并评估在种子优先级排序过程中是否应优先考虑变异种子，从而在探索不同的执行路径和对种子进行优先级排序之间取得平衡。</p><p>&emsp;<code>前向种子突变</code>。以前的fuzz是通过位翻转等操作随机改变二进制文件来产生新的输入。然而，<code>当应用于结构化输入时，这种位突变可能会导致无效语法</code>。为了解决这个问题，我们利用 JQF（参数化模糊测试框架），它将结构化输入映射到一系列参数，以在位级别改变生成的种子。<code>参数上的这些位突变对应于结构化注入对象上的属性级突变</code>。然后，oddfuzz 应用前向种子突变策略来有效引导种子前往sink。</p><p>&emsp;具体来说，fuzzer首先遍历要变异的注入对象的属性树并检查每个属性的类型。对于<code>原始数据类型（例如 boolean、int），fuzzer使用 JQF 中的多种伪随机方法将无类型位参数转换为随机类型值；对于reference数据类型，fuzzer为特定类型定制目标模板；当类型为class时，fuzzer 将通过random.choose()方法从该属性的子类中随机选择一个类。对于数组属性，模糊器使用 random.nextInt() 方法随机设置数组大小，并根据元素类型（即继承数组类类型的实例）为数组分配随机值。</code>例如，从Fig.7.中的属性树生成的注入对象的参数序列为：</p><p><img src="/images/oddfuzz/image-20231115194857259.png" alt="image-20231115194857259" style="zoom:67%;" /></p><p>&emsp;上图的解释如下：为了改变属性 size 的值（类 PriorityQueue 中的 int 类型变量），fuzzer调用 random.nextInt() 方法来生成随机整数 1。为了生成对象数组队列，fuzzer调用方法random.choose() 从预定义的字典中为其分配一个实例对象，该对象由候选 gadget 链中所有类或方法涉及的一些特定属性值（例如类对象、字符串对象）组成。</p><p>&emsp;此外，为了引导种子走向sink，oddfuzz在位级别上改变感兴趣的注入对象的嵌套子对象。为此，我们使用 random.nextBool() 方法<code>将额外的标识符字节插入到注入对象的参数序列中</code>。当fuzzer在遍历属性树时遇到类对象节点时，fuzzer会添加一个字节作为标识符，以标记是否更改此嵌套子对象的属性值。我们利用fuzzer收集的gadget coverage来识别注入对象覆盖的最后一个分支所在的类，一旦注入对象被卡在某些gadget中（不按照链向下运行），fuzzer就会将相应的标识符字节设置为 true，并将随机值分配给参数，这些参数对应于被卡gadget所属类的属性的结构突变，以产生新的输入。</p><p>&emsp;为了说明前向突变，考虑以下参数序列$\sigma_{2}$：</p><p><img src="/images/oddfuzz/image-20231115195815150.png" alt="image-20231115195815150" style="zoom:67%;" /></p><p>&emsp;如上所示，假设有一个注入对象卡在gadget TransformingComparator.compare() 中，fuzzer将其 Identifier 翻转为 true 并改变 TransformingComparator 类对应的参数序列（例如，将实例T分配给属性transformer）。基于这种前向突变策略，fuzzer可以有效地生成更有可能到达sink的输入。</p><p>&emsp;最后，当变异的种子到达sink时，fuzzer将报告给定的gadget链是可以被利用的。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>&emsp;我们基于流行的 Java 模糊测试平台 JQF 实现了 oddfuzz。我们定制了它的组件，使其适合gadget链模糊测试，同时搭载 JQF 的底层功能，例如运行时检测（<code>tai-e能做到这一点吗？</code>）。</p><p>&emsp;<code>污点分析</code>。 oddfuzz 使用 Soot 来解析 Java 字节码并将其转换为中间语言 Jimple 。基于 Jimple 的基本类信息（例如类修饰符、字段、方法），实现了基于方法摘要的污点分析。</p><p>&emsp;<code>结构化模糊测试</code>。 <code>oddfuzz 修改了 JQF 中内置的 junit-quickcheck 生成器，以根据候选 gadget 链随机生成和变异结构化注入对象，而不是手动编写输入格式的声明性规范（例如上下文无关语法或协议缓冲区）</code>。为了<code>启用和促进结构化感知种子生成，采用 JRE 提供的类 sun.msic.Unsafe</code>，允许用户创建类的实例，而无需调用其构造函数代码、初始化代码、各种 JVM 安全检查和所有其他低层次的东西。</p><p>&emsp;<code>运行时Instrumentation</code>。当 JVM 加载类时，我们使用 ASM 工具包通过 javaagent 动态检测 Java 字节码。当测试程序 PUT 启动时，oddfuzz 工具会注入一个静态方法调用，该调用在每次调用或跳转指令后执行，<code>以跟踪注入对象的执行</code>。出于效率考虑，检测仅限于与gadget链相关的字节码，而不是整个程序。</p><p>&emsp;<code>反馈收集</code>。对于覆盖率信息，我们对 JQF 进行了最小的修改，通过跳转指令检测每个基本块，来收集branch覆盖率。对于距离信息，oddfuzz 基于 ASM 在字节码级别生成相应的 gadget 链的过程内控制流图（CFG）。 CFG的根节点（即gadget）由方法签名来标识，而其他CFG节点则由相应基本块的跳转指令来标识。当将 gadget 链送到fuzzer进行验证时，oddfuzz 距离计算器会根据 gadget 链的调用顺序和生成的 CFG 计算每个基本块到sink的过程间距离。距离计算器是用 JGraphT 库实现的。</p><p>To be continued…</p><h2 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h2><h2 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h2><h2 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h2><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;ODDFUZZ-Discovering-Java-Deserialization-Vulnerabilities-via-Structure-Aware-Directed-Greybox-Fuzzing&quot;&gt;&lt;a href=&quot;#ODDFUZZ-Discovering-Java-Deserialization-Vulnerabilities-via-Structure-Aware-Directed-Greybox-Fuzzing&quot; class=&quot;headerlink&quot; title=&quot;ODDFUZZ: Discovering Java Deserialization Vulnerabilities via Structure-Aware Directed Greybox Fuzzing&quot;&gt;&lt;/a&gt;ODDFUZZ: Discovering Java Deserialization Vulnerabilities via Structure-Aware Directed Greybox Fuzzing&lt;/h1&gt;&lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;&amp;emsp;可以用静态分析来定位java反序列化漏洞。ODDFUZZ使用轻量级污点分析定位候选的gadget链（避免漏报），之后使用定向灰盒测试生成poc用例来减少误报。ODDFUZZ使用结构感知种子生成方法保证用例有效性，并使用混合反馈与步进策略来指导定向模糊测试。&lt;/p&gt;</summary>
    
    
    
    <category term="papers" scheme="https://wd-2711.tech/categories/papers/"/>
    
    
  </entry>
  
  <entry>
    <title>blog-migrate-test</title>
    <link href="https://wd-2711.tech/2023/11/03/blog-migrate-test/"/>
    <id>https://wd-2711.tech/2023/11/03/blog-migrate-test/</id>
    <published>2023-11-03T11:46:36.000Z</published>
    <updated>2023-11-06T12:45:46.071Z</updated>
    
    <content type="html"><![CDATA[<h1 id="博客迁移日志"><a href="#博客迁移日志" class="headerlink" title="博客迁移日志"></a>博客迁移日志</h1><p>test</p><span id="more"></span><p><img src="/images/blog-migrate-test/image-20231106203331118.png" alt="image-20231106203331118" style="zoom:67%;" /></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;博客迁移日志&quot;&gt;&lt;a href=&quot;#博客迁移日志&quot; class=&quot;headerlink&quot; title=&quot;博客迁移日志&quot;&gt;&lt;/a&gt;博客迁移日志&lt;/h1&gt;&lt;p&gt;test&lt;/p&gt;</summary>
    
    
    
    <category term="杂记" scheme="https://wd-2711.tech/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>ACTF-2023</title>
    <link href="https://wd-2711.tech/2023/10/29/ACTF-2023/"/>
    <id>https://wd-2711.tech/2023/10/29/ACTF-2023/</id>
    <published>2023-10-29T07:27:19.000Z</published>
    <updated>2023-11-03T11:45:43.106Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d9b3a03e3e153d036277dc89aa77374bc1b84efeb0c015576d6d883ec5019b81"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="re" scheme="https://wd-2711.tech/categories/re/"/>
    
    
  </entry>
  
  <entry>
    <title>frida-reverse-analysis-3</title>
    <link href="https://wd-2711.tech/2023/10/22/frida-reverse-analysis-3/"/>
    <id>https://wd-2711.tech/2023/10/22/frida-reverse-analysis-3/</id>
    <published>2023-10-22T08:58:01.000Z</published>
    <updated>2024-02-21T12:03:45.811Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Frida逆向与协议分析-3"><a href="#Frida逆向与协议分析-3" class="headerlink" title="Frida逆向与协议分析-3"></a>Frida逆向与协议分析-3</h1><p>&emsp;frida逆向与协议分析第三部分，主要就是Android源码编译、沙箱等。</p><span id="more"></span><h2 id="0x05-Android源码编译与Xposed魔改"><a href="#0x05-Android源码编译与Xposed魔改" class="headerlink" title="0x05 Android源码编译与Xposed魔改"></a>0x05 Android源码编译与Xposed魔改</h2><p>&emsp;市面上绝大多数app都会对xposed框架进行特征检测，绕过的思路就是找到检测点（java层或者native层），然后hook修改返回结果，或者以硬编码、置零等方式来绕过检测逻辑。但是检测点很难找到（代码太多，或者以ollvm、vmp加固）。</p><p>&emsp;一个绝杀点就是：在源头消灭xposed特征，让你检测不到。本章就介绍如何魔改编译魔改xposed，从而绕过开源xposed检测工具Xposed Checker。</p><h3 id="Android源码环境搭建"><a href="#Android源码环境搭建" class="headerlink" title="Android源码环境搭建"></a>Android源码环境搭建</h3><p>&emsp;为什么要编译Android源码？Xposed源码不就得了。这是因为Xposed的编译过程很依赖android的源码，因此，我们先对android源码进行编译。（需要12G运存+450G硬盘，电脑办不了，只能组装了）</p><hr><p>&emsp;由于安卓源码引用了外部开源工具，例如OpenSSL，每一个子项目都是Git仓库，为了方便的管理这个Git仓库，安卓官方推出了相关的管理工具，名为repo。Repo封装了一系列的Git指令，可以方便的对多个Git仓库进行管理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir aosp712_r8 &amp;&amp; cd aosp712_r8</span><br><span class="line">repo init -u git://mirrors.ustc.edu.cn/aosp/platform/manifest -b android-7.1.2_r8</span><br><span class="line">repo sync</span><br></pre></td></tr></table></figure><p>&emsp;<code>repo sync</code>只是下载了系统运行必须的代码，只能编译出运行Android Emulator（模拟器）的虚拟机系统，要是想让此系统安装到设备中，还需要下载设备对应的驱动（作用是在物理机系统上起到协调上层系统与底层硬件的通信）。</p><p>&emsp;编译完成后，编译出来的镜像是不全的，还需要下载BootLoader等关键的系统镜像，之后即可刷上自编译系统。</p><h3 id="Xposed定制"><a href="#Xposed定制" class="headerlink" title="Xposed定制"></a>Xposed定制</h3><div class="table-container"><table><thead><tr><th>模块</th><th>功能</th></tr></thead><tbody><tr><td>XposedInstaller</td><td>用于下载和安装Xposed.zip刷机包。</td></tr><tr><td>XposedBridge</td><td>java层的API提供者，调用Xposed相关的API时，首先调用XposedBridge中的函数，之后转发到Native方法。</td></tr><tr><td>Xposed</td><td>位于Native层的Xposed实际实现，是对Zygote的二次开发。</td></tr><tr><td>android_art</td><td>对art的二次开发，以提供对Xposed的支持。</td></tr><tr><td>XposedTools</td><td>负责编译和打包刷机的ZIP包。</td></tr></tbody></table></div><p>&emsp;就是，将XposedInstaller安装到设备之后，XposedInstaller会下载由XposedTools打包的含有XposedBridge，Xposed，android_art的ZIP包，并将此ZIP包刷入到系统（放置与替换系统文件）。</p><p>&emsp;Xposed包的编译过程见书P137。</p><p>&emsp;之后，使用XposedChecker检测Xposed模块。其中有很多不同的检测项，例如：</p><p>（1）<code>载入Xposed工具类</code>检测项，是通过使用系统类加载器加载XposedHelper类，如果可以加载那么说明此系统中是有Xposed模块的。</p><p>（2）<code>寻找特征动态链接库</code>检测项，是通过查看<code>/proc/self/maps</code>文件，其中如果有XposedBridge字符串，那么说明此系统中有Xposed模块。</p><p>（3）<code>检测Xposed安装情况</code>检测项，是查看系统中已安装的App列表是否包含Xposed相关的App。</p><p>（4）<code>环境变量特征字判断</code>检测项，通过获得环境变量，查看环境变量中是否有XposedBridge。</p><p>&emsp;可以发现，大多数Xposed的特征都是字符串特征，所以可将Xposed检测字符串的点修改为其它字符串。步骤如下：</p><p>&emsp;(1) 修改XposedInstaller App的Xposed字符串特征，即修改整体包名以及prop配置文件相关字符串。根据书P144，可以修改所有<code>xposed</code>字符串变为<code>xppsed</code>，之后，修改配置文件与字符串硬编码的字符，例如<code>AndroidManifest.xml</code>，这里不再赘述，详见书P145左右。</p><p>&emsp;(2) 根据 (1) 的步骤修改XposedBridge，最终制作出XppsedBridge.jar。</p><p>&emsp;(3) 修改Xposed项目源代码，详见书P147。</p><p>&emsp;(4) 修改XposedTools工具的源码，保证编译过程中不报错。</p><p>&emsp;但是跟书修改完之后，始终无法检测到新编译的 xposed-v89-sdk25-arm64.zip，但是试了原代码编译的 xposed-v89-sdk25-arm64.zip，发现是可以检测到的。通过查看 xposedInstaller 源代码并调试，也未发现原因。为了不耽误时间，所以直接跳过此处的实验。耽误了两三周。</p><p>&emsp;本章最后还说明了基于自定义修改的 Xposed 框架编写 Xposed 模块的方式，见书 P150。本章大部分是 Xposed 魔改过检测，主要是针对字符串的检测，但是被 Xposed Hook 的函数，其 access_flags 属性变成了 native。</p><h3 id="相关知识补充"><a href="#相关知识补充" class="headerlink" title="相关知识补充"></a>相关知识补充</h3><p>&emsp;见<a href="https://bbs.kanxue.com/thread-269627.htm#msg_header_h2_1">link</a>。</p><p>&emsp;<code>Android 的平台架构如下所示：</code></p><p><img src="/images/frida-reverse-analysis-3/image-20240115194321408.png" alt="image-20240115194321408" style="zoom:67%;" /></p><p>（1）Linux 内核。Android 平台的基础是 linux 内核，Android Runtime（ART）依靠 Linux 内核来执行底层功能，基于linux 内核让 Android 更安全并且可以拥有很多设备驱动。</p><p>（2）硬件抽象层（HAL）。HAL 向更高级别 Java API 框架显示设备硬件功能，其中每个模块都为特定类型的硬件组件实现一个界面，例如相机和蓝牙模块，当框架 API 要访问设备硬件时，Android 系统为该硬件组件加载库模块。</p><p>（3）Android Runtime。Android 5.0 之前 Android Runtime 为 Dalvik，之后为 ART。Dalvik 是 JIT （运行前转为机器码），ART 是 AOT （运行时转为机器码）。 </p><p>（4）原生 C/C++ 库。许多核心 Android 系统组件和服务（例如 ART 和 HAL）需要以 C 和 C++ 编写的原生库。Android 平台提供 Java 框架 API 以向应用显示其中部分原生库的功能，我们可以通过 NDK 开发 Android 中的 C/C++ 库。</p><p>（5）Java API 框架。这些 API 形成创建 Android 应用所需的构建块。</p><p>&emsp;<code>一些文件类型：</code></p><div class="table-container"><table><thead><tr><th>文件类型</th><th>类型含义</th></tr></thead><tbody><tr><td>dex</td><td>Android 将所有的 class 文件打包形成一个 dex 文件，是 Dalvik 运行的程序。</td></tr><tr><td>odex</td><td>优化过的 dex 文件，apk 在安装时会进行验证和优化，通过 dexopt 生成 odex 文件，加快 apk 的响应时间。</td></tr><tr><td>oat</td><td>android 私有 ELF 文件格式，有 dex2oat 处理生成，包含（原 dex 文件<code>+</code>dex 翻译的本地机器指令），是 ART 虚拟机使用的文件，可以直接加载。</td></tr><tr><td>vdex</td><td>包含 APK 的未压缩 DEX 代码，以及一些旨在加快验证速度的元数据</td></tr></tbody></table></div><p>&emsp;<code>一些广泛的安卓版本：</code></p><div class="table-container"><table><thead><tr><th>版本号</th><th>特性</th></tr></thead><tbody><tr><td>Android 2.2</td><td>支持已转换成 dex 格式的 android 应用，基于寄存器，指令执行更快，加载的是 odex 文件，采用 JIT 运行时编译。但是由于是 JIT，每次启动应用都需要重新编译。</td></tr><tr><td>Android 4.4</td><td>ART 和 AOT。ART 和 Dalvik 是共存的，用户可以在两者之间选择。</td></tr><tr><td>Android 5.0</td><td>ART 取代 Dalvik。AOT是一种运行前编译的策略，缺点：（1）应用安装和系统升级之后的应用优化比较耗时；（2）优化后的文件会占用额外的存储空间。</td></tr><tr><td>Android 7.0</td><td>考虑上面 AOT 的缺点，dex2oat 过程比较耗时且会占用额外的存储空间，Android 7.0 再次加入 JIT 形成AOT+JIT+解释器模式。混合编译模式综合了 AOT 和 JIT 的各种优点，使得应用在安装速度加快的同时，运行速度、存储空间和耗电量等指标都得到了优化。应用在安装的时候 dex 不会被编译，应用在运行时 dex 文件先通过解析器（Interpreter）后会被直接执行，与此同时，热点函数（Hot Code）会被识别并被 JIT 编译后存储在 jit code cache 中并生成 profile 文件以记录热点函数的信息，手机进入 IDLE（空闲） 的时候，系统会扫描 App 目录下的 profile 文件并执行 AOT 过程进行编译。</td></tr></tbody></table></div><p>&emsp;Android 2.2 的 APP 运行图如下所示：</p><p><img src="/images/frida-reverse-analysis-3/image-20240115204417368.png" alt="image-20240115204417368" style="zoom:67%;" /></p><p>&emsp;Android 5.0 的 APP 运行图如下所示：</p><p><img src="/images/frida-reverse-analysis-3/image-20240115204957856.png" alt="image-20240115204957856" style="zoom:67%;" /></p><p>&emsp;<code>JIT 与 AOT 的区别：</code></p><p>&emsp;JIT 在每次运行程序的时候都需要对 odex 重新进行编译。AOT 是静态编译，应用在安装的时候会启动 dex2oat 过程把 dex 预编译成 ELF 文件，每次运行程序的时候不用重新编译。</p><p>&emsp;<code>JVM、Dalvik 和 ART 区别</code>：</p><p>&emsp;JVM：传统的 Java 虚拟机、基于栈、运行 class 文件。Dalvik，支持已转换成 dex 格式的 android 应用，基于寄存器，指令执行更快，加载的是 odex。ART，第一次安装时，将 dex 进行 Aot (预编译)，字节码预先编译成机器码，生成可执行 oat 文件（ELF文件）。</p><p>&emsp;<code>Android 各版本 ClassLoader 加载 dex 时的 dexopt 过程：</code></p><p><img src="/images/frida-reverse-analysis-3/image-20240115205940127.png" alt="image-20240115205940127" style="zoom:67%;" /></p><h2 id="0x06-Android沙箱之加解密库“自吐”"><a href="#0x06-Android沙箱之加解密库“自吐”" class="headerlink" title="0x06 Android沙箱之加解密库“自吐”"></a>0x06 Android沙箱之加解密库“自吐”</h2><p>&emsp;每个安卓应用都运行在独立的沙箱中，而本章介绍的沙箱指的是系统级的沙箱，即通过自定义系统源码编译特定系统，是得运行在自定义系统上的 App 行为都暴露在系统的监控下。</p><h3 id="自吐沙箱的建立"><a href="#自吐沙箱的建立" class="headerlink" title="自吐沙箱的建立"></a>自吐沙箱的建立</h3><p>&emsp;对于系统而言，App 的行为是没有隐私的。基于这种系统级沙箱从而监控 App 行为的思路，DexHunter、FART 等脱壳机从 ART 虚拟机层面对 App 进行内存数据的 dump，从而提出第一代、第二代（整体加固与函数加固）的解决方案。TinyTool 从内核中调用 JProbe（动态跟踪 Java 方法执行的工具，它是 Linux 内核提供的功能）来监控 syscall 系统调用，这样即使 App 应用使用静态编译的二进制文件，或者通过 svc 汇编指令在用户态直接进行系统调用，还可以打印出一份日志，来分析 App 的行为。</p><p>&emsp;除了基于系统源码的沙箱外，还有其它类型的沙箱，例如基于 Hook 类型的沙箱 r0capture，其虽然没有修改系统源码，但是基于 Hook 对系统收发包函数进行插桩，从而可以对应用层进行抓包。</p><p>&emsp;App 由于要依赖系统的 API，从而导致本身行为暴露在系统监控中。那么 App 如何抵抗沙箱分析？（1）App 尽可能少的减少系统 API 的调用；（2）关键函数的算法尽量不直接使用系统的加密库。</p><p>&emsp;本章基于 Hook 类型的沙箱，即 appmon，从而提出针对加密库进行分析的脚本，结合 Frida 开发自己的加密库沙箱。安卓提供了便利的加密封装库，我们可以直接通过 Hook 关键加密函数来进行逆向分析。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hookEvent.js</span></span><br><span class="line"><span class="keyword">var</span> jclazz = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> jobj = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getObjClassName</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!jclazz)&#123;</span><br><span class="line">        jclazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Class&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!jobj)&#123;</span><br><span class="line">        jobj = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Object&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> jclazz.<span class="property">getName</span>.<span class="title function_">call</span>(jobj.<span class="property">getClass</span>.<span class="title function_">call</span>(obj));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">watch</span>(<span class="params">obj, mtdName</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> listener_name = <span class="title function_">getObjClassName</span>(obj);</span><br><span class="line">    <span class="keyword">var</span> target = <span class="title class_">Java</span>.<span class="title function_">use</span>(listener_name);</span><br><span class="line">    <span class="keyword">if</span>(!target || !mtdName <span class="keyword">in</span> target)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// overload onClick function</span></span><br><span class="line">    target[mtdName].<span class="property">overloads</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">overload</span>)&#123;</span><br><span class="line">        overload.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[WatchEvent] &quot;</span> + mtdName + <span class="string">&quot;: &quot;</span> + <span class="title function_">getObjClassName</span>(<span class="variable language_">this</span>));</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>[mtdName].<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hook View all onClick listener</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">OnClickListener</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// spawn 模式</span></span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.view.View&quot;</span>).<span class="property">setOnClickListener</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">listener</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(listener != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="title function_">watch</span>(listener, <span class="string">&quot;onClick&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">setOnClickListener</span>(listener);</span><br><span class="line">    &#125;;</span><br><span class="line">        <span class="comment">// attach 模式</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;android.view.View$ListenerInfo&quot;</span>, &#123;</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">instance</span>)&#123;</span><br><span class="line">                instance = instance.<span class="property">mOnClickListener</span>.<span class="property">value</span>;</span><br><span class="line">                <span class="keyword">if</span>(instance)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mOnClickListener name is :&quot;</span> + <span class="title function_">getObjClassName</span>(instance));</span><br><span class="line">                    <span class="title function_">watch</span>(instance, <span class="string">&quot;onClick&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(<span class="title class_">OnClickListener</span>);</span><br></pre></td></tr></table></figure><p>&emsp;使用 frida，将 hookEvent.js 注入到 com.xiaojianbang.app，发现 JAVAMD5 按钮响应函数位于 com.xiaojianbang.app.MainActivity，之后使用 JADX 定位到 JAVAMD5 按钮的响应函数。JAVAMD5 使用了 java.security.MessageDigest 类中的函数，用于进行密码计算。主要包括 MessageDigest.getInstance()/update()/digest() 函数，由于每个函数可能存在多个重载，所以编写通用的可以 hook 任意函数所有重载的脚本（这里针对 MessageDigest.getInstance()），代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hook.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hookMD5</span>(<span class="params">targetClassMethod</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> delim = targetClassMethod.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(delim === -<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> targetClass = targetClassMethod.<span class="title function_">slice</span>(<span class="number">0</span>, delim);</span><br><span class="line">    <span class="keyword">var</span> targetMethod = targetClassMethod.<span class="title function_">slice</span>(delim + <span class="number">1</span>, targetClassMethod.<span class="property">length</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> hook = <span class="title class_">Java</span>.<span class="title function_">use</span>(targetClass);</span><br><span class="line">    <span class="keyword">var</span> overloadCount = hook[targetMethod].<span class="property">overloads</span>.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; overloadCount; i++)&#123;</span><br><span class="line">    hook[targetMethod].<span class="property">overloads</span>[i].<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">// this and arguments</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;\n*** entered &quot;</span> + targetClassMethod);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">arguments</span>.<span class="property">length</span> &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; j++)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg[&quot;</span> + j + <span class="string">&quot;]: &quot;</span> + <span class="variable language_">arguments</span>[j],<span class="string">&#x27;=&gt;&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">arguments</span>[j]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> retval = <span class="variable language_">this</span>[targetMethod].<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\nretval: &quot;</span> + retval,<span class="string">&#x27;=&gt;&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(retval));</span><br><span class="line">            <span class="comment">// 打印调用栈</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()));</span><br><span class="line">            <span class="keyword">return</span> retval;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> targetClassMethod = <span class="string">&quot;java.security.MessageDigest.getInstance&quot;</span>;</span><br><span class="line">    <span class="title function_">hookMD5</span>(targetClassMethod);</span><br><span class="line">    targetClassMethod = <span class="string">&quot;java.security.MessageDigest.update&quot;</span>;</span><br><span class="line">    <span class="title function_">hookMD5</span>(targetClassMethod);</span><br><span class="line">    targetClassMethod = <span class="string">&quot;java.security.MessageDigest.digest&quot;</span>;</span><br><span class="line">    <span class="title function_">hookMD5</span>(targetClassMethod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main);</span><br></pre></td></tr></table></figure><p>&emsp;结果如下：</p><p><img src="/images/frida-reverse-analysis-3/image-20240116204627467.png" alt="image-20240116204627467" style="zoom:67%;" /></p><p>&emsp;<a href="https://github.com/dpnishant/appmon">Appmon 沙箱</a>是怎么做的呢？我们只关注功能本身，看针对 Hash 函数进行 trace 的脚本（appmon/scripts/Android/Crypto/Hash.js），注入后发现：</p><p><img src="/images/frida-reverse-analysis-3/image-20240116205248420.png" alt="image-20240116205248420" style="zoom:67%;" /></p><p>&emsp;其识别算法时，并未通过勾取 getInstance() 来获取算法信息，而是在勾取 digest 函数时通过 getAlgorithm 获得算法的种类，且 data 总为空。下面分析一下它的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Hash.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 严格模式，对代码的解析和执行施加更严格的限制和规则</span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改 byteArraytoHexString，将 map 方法修改为如下</span></span><br><span class="line"><span class="keyword">var</span> byteArraytoHexString = <span class="keyword">function</span>(<span class="params">byteArray</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(!byteArray)&#123;<span class="keyword">return</span> <span class="string">&#x27;11&#x27;</span>;&#125;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; byteArray.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    result += (<span class="string">&#x27;0&#x27;</span> + (byteArray[i] &amp; <span class="number">0xFF</span>).<span class="title function_">toString</span>(<span class="number">16</span>)).<span class="title function_">slice</span>(-<span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> updateInput = <span class="keyword">function</span>(<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (input.<span class="property">length</span> &amp;&amp; input.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> normalized = <span class="title function_">byteArraytoHexString</span>(input);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (input.<span class="property">array</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> normalized = <span class="title function_">byteArraytoHexString</span>(input.<span class="title function_">array</span>());</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> normalized = input.<span class="title function_">toString</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> normalized;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">MessageDigest</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.MessageDigest&quot;</span>);</span><br><span class="line">  <span class="comment">// 如果有 digest 函数</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="title class_">MessageDigest</span>.<span class="property">digest</span>)&#123;</span><br><span class="line">    <span class="title class_">MessageDigest</span>.<span class="property">digest</span>.<span class="property">overloads</span>[<span class="number">0</span>].<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> digest = <span class="variable language_">this</span>.<span class="property">digest</span>.<span class="property">overloads</span>[<span class="number">0</span>].<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">       </span><br><span class="line">      <span class="comment">// 获取密码算法</span></span><br><span class="line">      <span class="keyword">var</span> algorithm = <span class="variable language_">this</span>.<span class="title function_">getAlgorithm</span>().<span class="title function_">toString</span>();</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// Payload 头</span></span><br><span class="line">      <span class="keyword">var</span> send_data = &#123;&#125;;</span><br><span class="line">      send_data.<span class="property">time</span> = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">      send_data.<span class="property">txnType</span> = <span class="string">&#x27;Crypto&#x27;</span>;</span><br><span class="line">      send_data.<span class="property">lib</span> = <span class="string">&#x27;java.security.MessageDigest&#x27;</span>;</span><br><span class="line">      send_data.<span class="property">method</span> = <span class="string">&#x27;digest&#x27;</span>;</span><br><span class="line">      send_data.<span class="property">artifact</span> = [];</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Payload 体</span></span><br><span class="line">      <span class="keyword">var</span> data = &#123;&#125;;</span><br><span class="line">      data.<span class="property">name</span> = <span class="string">&quot;Algorithm&quot;</span>;</span><br><span class="line">      data.<span class="property">value</span> = algorithm;</span><br><span class="line">      data.<span class="property">argSeq</span> = <span class="number">0</span>;</span><br><span class="line">      send_data.<span class="property">artifact</span>.<span class="title function_">push</span>(data);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Payload 体</span></span><br><span class="line">      <span class="keyword">var</span> data = &#123;&#125;;</span><br><span class="line">      data.<span class="property">name</span> = <span class="string">&quot;Digest&quot;</span>;</span><br><span class="line">      data.<span class="property">value</span> = <span class="title function_">byteArraytoHexString</span>(digest);</span><br><span class="line">      data.<span class="property">argSeq</span> = <span class="number">0</span>;</span><br><span class="line">      send_data.<span class="property">artifact</span>.<span class="title function_">push</span>(data);</span><br><span class="line"></span><br><span class="line">      <span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(send_data));</span><br><span class="line">      <span class="keyword">return</span> digest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">MessageDigest</span>.<span class="property">digest</span>.<span class="property">overloads</span>[<span class="number">1</span>].<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">input</span>) &#123;</span><br><span class="line">      <span class="comment">// same as above</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">MessageDigest</span>.<span class="property">update</span>) &#123;</span><br><span class="line">    <span class="title class_">MessageDigest</span>.<span class="property">update</span>.<span class="property">overloads</span>[<span class="number">0</span>].<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">input</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> send_data = &#123;&#125;;</span><br><span class="line">      send_data.<span class="property">time</span> = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">      send_data.<span class="property">txnType</span> = <span class="string">&#x27;Crypto&#x27;</span>;</span><br><span class="line">      send_data.<span class="property">lib</span> = <span class="string">&#x27;java.security.MessageDigest&#x27;</span>;</span><br><span class="line">      send_data.<span class="property">method</span> = <span class="string">&#x27;update&#x27;</span>;</span><br><span class="line">      send_data.<span class="property">artifact</span> = [];</span><br><span class="line">      <span class="keyword">var</span> data = &#123;&#125;;</span><br><span class="line">      data.<span class="property">name</span> = <span class="string">&quot;Raw Data&quot;</span>;</span><br><span class="line">      data.<span class="property">value</span> = <span class="title function_">updateInput</span>(input);</span><br><span class="line">      data.<span class="property">argSeq</span> = <span class="number">0</span>;</span><br><span class="line">      send_data.<span class="property">artifact</span>.<span class="title function_">push</span>(data);</span><br><span class="line">      <span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(send_data));</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">update</span>.<span class="property">overloads</span>[<span class="number">0</span>].<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">MessageDigest</span>.<span class="property">update</span>.<span class="property">overloads</span>[<span class="number">1</span>].<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">input, offset, len</span>) &#123;</span><br><span class="line">      <span class="comment">// same as above</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">MessageDigest</span>.<span class="property">update</span>.<span class="property">overloads</span>[<span class="number">2</span>].<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">input</span>) &#123;</span><br><span class="line">      <span class="comment">// same as above</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">MessageDigest</span>.<span class="property">update</span>.<span class="property">overloads</span>[<span class="number">3</span>].<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">input</span>) &#123;</span><br><span class="line">      <span class="comment">// same as above</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>&emsp;考虑到 hook 主要依赖于 Frida，Xposed 等工具，这类工具可能会由 app 检测出来，因此，我们打算直接从系统源码层面修改代码。虽然 hook 沙箱与源码沙箱实现方式不同，但是两者都是采取对源码插桩的方式实现的，只是 hook 是针对二进制的动态代码插桩，源码沙箱是针对源码的插桩。我们要实现源码沙箱，只需要针对目标函数内容进行修改即可。</p><p>&emsp;以 Android 7.1.2_r8 为例，生成对应的 idegen.jar，android.iml（包含源码导入 Android studio 时会被导入和派出的子目录），android.ipr（源码工程的具体配置、代码以及依赖的 lib）文件，之后直接用 android studio 打开 ipr 文件即可。</p><p>&emsp;我们直接修改 MessageDigest 的源码，但要解决 2 个问题：（1）用什么方式进行自吐，解决方法 a：<code>日志打印，即调用 android.util.Log，但是无法通过 import 导入，因为会出现 cannot find symbol 的问题，可使用反射方式（运行时动态获取类的信息并操作对象）调用 Log 中的函数，但要处理反射可能带来的异常</code>；（2）确定哪一个是重载函数，是否存在相互调用的情况，解决方法 b：<code>首先用 Objection 确定 MessageDigest 类中存在的目标函数，找到所有重载后，直接源码分析每一个重载函数，如果某函数内没有再次调用其他重载函数，那么就要进行源码插桩；解决方法 c：方法 b 无法处理添加新的函数的问题，因此，运行 make update-api。具体见 P163。</code></p><p>&emsp;解决方法 a：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// update</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">logClass</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// load class</span></span><br><span class="line">    logClass = <span class="built_in">this</span>.getClass().getClassLoader().loadClass(<span class="string">&quot;android.util.Log&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Method</span> <span class="variable">loge</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// get corresponding method</span></span><br><span class="line">    loge = logClass.getMethod(<span class="string">&quot;e&quot;</span>, String.class, String.class);</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// call method</span></span><br><span class="line">    loge.invoke(<span class="literal">null</span>, <span class="string">&quot;wd2711&quot;</span>, <span class="string">&quot;input =&gt; &quot;</span> + inputString);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;ps：自己编译的镜像一般都有 root 权限（具有 su 指令），要想不要 root 权限，那么直接 lunch 选择 user 类型（直接打字 user，而不是选择标号）即可。</p><p>&emsp;最后，就可以建立一个 Hash 自吐的沙箱。由于我已经详细知晓步骤，所以，为了加快时间，就不进行实验了，对下面的章节也是这样，除非我认为这是很有必要做的实验。</p><h3 id="crypto-filter-aosp-项目移植"><a href="#crypto-filter-aosp-项目移植" class="headerlink" title="crypto_filter_aosp 项目移植"></a>crypto_filter_aosp 项目移植</h3><p>&emsp;下面针对 com.xiaojianbang.app 关于 AES/DES/RSA 算法进行分析，使用 jadx 可以得到它们的源码（在此只列出 AES 的源码）：</p><p><img src="/images/frida-reverse-analysis-3/image-20240119210512045.png" alt="image-20240119210512045" style="zoom:67%;" /></p><p>&emsp;可以发现，控制加解密的类是 <code>javax.crypto.Cipher</code>，init 用于传递密钥和向量，update 用于更新加解密输入，doFinal 用于进行真正的加解密过程。本小节不进行相关的沙箱开发，而是使用一个项目 <a href="https://github.com/icew4y/crypto_filter_aosp">crypro_filter_aosp</a>，它是一个监控 java 层加密算法的 ROM（只读存储），它的输出就是向目录中写文件，且只能监控一个 app。</p><p>&emsp;此项目是针对 nexux 6p android 6.0.1 的，如果想要复用就要做修改。此项目包含 6 个文件，修改后直接覆盖掉 android 8.1.0 的源码即可。要进行修改，就要对比 android 6.0.1 源码与项目代码，比较改了什么。其次，此项目在输出时将一次加解密过程输出一条日志（前面的沙箱在一次加解密过程中输出多条日志），这是因为，此项目增加了成员变量 jsoninfo，在 init 与 update 函数中，更新 jsoninfo 信息，在最终的 doFinal 运行时，把此变量输出到文件，并清空 jsoninfo。</p><p>&emsp;由于此项目添加了原来 android 源码中没有的文件，所以需要在 libcore 目录的 obenjdk_java_files.mk 中增加相应文件的全路径，添加完成后还需要执行 make update-api 更新系统 api。</p><p>ps：check_oom 一般是检测内存是否溢出的函数，在微软的区块链钱包中也有此函数。</p><h2 id="0x07-Android沙箱开发之网络库与系统库“自吐”"><a href="#0x07-Android沙箱开发之网络库与系统库“自吐”" class="headerlink" title="0x07 Android沙箱开发之网络库与系统库“自吐”"></a>0x07 Android沙箱开发之网络库与系统库“自吐”</h2><p>&emsp;很多 App 都对抓包进行了相应的防御，例如反 wifi 代理、反 VPN 代理、服务器校验客户端/客户端校验服务器（CA 证书层面）。虽然工具 r0capture 从代码层面抓取数据包，绕过了以上这些应对中间人抓包的对抗方式，但是由于其依赖于 frida，因此很容易被检测到。</p><h3 id="基于-r0capture-的源码沙箱网络库“自吐”"><a href="#基于-r0capture-的源码沙箱网络库“自吐”" class="headerlink" title="基于 r0capture 的源码沙箱网络库“自吐”"></a>基于 r0capture 的源码沙箱网络库“自吐”</h3><p>&emsp;要构建沙箱，首先要找到源码中关键代码的位置。在 TCP/IP 模型中，由于 App 是属于应用层，因此只能修改所使用的应用层协议类型、数据格式、传输端口、或者用 TCP/UDP 直接通信。基本没有 App 可以修改网络层内容，即使是 VPN app，也只是创建出新的网络接口，IP 还是 VPN server 分配的。目前，有很多网络通信框架通信，例如 Okhttp（访问网站）、Exoplayer（播放视频）、Glide（异步平滑图片滚动加载框架），这些框架底层还是使用系统 API 处理。基于此，app 采取多种手段防止应用层的抓包，例如，app 使用特定 API（<code>Proxy.NO_PROXY</code>、<code>System.getProperty(&quot;http.proxyHost&quot;)</code> 等）检测来防止 wifi 代理，即使使用 VPN app 从网络层将数据流转发到抓包软件，也可以使用 <code>getNetWorkCapbilities()</code> 来检测网络接口，从而检测 VPN app。我们可以使用 objection 对 <code>android.net.ConnectivityManager.getNetWorkCapbilities()</code> 进行勾取，从而发现一些 VPN 使用的痕迹。</p><p>&emsp;App 还可以通过证书层面来检测抓包，例如<code>客户端校验服务器的方式，即在客户端和服务器进行握手时，验证 CA 的 hash 值，来达到只与持有相同 CA 的服务器进行通信，而服务器只与持有特定 CA 的客户端进行交互</code>。</p><p>&emsp;由于协议通用性问题，即使在应用层做了很多防护手段，攻击者也可以绕过。因此开发者可能会使用小众协议甚至自研应用层协议（腾讯的 JceStruct 协议），即使数据流量被窃取，也无法得到有效信息。自研的协议可以很大发挥传输层功能，例如，（1）某厂商使用自建代理长连的网络方案，app 请求通过 CIP (Common industrial protocol，用于工业自动化领域的通信协议，提供了标准化的方式来相互通信）通道中的 TCP 子通道与长连服务器通信，长连服务器与业务服务器进行通信；（2）某厂商自研内核、算法、传输层网络库与服务端，此时使用沙箱也无法对 app 进行抓包。</p><p>&emsp;但是大多数 app 都是直接调用系统 API，我们只需要在应用层下层，对 socket 接口相关函数进行 hook，就可以抓到封装成 http 的应用数据，之后，这些数据使用 SSL 进行加密，并通过 socket 与服务器进行通信。下面是一个 app 的网络函数调用图（会话层 (SSL) -&gt; 表示层 (HTTP) -&gt; 应用层 (自定义视频流解密) -&gt; 应用层 (播放解密后的流媒体)）：</p><p><img src="/images/frida-reverse-analysis-3/image-20240120105331069.png" alt="image-20240120105331069" style="zoom:67%;" /></p><p>&emsp;通过 hook socket 函数，所监听的上层数据可以分为加密/未加密两种类型，并针对多个应用层协议进行验证与测试。我们可以得出以下结论，如果数据未加密，那么如果是发送数据，那么一定会经过 <code>java.net.SocketOutputStream</code> 的 <code>socketWrite0()</code> 函数，如果是接收数据，那么一定会经过<code>java.net.SocketInputStream</code> 的 <code>socketRead0()</code> 函数。通过分析以下 r0capture 代码，从而了解关于<code>未加密数据</code>的 hook 脚本（并不是修改源码）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// overload socketWrite0</span></span><br><span class="line"><span class="comment">// 有参数函数的 overload</span></span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.net.SocketOutputStream&quot;</span>).<span class="property">socketWrite0</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.io.FileDescriptor&#x27;</span>, <span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">fd, bytearry, offset, byteCount</span>) &#123;</span><br><span class="line">    <span class="comment">// 调用原函数</span></span><br><span class="line">    <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">socketWrite0</span>(fd, bytearry, offset, byteCount);</span><br><span class="line">    <span class="comment">// 进行信息记录</span></span><br><span class="line">    <span class="keyword">var</span> message = &#123;&#125;;</span><br><span class="line">    message[<span class="string">&quot;function&quot;</span>] = <span class="string">&quot;HTTP_send&quot;</span>;</span><br><span class="line">    message[<span class="string">&quot;ssl_session_id&quot;</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    message[<span class="string">&quot;src_addr&quot;</span>] = <span class="title function_">ntohl</span>(<span class="title function_">ipToNumber</span>((<span class="variable language_">this</span>.<span class="property">socket</span>.<span class="property">value</span>.<span class="title function_">getLocalAddress</span>().<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;:&quot;</span>)[<span class="number">0</span>]).<span class="title function_">split</span>(<span class="string">&quot;/&quot;</span>).<span class="title function_">pop</span>()));</span><br><span class="line">    message[<span class="string">&quot;src_port&quot;</span>] = <span class="built_in">parseInt</span>(<span class="variable language_">this</span>.<span class="property">socket</span>.<span class="property">value</span>.<span class="title function_">getLocalPort</span>().<span class="title function_">toString</span>());</span><br><span class="line">    <span class="comment">// 需要注意的是，这里完全可以用 this.socket.toString 而不是 this.socket.value.getRemoteSocketAddress 来实现目的地址的获取，因为 Socket 对应的内容就是目的地址信息，这是通过 Objection 的插件 wallbreaker 查看 java.net.SocketOutputStream 对象的成员结构发现的</span></span><br><span class="line">    message[<span class="string">&quot;dst_addr&quot;</span>] = <span class="title function_">ntohl</span>(<span class="title function_">ipToNumber</span>((<span class="variable language_">this</span>.<span class="property">socket</span>.<span class="property">value</span>.<span class="title function_">getRemoteSocketAddress</span>().<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;:&quot;</span>)[<span class="number">0</span>]).<span class="title function_">split</span>(<span class="string">&quot;/&quot;</span>).<span class="title function_">pop</span>()));</span><br><span class="line">    message[<span class="string">&quot;dst_port&quot;</span>] = <span class="built_in">parseInt</span>(<span class="variable language_">this</span>.<span class="property">socket</span>.<span class="property">value</span>.<span class="title function_">getRemoteSocketAddress</span>().<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;:&quot;</span>).<span class="title function_">pop</span>());</span><br><span class="line">    <span class="comment">// 打印调用栈</span></span><br><span class="line">    message[<span class="string">&quot;stack&quot;</span>] = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()).<span class="title function_">toString</span>();</span><br><span class="line">    <span class="keyword">var</span> ptr = <span class="title class_">Memory</span>.<span class="title function_">alloc</span>(byteCount);</span><br><span class="line">    <span class="comment">// 将 bytearray 写入到 ptr，并将 ptr 与记录的信息一块发出去</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; byteCount; ++i) &#123;</span><br><span class="line">        <span class="title class_">Memory</span>.<span class="title function_">writeS8</span>(ptr.<span class="title function_">add</span>(i), bytearry[offset + i]);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="title function_">send</span>(message, <span class="title class_">Memory</span>.<span class="title function_">readByteArray</span>(ptr, byteCount));</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.net.SocketInputStream&quot;</span>).<span class="property">socketRead0</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.io.FileDescriptor&#x27;</span>, <span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">fd, bytearry, offset, byteCount, timeout</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">socketRead0</span>(fd, bytearry, offset, byteCount, timeout);</span><br><span class="line">      <span class="keyword">var</span> message = &#123;&#125;;</span><br><span class="line">      message[<span class="string">&quot;function&quot;</span>] = <span class="string">&quot;HTTP_recv&quot;</span>;</span><br><span class="line">      message[<span class="string">&quot;ssl_session_id&quot;</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      message[<span class="string">&quot;src_addr&quot;</span>] = <span class="title function_">ntohl</span>(<span class="title function_">ipToNumber</span>((<span class="variable language_">this</span>.<span class="property">socket</span>.<span class="property">value</span>.<span class="title function_">getRemoteSocketAddress</span>().<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;:&quot;</span>)[<span class="number">0</span>]).<span class="title function_">split</span>(<span class="string">&quot;/&quot;</span>).<span class="title function_">pop</span>()));</span><br><span class="line">      message[<span class="string">&quot;src_port&quot;</span>] = <span class="built_in">parseInt</span>(<span class="variable language_">this</span>.<span class="property">socket</span>.<span class="property">value</span>.<span class="title function_">getRemoteSocketAddress</span>().<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;:&quot;</span>).<span class="title function_">pop</span>());</span><br><span class="line">      message[<span class="string">&quot;dst_addr&quot;</span>] = <span class="title function_">ntohl</span>(<span class="title function_">ipToNumber</span>((<span class="variable language_">this</span>.<span class="property">socket</span>.<span class="property">value</span>.<span class="title function_">getLocalAddress</span>().<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;:&quot;</span>)[<span class="number">0</span>]).<span class="title function_">split</span>(<span class="string">&quot;/&quot;</span>).<span class="title function_">pop</span>()));</span><br><span class="line">      message[<span class="string">&quot;dst_port&quot;</span>] = <span class="built_in">parseInt</span>(<span class="variable language_">this</span>.<span class="property">socket</span>.<span class="property">value</span>.<span class="title function_">getLocalPort</span>());</span><br><span class="line">      message[<span class="string">&quot;stack&quot;</span>] = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()).<span class="title function_">toString</span>();</span><br><span class="line">      <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">// bytearry 的数据长度并不是 byteCount，而是 scoketRead0 执行完后的返回值 result</span></span><br><span class="line">          <span class="keyword">var</span> ptr = <span class="title class_">Memory</span>.<span class="title function_">alloc</span>(result);</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; result; ++i) &#123;</span><br><span class="line">              <span class="title class_">Memory</span>.<span class="title function_">writeS8</span>(ptr.<span class="title function_">add</span>(i), bytearry[offset + i]);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="title function_">send</span>(message, <span class="title class_">Memory</span>.<span class="title function_">readByteArray</span>(ptr, result))</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;可以发现，输出的信息包括：地址，数据信息，函数调用栈（便于解密数据）。</p><p>&emsp;上面是 r0capture 使用 frida 的勾取，对于修改安卓源码的沙箱而言，（1）完全可以用 this.socket.toString 而不是 this.socket.value.getRemoteSocketAddress（r0capture 的做法） 来实现目的地址的获取，因为 Socket 对应的内容就是目的地址信息；（2）由于 <code>socketWrite0</code> 与 <code>socketRead0</code> 都是 native 函数，其具体实现都是 native 层，为了避免对 native 层的代码（so 文件中）进行修改，所以对其上层函数（调用链为： <code>socketRead -&gt; socketRead0</code>），也就是 <code>socketRead</code> 进行修改；（3）调用栈打印时，可以使用 <code>Exception e = new Exception(&quot;wd2711SOCKETresponse&quot;); e.printStackTrace();</code> 修改 <code>Log.getStackTraceString(Throwable)</code>（r0capture 的做法）。最后修改后的安卓源码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// socketInputStream.java</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">socketRead</span><span class="params">(FileDescriptor fd, <span class="type">byte</span> b[], <span class="type">int</span> off, <span class="type">int</span> len, <span class="type">int</span> timeout)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> socketRead0(fd, b, off, len, timeout);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// b -&gt; input</span></span><br><span class="line">        <span class="type">byte</span>[] input = <span class="keyword">new</span> <span class="title class_">byte</span>[result];</span><br><span class="line">        System.arraycopy(b, off, input, <span class="number">0</span>, result);</span><br><span class="line">        <span class="type">String</span> <span class="variable">inputString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(input);</span><br><span class="line">        <span class="comment">// 获得 Log.e 函数</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">logClass</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            logClass = <span class="built_in">this</span>.getClass().getClassLoader().loadClass(<span class="string">&quot;android.util.Log&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">loge</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            loge = logClass.getMethod(<span class="string">&quot;e&quot;</span>, String.class, String.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 打印目的地址</span></span><br><span class="line">            loge.invoke(<span class="literal">null</span>,<span class="string">&quot;r0ysueSOCKETresponse&quot;</span>,<span class="string">&quot;Socket is =&gt; &quot;</span> + <span class="built_in">this</span>.socket.toString());</span><br><span class="line">            <span class="comment">// 打印接收到的信息</span></span><br><span class="line">            loge.invoke(<span class="literal">null</span>,<span class="string">&quot;r0ysueSOCKETresponse&quot;</span>,<span class="string">&quot;buffer is =&gt; &quot;</span> + inputString);</span><br><span class="line">            <span class="comment">// 打印函数调用栈</span></span><br><span class="line">            <span class="type">Exception</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;wd2711SOCKETresponse&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;以上是<code>未加密数据</code>的沙箱“自吐”，下面关注一波<code>加密</code>数据的沙箱“自吐”。要是加密的话，加密机制拉满了的话就是先 app 数据加密，之后再 SSL 加密。r0capture（基于 frida）的工具针对 SSL 加密的话（代码如下）主要是参考 frida_ssl_logger 在 native 层的 hook，要是我们想通过修改源码的话，这部分行不通。因此我们找找其他办法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// r0capture 对 SSL data 的自吐，这里没有打印调用栈信息，这是因为 frida 打印的 native 层（SSL_read 与 SSL_write）的调用栈信息可能不准确，所以在 java 层处理调用栈信息，并保存到全局变量中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">SSLstackwrite</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">SSLstackread</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SSL_read 的 args[0] -&gt; SSL 连接的上下文指针</span></span><br><span class="line"><span class="comment">//             args[1] -&gt; SSL_read 执行完后存放到 args[1]，是 SSL 解密后的数据</span></span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addresses[<span class="string">&quot;SSL_read&quot;</span>], &#123;</span><br><span class="line">    <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> ms = <span class="title function_">getPortAndAddresses</span>(<span class="title function_">SSL_get_fd</span>(args[<span class="number">0</span>]), <span class="literal">true</span>);</span><br><span class="line">        ms[<span class="string">&quot;ssl_session_id&quot;</span>] = <span class="title function_">getSslSessionId</span>(args[<span class="number">0</span>]);</span><br><span class="line">        ms[<span class="string">&quot;function&quot;</span>] = <span class="string">&quot;SSL_read&quot;</span>;</span><br><span class="line">        ms[<span class="string">&quot;stack&quot;</span>] = <span class="title class_">SSLstackread</span>;</span><br><span class="line">        <span class="comment">// 构造 this.message 与 this.buf 结构</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">message</span> = ms;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">buf</span> = args[<span class="number">1</span>];</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">ret</span>) &#123;</span><br><span class="line">        <span class="comment">// 将 ret 转为 32bit 数字</span></span><br><span class="line">        ret |= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ret &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 展示 ssl_session_id + function name + SSL_read 后的结果 + SSL_read 返回的值</span></span><br><span class="line">        <span class="title function_">send</span>(<span class="variable language_">this</span>.<span class="property">message</span>, <span class="title class_">Memory</span>.<span class="title function_">readByteArray</span>(<span class="variable language_">this</span>.<span class="property">buf</span>, ret));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// SSL_read 的 args[0] -&gt; SSL 连接的上下文指针</span></span><br><span class="line"><span class="comment">//             args[1] -&gt; 将要经过 SSL 加密的数据放到 args[1] 中</span></span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addresses[<span class="string">&quot;SSL_write&quot;</span>], &#123;</span><br><span class="line">    <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> ms = <span class="title function_">getPortAndAddresses</span>(<span class="title function_">SSL_get_fd</span>(args[<span class="number">0</span>]), <span class="literal">false</span>);</span><br><span class="line">        ms[<span class="string">&quot;ssl_session_id&quot;</span>] = <span class="title function_">getSslSessionId</span>(args[<span class="number">0</span>]);</span><br><span class="line">        ms[<span class="string">&quot;function&quot;</span>] = <span class="string">&quot;SSL_write&quot;</span>;</span><br><span class="line">        ms[<span class="string">&quot;stack&quot;</span>] = <span class="title class_">SSLstackwrite</span>;</span><br><span class="line">        <span class="title function_">send</span>(message, <span class="title class_">Memory</span>.<span class="title function_">readByteArray</span>(args[<span class="number">1</span>], <span class="built_in">parseInt</span>(args[<span class="number">2</span>])));</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">ret</span>) &#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.org.conscrypt.ConscryptFileDescriptorSocket$SSLInputStream&quot;</span>).<span class="property">read</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">bytearry, int1, int2</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">write</span>(bytearry, int1, int2);</span><br><span class="line">    <span class="title class_">SSLstackwrite</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()).<span class="title function_">toString</span>();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.org.conscrypt.ConscryptFileDescriptorSocket$SSLOutputStream&quot;</span>).<span class="property">write</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">bytearry, int1, int2</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">write</span>(bytearry, int1, int2);</span><br><span class="line">    <span class="title class_">SSLstackwrite</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()).<span class="title function_">toString</span>();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;那我们咋找其他办法呢？首先，我们先快速定位 SSL 相关的函数，通过使用 Objection 搜索所有与 socket 相关的类（<code>objection -g packagename explore; android class search socket</code>），并利用 objection 在执行注入时 <code>-c hook.txt</code>，hook.txt 包含要执行的命令，从而 trace 这些类，从而快速定位到这些类在代码中的位置。最后定位到两个关键函数：<code>com.android.org.conscrypt.ConscryptFileDescriptorSocket$SSLInputStream.read()</code> （数据接收）与 <code>com.android.org.conscrypt.ConscryptFileDescriptorSocket$SSLOutputStream.write()</code>（数据发送）的自吐函数。</p><p>&emsp;之后，我们就要寻思如何输出（1）数据内容；（2）地址信息；（3）函数调用栈。</p><p>&emsp;针对数据内容，进一步调研后发现，<code>com.android.org.conscrypt.ConscryptFileDescriptorSocket$SSLInputStream.read()</code> （数据接收）与 <code>com.android.org.conscrypt.ConscryptFileDescriptorSocket$SSLOutputStream.write()</code>（数据发送）会调用 SSL 成员所在类的函数，即 <code>ssl.read</code> 与 <code>ssl.write</code>，跟踪之后发现 <code>ssl</code> 实际上是 <code>sslWrapper</code> 类型的的对象，因此，我们最终在 <code>sslWrapper</code> 中实现源码修改，从而完成沙箱的自吐。</p><p>&emsp;针对地址信息，使用 objection 的 WallBreaker 插件查看 sslWrapper 类的实例信息，发现其多个成员（例如 <code>handshakeCallbacks</code> 成员）的值与 socket 成员起到的作用一致（上文中使用 <code>this.socket.value.getRemoteSocketAddress()</code> 获取地址信息），因此此问题解决。</p><p>&emsp;针对打印调用栈的问题，与 <code>未加密</code> 数据的处理方法相同。最终，修改的源代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SslWrapper.java</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(FileDescriptor fd, <span class="type">byte</span>[] buf, <span class="type">int</span> offset, <span class="type">int</span> len, <span class="type">int</span> timeoutMillis)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">byte</span>[] input = <span class="keyword">new</span> <span class="title class_">byte</span>[len];</span><br><span class="line">        System.arraycopy(buf, offset, input, <span class="number">0</span>, len);</span><br><span class="line">        <span class="type">String</span> <span class="variable">inputString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(input);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取 Log.e 函数</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">logClass</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            logClass = <span class="built_in">this</span>.getClass().getClassLoader().loadClass(<span class="string">&quot;android.util.Log&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">loge</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            loge = logClass.getMethod(<span class="string">&quot;e&quot;</span>, String.class, String.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 打印目的地址信息</span></span><br><span class="line">            loge.invoke(<span class="literal">null</span>, <span class="string">&quot;wd2711SSLrequest&quot;</span>, <span class="string">&quot;SSL is =&gt; &quot;</span> + <span class="built_in">this</span>.handshakeCallbacks.toString());</span><br><span class="line">            <span class="comment">// 打印 SSL 要加密的信息</span></span><br><span class="line">            loge.invoke(<span class="literal">null</span>, <span class="string">&quot;wd2711SSLrequest&quot;</span>, <span class="string">&quot;buffer is =&gt; &quot;</span> + inputString);</span><br><span class="line">            <span class="comment">// 打印函数调用栈</span></span><br><span class="line">            <span class="type">Exception</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;wd2711SSLrequest&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 原始函数，调用 SSL_write native 层的代码</span></span><br><span class="line">    NativeCrypto.SSL_write(ssl, fd, handshakeCallbacks, buf, offset, len, timeoutMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;<code>最终编译出不带 root 的系统，运行后 Log 会存放到某个 txt 中</code>。这是因为，我们可以使用 crypto_filter_aosp，注入到 ROM，并监控我们想要的 app，之后，将 android 的 SslWrapper.java 修改为上述代码，之后，输出的 log 就可以存放到某个 txt 中。</p><h3 id="使用沙箱辅助中间人抓包"><a href="#使用沙箱辅助中间人抓包" class="headerlink" title="使用沙箱辅助中间人抓包"></a>使用沙箱辅助中间人抓包</h3><p>&emsp;前面所提出的技术，例如 r0capture 使用 frida 进行 SSL 层的抓包，修改系统源码实现 SSL 层的抓包（沙箱），但是对于采用自定义 SSL 框架进行通信的方式来说就行不通了。这类自定义的 SSL 框架（webview，小程序，flutter）不是依赖系统进行收发数据的，而是通过 App 自己进行收发数据的。此时，就需要进行中间人抓包。</p><p>&emsp;但是有很多对抗中间人抓包的方式，例如安卓自己的 API （Proxy.NO_PROXY 对抗 Wifi 代理抓包，getNetWorkCapabilities 检测 VPN 代理），服务器校验客户端，客户端校验服务器的方式。</p><p>&emsp;如何对上述手段进行反制呢？我们可以通过修改系统源码，生成沙箱来进行反制。</p><h4 id="HTTPS-抓包"><a href="#HTTPS-抓包" class="headerlink" title="HTTPS 抓包"></a>HTTPS 抓包</h4><p>&emsp;中间人抓包（只说对于 HTTPS）：对于需要 CA 认证成功才能通信的协议，例如 HTTPS，如果我们使用简单的 wifi 代理与 vpn 代理 （系统设置）来设置中间人，那么在访问网页的时候就会显示<code>您的链接不是私密链接</code>警告。为了解决这个问题，我们可以使用其他代理软件，例如 charles，并将其相应的证书文件放到<code>用户信任的凭据空间</code>与<code>安卓系统信任的凭据空间</code>中。这需要使用 mount 指令将系统分区设置为可写后，才能进行放置，也就是说，需要 root 权限。</p><p>&emsp;那么对于非 root 环境如何做呢？答案是：<code>将 charles 证书文件转换为安卓系统能识别的形式，并放置到系统证书在源码中的对应目录下即可。</code></p><p>（1）将证书转为安卓系统能识别的形式。安装 charles 证书，这样的话证书会被放置在用户信任的凭据空间中，这样就变成了安卓系统能识别的形式，即<code>xxx.0</code>。</p><p>（2）将证书放置到系统证书在源码下的对应目录。对应目录为<code>/system/ca-certificates/google/files/</code>，移动后确认证书所属用户/用户组/对应权限都与其他证书一致（<code>ls -alit</code>）即可。</p><p>&emsp;放到系统信任的凭据空间之后，即使是抓取 HTTPs 数据，也不会报警告。</p><h4 id="对抗服务器校验客户端和-SSL-pinning-的问题"><a href="#对抗服务器校验客户端和-SSL-pinning-的问题" class="headerlink" title="对抗服务器校验客户端和 SSL pinning 的问题"></a>对抗服务器校验客户端和 SSL pinning 的问题</h4><p>&emsp;服务器校验客户端，指的是服务器在与客户端进行通信时，会在握手阶段验证客户端使用证书的公钥。但是当使用中间人进行抓包时，与服务器进行通信的是 charles 抓包软件，其使用的证书就不是服务端认证的证书文件。<code>具体来说，手机安装 app 后，会一并安装 app 自带的证书，服务器就要验证这个证书。代理软件一般是没有这个 app 自带的证书的，所以服务器验证客户端就会失败</code>。</p><p>&emsp;绕过思路也比较简单：<code>在 app 中找到相应的证书文件与对应密码（打开证书的密码），转为 P12 格式的证书，最终导入到代理软件中，以欺骗服务器</code>。</p><p>&emsp;客户端（手机、代理软件）想要与特定证书与服务器通信，就要用密码打开证书。开发者通常使用 KeyStore(InputStream, char[]) 函数使用密码打开证书，我们可以 hook 该函数，从而 dump 证书文件与相应密码。具体 hook 脚本如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// saveClientCer.js</span></span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">StringClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">KeyStore</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.KeyStore&quot;</span>);</span><br><span class="line">    <span class="comment">// KeyStore.load(InputStream, char[])</span></span><br><span class="line">    <span class="title class_">KeyStore</span>.<span class="property">load</span>.<span class="title function_">overload</span>(<span class="string">&quot;java.io.InputStream&quot;</span>, <span class="string">&quot;[C&quot;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">arg0, arg1</span>)&#123;</span><br><span class="line">        <span class="comment">// 打印堆栈</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()));</span><br><span class="line">        <span class="comment">// arg1 为证书密钥</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;KeyStore.load2:&quot;</span>, arg0, arg1 ? <span class="title class_">StringClass</span>.$new(arg1) : <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (arg0) &#123;</span><br><span class="line">            <span class="comment">// 将证书（加密的证书）保存到 /sdcard/Download/ 目录下</span></span><br><span class="line">            <span class="keyword">var</span> file = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.io.File&quot;</span>).$new(<span class="string">&quot;/sdcard/Download/&quot;</span> + <span class="title class_">String</span>(arg0) + <span class="string">&quot;.p12&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> out = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.io.FileOutputStream&quot;</span>).$new(file);</span><br><span class="line">            <span class="keyword">var</span> r;</span><br><span class="line">            <span class="keyword">while</span> ((r = arg0.<span class="title function_">read</span>(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                out.<span class="title function_">write</span>(buffer, <span class="number">0</span>, r);</span><br><span class="line">            &#125;</span><br><span class="line">            out.<span class="title function_">close</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">load</span>(arg0, arg1);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>&emsp;因此，我们可以使用 frida hook 到证书文件与密码，使用 keyStore Explorer 查看证书文件，并用密码进行解密，就可以查看证书的各种信息（书中说可以查看到证书私钥，我存疑）。之后，将证书文件导入到代理软件（例如 charles）（我理解应该也导入密码），就可以进行上网。我们也可以通过修改系统源码 hook 到证书文件与密码，具体而言是 hook java/security/KeyStore.java 中的 load 函数，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">load</span><span class="params">(InputStream stream, <span class="type">char</span>[] password)</span> <span class="keyword">throws</span> IOException, NoSuchAlgorithmException, CertificateException &#123;</span><br><span class="line">    <span class="keyword">if</span> (password != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">inputPASSWORD</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(password);</span><br><span class="line">        <span class="comment">// import Log class</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">logClass</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            logClass = <span class="built_in">this</span>.getClass().getClassLoader().loadClass(<span class="string">&quot;android.util.Log&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// import Log.e function</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">loge</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            loge = logClass.getMethod(<span class="string">&quot;e&quot;</span>, String.class, String.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// log password and call stack</span></span><br><span class="line">            loge.invoke(<span class="literal">null</span>, <span class="string">&quot;KeyStoreLoad&quot;</span>, <span class="string">&quot;KeyStore load PASSWORD is =&gt; &quot;</span> + inputPASSWORD);</span><br><span class="line">            <span class="type">Exception</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;KeyStoreLoad&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// write stream into file</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">currentTime</span> <span class="operator">=</span> String.valueOf(now.getTime());</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;/sdcard/Download/&quot;</span> + inputPASSWORD + currentTime);</span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> length;</span><br><span class="line">        <span class="keyword">while</span> ((length = stream.read(b)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            fos.write(b, <span class="number">0</span>, length);</span><br><span class="line">        &#125;</span><br><span class="line">        fos.flush();</span><br><span class="line">        fos.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    keyStoreSpi.engineLoad(stream, password);</span><br><span class="line">    initialized = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;但是对证书的 dump 会报错，因此使用 Objection trace 与 keystore 相关的类（打开样本 apk 时调用 keystore 的哪些函数），从而找到其他更通用的函数。之后，使用 wallbreaker 查看函数中对象的数据结构，发现 java.security.KeyStore$PrivateKeyEntry 对象中存在证书信息。</p><p>&emsp;我们还了解到，如果知道证书链信息与 privatekey 之后，就可以将证书保存在文件中，具体是用 <code>storeP12(PrivateKey sk, String p7, String p12Path, String p12Password)</code>。其中，sk 指的是 privatekey，p7 指的是证书链，p12Path 是将证书导出到哪里，p12Password 指的是证书密码（用户指定）。此函数的在源码中的代码路径我并未找到。</p><p>&emsp;使用 Objection 对类 KeyStore$PrivateKeyEntry 中的函数进行 trace，来查看哪些函数在<code>服务端验证客户端</code>的流程中被调用，发现会调用 getPrivateKey() 与 getCertificateChain() 函数。之后，使用 frida 进行简单测试，具体而言，就是使用 js 重写了 <code>KeyStore$PrivateKeyEntry.getPrivateKey</code>与<code>KeyStore$PrivateKeyEntry.getCertificateChain</code>，然后注入到了样本中。</p><p>&emsp;与之前 hook KeyStore.load 相比，这种方法是 dump 成功的。<code>KeyStore.load 中 dump 失败的原因不详。</code>在 getPrivateKey 与 getCertificateChain 中进行 dump 时，我们可以自定义证书的密码，而在 KeyStore.load 中是不行的。</p><p>&emsp;最后，我们在源码中修改 getPrivateKey 与 getCertificateChain：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// KeyStore-PrivateEntry.java</span></span><br><span class="line"><span class="keyword">public</span> PrivateKey <span class="title function_">getPrivateKey</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">p12Password</span> <span class="operator">=</span> <span class="string">&quot;wd2711&quot;</span>;</span><br><span class="line">    <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">currentTime</span> <span class="operator">=</span> String.valueOf(now.getTime());</span><br><span class="line">    <span class="type">String</span> <span class="variable">p12Path</span> <span class="operator">=</span> <span class="string">&quot;/sdcard/Download/tmp&quot;</span>  + currentTime + <span class="string">&quot;.p12&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化证书链</span></span><br><span class="line">    <span class="type">X509Certificate</span> <span class="variable">p7X509</span> <span class="operator">=</span> (X509Certificate) chain[<span class="number">0</span>];</span><br><span class="line">    Certificate[] mychain = <span class="keyword">new</span> <span class="title class_">Certificate</span>[]&#123;p7X509&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 生成一个空的 p12 证书</span></span><br><span class="line">    <span class="type">KeyStore</span> <span class="variable">myks</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        myks = KeyStore.getInstance(<span class="string">&quot;PKCS12&quot;</span>, <span class="string">&quot;BC&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (KeyStoreException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchProviderException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        myks.load(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (CertificateException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置此证书的 privatekey 以及相应的自定义的 password，原来的密码可能不是这个，这里更改了</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        myks.setKeyEntry(<span class="string">&quot;client&quot;</span>, privKey, p12Password.toCharArray(), mychain);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (KeyStoreException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用自定义的密码加密保存 p12 证书，证书已经保存在 p12Path 中</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fOut</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fOut = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(p12Path);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        myks.store(fOut, p12Password.toCharArray());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (KeyStoreException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> privKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;以上解决<code>服务端验证客户端</code>时出现的问题，但是如果证书内容被硬编码到代码中，就可能绕过上述说的相关函数，例如 keyStore.load。</p><p>&emsp;<code>客户端校验服务器</code>的过程与 SSL Pinning 有关。SSL pinning 意思就是<code>客户端校验当前使用的证书是不是特定证书，其实是在 app 层面对证书进行校验</code>。相关的 SSL pinning 绕过工具为：Objection的 SSL pinning bypass、FridaContainer、DroidSSLUnpinning，这些工具的原理就是对 app 中的证书校验代码部分进行 patch。</p><p>&emsp;对于系统源码来说，我们无法直接干预这个过程，但是由于 SSL pinning 的校验流程都会有<code>打开证书、进行哈希</code>这两个步骤，因此我们可以监控文件打开的操作，从而绕过 SSL pinning 校验。通过 objection hook Java.io.File 类的构造函数 <code>$init</code>，最后发现证书校验函数所在的类总是调用<code>java.io.File.$init(File, String)</code>这样一个函数重载，第二个参数是<code>.0</code>格式的证书名。因此，我们对<code>java.io.File.$init(File, String)</code>函数使用 frida 进行 hook，通过打印调用栈后发现，<code>并不是所有证书都会进行校验</code>。而对于进行校验的证书来说，其调用栈中都会存在<code>X509TrustManagerExtensions.checkServerTrusted</code>函数。</p><p>&emsp;因此，我们可以在源码的 file 类中打印调用栈中有<code>X509TrustManagerExtensions.checkServerTrusted</code>函数的调用栈信息，因此，我们就<code>可以得到 apk 中进行 SSL pinning 校验的相关函数名，从而进行下一步操作</code>。总的来说，绕过 SSL pinning 的基础是假定 app 会通过打开证书文件以及调用栈中会包含<code>X509TrustManagerExtensions.checkServerTrusted</code>函数，这其实是可以反绕过的。</p><h3 id="风控对抗-设备信息篡改"><a href="#风控对抗-设备信息篡改" class="headerlink" title="风控对抗-设备信息篡改"></a>风控对抗-设备信息篡改</h3><p>&emsp;风险控制，即在电子支付或其他场景下保护甲方产品免受利益损失，其与黑产相对立。风控判断用户的真实性往往是通过用户是否使用真实的设备来进行，本节主要是使用沙箱的方式，不切换真实设备，通过修改源码来让 app 认为是两台设备。</p><p>&emsp;设备的相关信息（设备指纹/设备名称/设备型号）都是通过 android.os.Build 类中的成员值得到的。在安卓开发中，要获取此类中的值，直接访问该类即可。通过查看 android.os.Build 的构造源码，可以发现好多信息，例如 ID/DEVICE/BOARD 都是通过 getString(“ro.build.xxx”) 来得到的。</p><p>&emsp;通过跟踪 getString 函数，最终可以发现实际上 getString 调用了 native 层的 <code>__system_property_get()</code>函数，此函数位于 <code>bionic/libc/bionic/system_properties.cpp</code>中，属于 libc 基础库的内容。<code>__system_property_get()</code>已经是最底层的了，该函数通过与 property_service_socket 设备进行 socket 通信来获取具体的属性值。某些黑产通过修改 ROM（即修改<code>__system_property_get()</code>代码），来修改返回值。</p><p>&emsp;本节则是修改 getString 函数，修改方式很简单，就是修改源码即可，其是 android.os.Build 类中的函数。Build 类中大部分信息无法表示设备的唯一性，用来表示唯一性的有：<code>IMEI（国际移动设备识别码）、IMSI（国际移动用户识别码）、Android_id、SN</code>。</p><p>&emsp;IMEI 是设备的唯一标识，由 15 位数字组成。开发者需要用 <code>TelephonyManager.getDeviceID/getImei</code>来获得，当然需要在 androidManifest.xml 中声明一些权限，我们可以在 <code>frameworks/base/telephony/java/android/teltephony/TelephonyManager.java</code>中修改这两个函数的返回值，从而让开发者分不清两个设备。</p><p>&emsp;IMSI 是移动网络中区分不同用户的识别码，其存储在 SIM 卡中，由 15 位数字组成。IMSI 由<code>移动国家号码（MCC）、移动网络号码（MNC）、移动用户识别号码（MSIN）链接</code>而成。中国的 MCC 为 460，中国移动的 MNC 是 00。开发者需要用 <code>TelephonyManager.getSubscriberId</code>来获得，也需要在 androidManifest.xml 中声明一些权限。</p><p>&emsp;Android_id 是设备第一次启动时产生与存储的 64 bit 数，也叫做 SSAID（Settings.Secure.ANDROID_ID）。此值只有在设备被刷机或者恢复出厂设置时才会被修改。在 android 8 及以上版本，每一个 app 在第一次安装时都会根据 app 签名 + 设备信息生成针对于 app 的 android_id。因此，不同的 app 所拿到的 android_id 是不一样的。不同于 IMEI 与 IMSI，拿到 android_id 不需要任何权限。获取代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.provider.Settings;</span><br><span class="line"><span class="type">String</span> <span class="variable">android_id</span> <span class="operator">=</span> Settings.Secure.getString(getContentResolver(),</span><br><span class="line">                                             Settings.Secure.ANDROID_ID);</span><br></pre></td></tr></table></figure><p>&emsp;看一下 Settings.Secure.getString 的源码，并修改它，让它返回自定义的值。</p><p>&emsp;SN（serial number）就是 build 类中的 SERIAL 成员，它是手机生产厂商提供的设备序列号，是为了验证产品的合法而存在的，其格式由生产厂商自定义。也需要在 androidManifest.xml 中声明一些权限，通过 Build.getSerial（android 8-10）来获取 SN 号，还可以在 adb shell 中以 <code>getprop ro.serialno</code>获取。</p><p>&emsp;<code>真实黑产不可能这么简单</code>。</p><p>&emsp;总结一下，如果 app 想实现不被系统底层窥探，则要尽量将所有关键功能交由自身应用实现，减少对系统的依赖，例如<code>自实现虚拟机，不依赖于 art 虚拟机解析指令；自定义 openssl 库</code>，而不是简单的使用系统 api。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Frida逆向与协议分析-3&quot;&gt;&lt;a href=&quot;#Frida逆向与协议分析-3&quot; class=&quot;headerlink&quot; title=&quot;Frida逆向与协议分析-3&quot;&gt;&lt;/a&gt;Frida逆向与协议分析-3&lt;/h1&gt;&lt;p&gt;&amp;emsp;frida逆向与协议分析第三部分，主要就是Android源码编译、沙箱等。&lt;/p&gt;</summary>
    
    
    
    <category term="re-book" scheme="https://wd-2711.tech/categories/re-book/"/>
    
    
  </entry>
  
</feed>
